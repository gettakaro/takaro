version: "3"
services:
  takaro_api:
    image: ghcr.io/gettakaro/takaro-app-api:latest
    networks:
      - traefik
      - backend
    environment:
      REDIS_HOST: redis
      TAKARO_SERVICE: "app-api"
      START_WORKERS: "false"
      DISCORD_HANDLE_EVENTS: "false"
    env_file:
      - .env
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.takaro_api.rule=Host(`api.takaro.example.com`)"
      - "traefik.http.routers.takaro_api.entrypoints=websecure"
      - "traefik.http.routers.takaro_api.service=takaro_api"
      - "traefik.http.services.takaro_api.loadbalancer.server.port=3000"

      # The following helps with socket.io connections
      - traefik.http.services.takaro_api.loadBalancer.sticky.cookie.name=server_id
      - traefik.http.services.takaro_api.loadBalancer.sticky.cookie.httpOnly=true

      - "traefik.docker.network=traefik"

  takaro_worker:
    image: ghcr.io/gettakaro/takaro-app-api:latest
    networks:
      - backend
    environment:
      REDIS_HOST: redis
      TAKARO_SERVICE: "app-worker"
      START_WORKERS: "true"
      DISCORD_HANDLE_EVENTS: "false"
    env_file:
      - .env
    restart: unless-stopped

  takaro_discord:
    image: ghcr.io/gettakaro/takaro-app-api:latest
    networks:
      - backend
    environment:
      REDIS_HOST: redis
      TAKARO_SERVICE: "app-discord"
      START_WORKERS: "false"
      DISCORD_HANDLE_EVENTS: "true"
    env_file:
      - .env
    restart: unless-stopped
 
  takaro_migrator:
    image: ghcr.io/gettakaro/takaro-app-api:latest
    container_name: takaro_migrator
    networks:
      - backend
    command: npm -w packages/app-api run db:migrate
    env_file:
      - .env 
      
  takaro_connector:
    image: ghcr.io/gettakaro/takaro-app-connector:latest
    container_name: takaro_connector
    networks:
      - backend
    environment:
      REDIS_HOST: "redis"
      TAKARO_SERVICE: "app-connector"  
    env_file:
      - .env      
    restart: unless-stopped

  takaro_web:
    image: ghcr.io/gettakaro/takaro-web-main:latest
    networks:
      - traefik
    environment:
      VITE_API: https://api.takaro.example.com
      VITE_ORY_URL: https://idp.takaro.example.com
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.takaro_web.rule=Host(`takaro.example.com`)"
      - "traefik.http.routers.takaro_web.entrypoints=websecure"
      - "traefik.http.routers.takaro_web.service=takaro_web"
      - "traefik.http.services.takaro_web.loadbalancer.server.port=80"

  postgresql:
    image: postgres:15
    networks:
      - backend
    ports:
      - 127.0.0.1:5432:5432
    volumes:
      - ./_data/postgres/data:/var/lib/postgresql/data
      - ./_data/postgres/logs:/var/lib/postgresql/data/pg_logs
    env_file:
      - .env
    restart: unless-stopped

  redis:
    image: redis
    restart: unless-stopped
    ports:
      - 127.0.0.1:6379:6379
    networks:
      - backend

  kratos-migrate:
    image: oryd/kratos:v1.0.0
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql_kratos:5432/kratos
    volumes:
      - ../../containers/ory/kratos:/etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    networks:
      - backend    
  kratos:
    image: oryd/kratos:v1.0.0
    ports:
      - '127.0.0.1:4433:4433' # public
      - '127.0.0.1:4434:4434' # admin
    restart: on-failure
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql_kratos:5432/kratos
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    volumes:
      - ../../containers/ory/kratos:/etc/config/kratos
    networks:
      - backend      
  postgresql_kratos:
    image: postgres:15
    ports:
      - 127.0.0.1:13101:5432
    volumes:
      - ./_data/kratos-db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: kratos
    networks:
      - backend

  hydra:
    image: oryd/hydra:v2.0.3
    ports:
      - '127.0.0.1:4444:4444' # Public port
      - '127.0.0.1:4445:4445' # Admin port
      - '127.0.0.1:5555:5555' # Port for hydra token user
    command: serve -c /etc/config/hydra/hydra.yml all --dev
    volumes:
      - ../../containers/ory/hydra:/etc/config/hydra
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql_hydra:5432/hydra
      - URLS_SELF_ISSUER=http://hydra:4444/
    networks:
      - backend      
  hydra-migrate:
    image: oryd/hydra:v2.0.3
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql_hydra:5432/hydra
    command: migrate -c /etc/config/hydra/hydra.yml sql -e --yes
    volumes:
      - ../../containers/ory/hydra:/etc/config/hydra
    networks:
      - backend
  postgresql_hydra:
    image: postgres:15
    ports:
      - 127.0.0.1:13102:5432
    volumes:
      - ./_data/hydra-db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: hydra
    networks:
      - backend

  prometheus:
    image: prom/prometheus:v2.52.0
    networks:
      - backend    
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - 9090:9090
    volumes:
      - ../../containers/prometheus:/etc/prometheus
      - ./_data/prometheus:/prometheus      
  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    ports:
      - "9091:9091"
    networks:
      - backend      

  traefik:
    image: "traefik:v2.10.7"
    container_name: "traefik"
    networks:
      - traefik
    command:
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
   #   - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      # Global HTTP -> HTTPS redirect
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"


      # TLS Settings
      - "--certificatesresolvers.myresolver.acme.email=domains@takaro.example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/config/acme.json"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory" # letsencrypt staging server
      - "--certificatesResolvers.myresolver.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesResolvers.myresolver.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certresolver=myresolver"
      - "--entrypoints.websecure.http.tls.domains[0].main=takaro.example.com"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.takaro.example.com"

    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/etc/traefik/config:/config"

networks:
  traefik:
  backend:

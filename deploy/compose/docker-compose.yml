version: "3"
services:
  takaro_api:
    image: ghcr.io/gettakaro/takaro-app-api:latest
    ports:
      - 13000:3000
    environment:
      REDIS_HOST: redis
      TAKARO_SERVICE: "app-api"
      START_WORKERS: "false"
      DISCORD_HANDLE_EVENTS: "false"
      POSTGRES_HOST: postgresql
      CORS_ALLOWED_ORIGINS: http://127.0.0.1:13000,http://127.0.0.1:13001,http://127.0.0.1:13002
    env_file:
      - ./../../.env
    restart: unless-stopped

  takaro_worker:
    image: ghcr.io/gettakaro/takaro-app-api:latest
    environment:
      REDIS_HOST: redis
      TAKARO_SERVICE: "app-worker"
      START_WORKERS: "true"
      DISCORD_HANDLE_EVENTS: "false"
      POSTGRES_HOST: postgresql
    env_file:
      - ./../../.env
    restart: unless-stopped

  takaro_discord:
    image: ghcr.io/gettakaro/takaro-app-api:latest
    environment:
      REDIS_HOST: redis
      TAKARO_SERVICE: "app-discord"
      START_WORKERS: "false"
      DISCORD_HANDLE_EVENTS: "true"
      POSTGRES_HOST: postgresql
    env_file:
      - ./../../.env
    restart: unless-stopped

  takaro_migrator:
    image: ghcr.io/gettakaro/takaro-app-api:latest
    depends_on:
      - postgresql
    container_name: takaro_migrator
    command: npm -w packages/app-api run db:migrate
    env_file:
      - ./../../.env
    environment:
      POSTGRES_HOST: postgresql
  takaro_connector:
    image: ghcr.io/gettakaro/takaro-app-connector:latest
    container_name: takaro_connector
    environment:
      REDIS_HOST: "redis"
      TAKARO_SERVICE: "app-connector"
      TAKARO_HOST: http://takaro_api:3000
    env_file:
      - ./../../.env
    restart: unless-stopped

  takaro_web:
    image: ghcr.io/gettakaro/takaro-web-main:latest
    ports:
      - 13001:80
    environment:
      VITE_API: http://127.0.0.1:13000
      VITE_ORY_URL: http://127.0.0.1:4433
      VITE_POSTHOG_PUBLIC_API_KEY: "placeholder"
      VITE_POSTHOG_API_URL: "placeholder"
    restart: unless-stopped

  postgresql:
    image: postgres:15
    ports:
      - 127.0.0.1:15432:5432
    volumes:
      - ../../_data/db:/var/lib/postgresql/data
    env_file:
      - ./../../.env
    restart: unless-stopped

  redis:
    image: redis
    restart: unless-stopped
    ports:
      - 127.0.0.1:6379:6379

  kratos-migrate:
    image: oryd/kratos:v1.2.0
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql_kratos:5432/kratos
    volumes:
      - ../../containers/ory/kratos:/etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    env_file:
      - ./../../.env
  kratos:
    image: oryd/kratos:v1.2.0
    ports:
      - '127.0.0.1:4433:4433' # public
      - '127.0.0.1:4434:4434' # admin
    restart: on-failure
    environment:
      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql_kratos:5432/kratos
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    volumes:
      - ../../containers/ory/kratos:/etc/config/kratos
    env_file:
      - ./../../.env
  postgresql_kratos:
    image: postgres:15
    ports:
      - 127.0.0.1:13101:5432
    volumes:
      - ../../_data/kratos-db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: kratos

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - 9090:9090
    volumes:
      - ../../containers/prometheus:/etc/prometheus
      - ../../_data/prometheus:/prometheus
  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    ports:
      - "9091:9091"

import { FC } from 'react';
import { styled } from '../../../styled';

const Header = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: top;
  width: 100%;
`;

const EventType = styled.div`
  p:first-child {
    font-weight: bold;
    margin-right: ${({ theme }) => theme.spacing['0_5']};
  }

  p:last-child {
    color: ${({ theme }) => theme.colors.textAlt};
  }
`;

const Wrapper = styled.div`
  display: flex;
  flex-direction: row;
  gap: ${({ theme }) => theme.spacing['1']};

  width: 100%;
`;

const Content = styled.div`
  display: flex;
  flex-direction: column;
  gap: ${({ theme }) => theme.spacing['0_25']};

  width: 100%;
`;

const Data = styled.div`
  display: grid;
  grid-template-columns: repeat(4, 1fr);
`;

const DataItem = styled.div`
  p:first-child {
    color: ${({ theme }) => theme.colors.textAlt};
  }
`;

const DetailButton = styled.a`
  color: ${({ theme }) => theme.colors.textAlt};
  text-decoration: underline;
  cursor: pointer;
`;

const EventProperty: FC<{ name: string; value: string }> = ({ name, value }) => {
  return (
    <DataItem>
      <p>{name}</p>
      <p>{value}</p>
    </DataItem>
  );
};

export type FeedEventProps = {
  type: string;
  createdAt: string;
  data: Record<string, unknown>;
  onDetailClick: () => void;
};

function getTimeAgo(timestamp: number) {
  const now = new Date();
  const time = new Date(timestamp);

  const secondsPast = Math.floor((now.getTime() - time.getTime()) / 1000);

  const format = (value: number, timeUnit: string) => {
    return `${value} ${timeUnit}${value === 1 ? '' : 's'} ago`;
  };

  if (secondsPast < 60) {
    return format(secondsPast, 'second');
  }

  const minutesPast = Math.floor(secondsPast / 60);
  if (minutesPast < 60) {
    return format(minutesPast, 'minute');
  }

  const hoursPast = Math.floor(minutesPast / 60);
  if (hoursPast < 24) {
    return format(hoursPast, 'hour');
  }

  const daysPast = Math.floor(hoursPast / 24);
  if (daysPast < 365) {
    return format(daysPast, 'day');
  }

  const yearsPast = Math.floor(daysPast / 365);
  return format(yearsPast, 'year');
}

const Circle = styled.div`
  width: 10px;
  height: 10px;
  border-radius: 50%;

  border: 1px solid #474747;

  background-color: ${({ theme }) => theme.colors.textAlt};
`;

const Line = styled.div`
  width: 1px;
  height: 100%;

  background-color: ${({ theme }) => theme.colors.textAlt};
`;

const LineWrapper = styled.div`
  gap: ${({ theme }) => theme.spacing['0_5']};
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
`;

export const FeedEvent: FC<FeedEventProps> = ({ type, createdAt, onDetailClick }) => {
  const timestamp = Date.parse(createdAt);
  const timeAgo = getTimeAgo(timestamp);

  return (
    <Wrapper>
      <LineWrapper>
        <Circle />
        <Line />
      </LineWrapper>
      <Content>
        <Header>
          <EventType>
            <p>{type}</p>
            <p>{timeAgo}</p>
          </EventType>
          <DetailButton onClick={onDetailClick}>view details</DetailButton>
        </Header>
        <Data>
          <EventProperty name="Player" value="Brunkel" />
          <EventProperty name="Server" value="My cool server" />
          <EventProperty name="Server" value="My cool server" />
        </Data>
      </Content>
    </Wrapper>
  );
};

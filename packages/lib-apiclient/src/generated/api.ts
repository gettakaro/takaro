/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration.js';
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common.js';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base.js';

/**
 *
 * @export
 * @interface APIOutput
 */
export interface APIOutput {
  /**
   *
   * @type {MetadataOutput}
   * @memberof APIOutput
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface BaseEvent
 */
export interface BaseEvent {
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof BaseEvent
   */
  timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {string}
   * @memberof BaseEvent
   */
  type: BaseEventTypeEnum;
  /**
   *
   * @type {string}
   * @memberof BaseEvent
   */
  msg: string;
}

export const BaseEventTypeEnum = {
  Log: 'log',
  PlayerConnected: 'player-connected',
  PlayerDisconnected: 'player-disconnected',
  ChatMessage: 'chat-message',
} as const;

export type BaseEventTypeEnum =
  typeof BaseEventTypeEnum[keyof typeof BaseEventTypeEnum];

/**
 *
 * @export
 * @interface CommandArgumentCreateDTO
 */
export interface CommandArgumentCreateDTO {
  /**
   *
   * @type {string}
   * @memberof CommandArgumentCreateDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CommandArgumentCreateDTO
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof CommandArgumentCreateDTO
   */
  helpText?: string;
  /**
   *
   * @type {string}
   * @memberof CommandArgumentCreateDTO
   */
  defaultValue?: string;
  /**
   *
   * @type {number}
   * @memberof CommandArgumentCreateDTO
   */
  position?: number;
  /**
   *
   * @type {string}
   * @memberof CommandArgumentCreateDTO
   */
  commandId: string;
}
/**
 *
 * @export
 * @interface CommandArgumentDTOAPI
 */
export interface CommandArgumentDTOAPI {
  /**
   *
   * @type {CommandArgumentOutputDTO}
   * @memberof CommandArgumentDTOAPI
   */
  data: CommandArgumentOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof CommandArgumentDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface CommandArgumentOutputDTO
 */
export interface CommandArgumentOutputDTO {
  /**
   *
   * @type {string}
   * @memberof CommandArgumentOutputDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CommandArgumentOutputDTO
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof CommandArgumentOutputDTO
   */
  helpText: string;
  /**
   *
   * @type {string}
   * @memberof CommandArgumentOutputDTO
   */
  defaultValue?: string;
  /**
   *
   * @type {number}
   * @memberof CommandArgumentOutputDTO
   */
  position: number;
  /**
   *
   * @type {string}
   * @memberof CommandArgumentOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof CommandArgumentOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof CommandArgumentOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface CommandArgumentUpdateDTO
 */
export interface CommandArgumentUpdateDTO {
  /**
   *
   * @type {string}
   * @memberof CommandArgumentUpdateDTO
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CommandArgumentUpdateDTO
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof CommandArgumentUpdateDTO
   */
  helpText?: string;
  /**
   *
   * @type {string}
   * @memberof CommandArgumentUpdateDTO
   */
  defaultValue?: string;
}
/**
 *
 * @export
 * @interface CommandCreateDTO
 */
export interface CommandCreateDTO {
  /**
   *
   * @type {string}
   * @memberof CommandCreateDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CommandCreateDTO
   */
  trigger: string;
  /**
   *
   * @type {string}
   * @memberof CommandCreateDTO
   */
  helpText?: string;
  /**
   *
   * @type {string}
   * @memberof CommandCreateDTO
   */
  moduleId: string;
  /**
   *
   * @type {string}
   * @memberof CommandCreateDTO
   */
  function?: string;
  /**
   *
   * @type {Array<CommandArgumentCreateDTO>}
   * @memberof CommandCreateDTO
   */
  arguments?: Array<CommandArgumentCreateDTO>;
}
/**
 *
 * @export
 * @interface CommandExecuteDTOAPI
 */
export interface CommandExecuteDTOAPI {
  /**
   *
   * @type {CommandOutput}
   * @memberof CommandExecuteDTOAPI
   */
  data: CommandOutput;
  /**
   *
   * @type {MetadataOutput}
   * @memberof CommandExecuteDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface CommandExecuteInputDTO
 */
export interface CommandExecuteInputDTO {
  /**
   *
   * @type {string}
   * @memberof CommandExecuteInputDTO
   */
  command: string;
}
/**
 *
 * @export
 * @interface CommandOutput
 */
export interface CommandOutput {
  /**
   *
   * @type {string}
   * @memberof CommandOutput
   */
  rawResult: string;
  /**
   *
   * @type {boolean}
   * @memberof CommandOutput
   */
  success: boolean;
  /**
   *
   * @type {string}
   * @memberof CommandOutput
   */
  errorMessage?: string;
}
/**
 *
 * @export
 * @interface CommandOutputArrayDTOAPI
 */
export interface CommandOutputArrayDTOAPI {
  /**
   *
   * @type {Array<CommandOutputDTO>}
   * @memberof CommandOutputArrayDTOAPI
   */
  data: Array<CommandOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof CommandOutputArrayDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface CommandOutputDTO
 */
export interface CommandOutputDTO {
  /**
   *
   * @type {string}
   * @memberof CommandOutputDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CommandOutputDTO
   */
  trigger: string;
  /**
   *
   * @type {string}
   * @memberof CommandOutputDTO
   */
  helpText: string;
  /**
   *
   * @type {FunctionOutputDTO}
   * @memberof CommandOutputDTO
   */
  function: FunctionOutputDTO;
  /**
   *
   * @type {string}
   * @memberof CommandOutputDTO
   */
  functionId: string;
  /**
   *
   * @type {string}
   * @memberof CommandOutputDTO
   */
  moduleId: string;
  /**
   *
   * @type {Array<CommandArgumentOutputDTO>}
   * @memberof CommandOutputDTO
   */
  arguments: Array<CommandArgumentOutputDTO>;
  /**
   *
   * @type {string}
   * @memberof CommandOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof CommandOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof CommandOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface CommandOutputDTOAPI
 */
export interface CommandOutputDTOAPI {
  /**
   *
   * @type {CommandOutputDTO}
   * @memberof CommandOutputDTOAPI
   */
  data: CommandOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof CommandOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface CommandSearchInputAllowedFilters
 */
export interface CommandSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof CommandSearchInputAllowedFilters
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof CommandSearchInputAllowedFilters
   */
  moduleId?: string;
  /**
   *
   * @type {string}
   * @memberof CommandSearchInputAllowedFilters
   */
  name?: string;
  /**
   *
   * @type {boolean}
   * @memberof CommandSearchInputAllowedFilters
   */
  enabled?: boolean;
}
/**
 *
 * @export
 * @interface CommandSearchInputDTO
 */
export interface CommandSearchInputDTO {
  /**
   *
   * @type {CommandSearchInputAllowedFilters}
   * @memberof CommandSearchInputDTO
   */
  filters?: CommandSearchInputAllowedFilters;
  /**
   *
   * @type {any}
   * @memberof CommandSearchInputDTO
   */
  search?: any;
  /**
   *
   * @type {number}
   * @memberof CommandSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof CommandSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof CommandSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof CommandSearchInputDTO
   */
  sortDirection?: CommandSearchInputDTOSortDirectionEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof CommandSearchInputDTO
   */
  extend?: Array<string>;
}

export const CommandSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type CommandSearchInputDTOSortDirectionEnum =
  typeof CommandSearchInputDTOSortDirectionEnum[keyof typeof CommandSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface CommandTriggerDTO
 */
export interface CommandTriggerDTO {
  /**
   *
   * @type {IPlayerReferenceDTO}
   * @memberof CommandTriggerDTO
   */
  player: IPlayerReferenceDTO;
  /**
   *
   * @type {string}
   * @memberof CommandTriggerDTO
   */
  msg: string;
}
/**
 *
 * @export
 * @interface CommandUpdateDTO
 */
export interface CommandUpdateDTO {
  /**
   *
   * @type {string}
   * @memberof CommandUpdateDTO
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CommandUpdateDTO
   */
  trigger?: string;
  /**
   *
   * @type {string}
   * @memberof CommandUpdateDTO
   */
  helpText?: string;
  /**
   *
   * @type {string}
   * @memberof CommandUpdateDTO
   */
  function?: string;
  /**
   *
   * @type {Array<CommandArgumentCreateDTO>}
   * @memberof CommandUpdateDTO
   */
  arguments?: Array<CommandArgumentCreateDTO>;
}
/**
 *
 * @export
 * @interface CronJobCreateDTO
 */
export interface CronJobCreateDTO {
  /**
   *
   * @type {string}
   * @memberof CronJobCreateDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CronJobCreateDTO
   */
  temporalValue: string;
  /**
   *
   * @type {string}
   * @memberof CronJobCreateDTO
   */
  moduleId: string;
  /**
   *
   * @type {string}
   * @memberof CronJobCreateDTO
   */
  function?: string;
}
/**
 *
 * @export
 * @interface CronJobOutputArrayDTOAPI
 */
export interface CronJobOutputArrayDTOAPI {
  /**
   *
   * @type {Array<CronJobOutputDTO>}
   * @memberof CronJobOutputArrayDTOAPI
   */
  data: Array<CronJobOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof CronJobOutputArrayDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface CronJobOutputDTO
 */
export interface CronJobOutputDTO {
  /**
   *
   * @type {string}
   * @memberof CronJobOutputDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CronJobOutputDTO
   */
  temporalValue: string;
  /**
   *
   * @type {FunctionOutputDTO}
   * @memberof CronJobOutputDTO
   */
  function: FunctionOutputDTO;
  /**
   *
   * @type {string}
   * @memberof CronJobOutputDTO
   */
  moduleId: string;
  /**
   *
   * @type {string}
   * @memberof CronJobOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof CronJobOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof CronJobOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface CronJobOutputDTOAPI
 */
export interface CronJobOutputDTOAPI {
  /**
   *
   * @type {CronJobOutputDTO}
   * @memberof CronJobOutputDTOAPI
   */
  data: CronJobOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof CronJobOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface CronJobSearchInputAllowedFilters
 */
export interface CronJobSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof CronJobSearchInputAllowedFilters
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof CronJobSearchInputAllowedFilters
   */
  moduleId?: string;
  /**
   *
   * @type {string}
   * @memberof CronJobSearchInputAllowedFilters
   */
  name?: string;
}
/**
 *
 * @export
 * @interface CronJobSearchInputDTO
 */
export interface CronJobSearchInputDTO {
  /**
   *
   * @type {CronJobSearchInputAllowedFilters}
   * @memberof CronJobSearchInputDTO
   */
  filters?: CronJobSearchInputAllowedFilters;
  /**
   *
   * @type {any}
   * @memberof CronJobSearchInputDTO
   */
  search?: any;
  /**
   *
   * @type {number}
   * @memberof CronJobSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof CronJobSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof CronJobSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof CronJobSearchInputDTO
   */
  sortDirection?: CronJobSearchInputDTOSortDirectionEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof CronJobSearchInputDTO
   */
  extend?: Array<string>;
}

export const CronJobSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type CronJobSearchInputDTOSortDirectionEnum =
  typeof CronJobSearchInputDTOSortDirectionEnum[keyof typeof CronJobSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface CronJobTriggerDTO
 */
export interface CronJobTriggerDTO {
  /**
   *
   * @type {string}
   * @memberof CronJobTriggerDTO
   */
  gameServerId: string;
  /**
   *
   * @type {string}
   * @memberof CronJobTriggerDTO
   */
  cronjobId: string;
  /**
   *
   * @type {string}
   * @memberof CronJobTriggerDTO
   */
  moduleId: string;
}
/**
 *
 * @export
 * @interface CronJobUpdateDTO
 */
export interface CronJobUpdateDTO {
  /**
   *
   * @type {string}
   * @memberof CronJobUpdateDTO
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CronJobUpdateDTO
   */
  temporalValue?: string;
  /**
   *
   * @type {string}
   * @memberof CronJobUpdateDTO
   */
  function?: string;
}
/**
 *
 * @export
 * @interface DomainCreateInputDTO
 */
export interface DomainCreateInputDTO {
  /**
   *
   * @type {string}
   * @memberof DomainCreateInputDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof DomainCreateInputDTO
   */
  id?: string;
}
/**
 *
 * @export
 * @interface DomainCreateOutputDTO
 */
export interface DomainCreateOutputDTO {
  /**
   *
   * @type {DomainOutputDTO}
   * @memberof DomainCreateOutputDTO
   */
  createdDomain: DomainOutputDTO;
  /**
   *
   * @type {UserOutputDTO}
   * @memberof DomainCreateOutputDTO
   */
  rootUser: UserOutputDTO;
  /**
   *
   * @type {RoleOutputDTO}
   * @memberof DomainCreateOutputDTO
   */
  rootRole: RoleOutputDTO;
  /**
   *
   * @type {string}
   * @memberof DomainCreateOutputDTO
   */
  password: string;
}
/**
 *
 * @export
 * @interface DomainCreateOutputDTOAPI
 */
export interface DomainCreateOutputDTOAPI {
  /**
   *
   * @type {DomainCreateOutputDTO}
   * @memberof DomainCreateOutputDTOAPI
   */
  data: DomainCreateOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof DomainCreateOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface DomainOutputArrayDTOAPI
 */
export interface DomainOutputArrayDTOAPI {
  /**
   *
   * @type {Array<DomainOutputDTO>}
   * @memberof DomainOutputArrayDTOAPI
   */
  data: Array<DomainOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof DomainOutputArrayDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface DomainOutputDTO
 */
export interface DomainOutputDTO {
  /**
   *
   * @type {string}
   * @memberof DomainOutputDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof DomainOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof DomainOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof DomainOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface DomainOutputDTOAPI
 */
export interface DomainOutputDTOAPI {
  /**
   *
   * @type {DomainOutputDTO}
   * @memberof DomainOutputDTOAPI
   */
  data: DomainOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof DomainOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface DomainSearchInputAllowedFilters
 */
export interface DomainSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof DomainSearchInputAllowedFilters
   */
  name?: string;
}
/**
 *
 * @export
 * @interface DomainSearchInputDTO
 */
export interface DomainSearchInputDTO {
  /**
   *
   * @type {DomainSearchInputAllowedFilters}
   * @memberof DomainSearchInputDTO
   */
  filters?: DomainSearchInputAllowedFilters;
  /**
   *
   * @type {any}
   * @memberof DomainSearchInputDTO
   */
  search?: any;
  /**
   *
   * @type {number}
   * @memberof DomainSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof DomainSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof DomainSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof DomainSearchInputDTO
   */
  sortDirection?: DomainSearchInputDTOSortDirectionEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof DomainSearchInputDTO
   */
  extend?: Array<string>;
}

export const DomainSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type DomainSearchInputDTOSortDirectionEnum =
  typeof DomainSearchInputDTOSortDirectionEnum[keyof typeof DomainSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface DomainUpdateInputDTO
 */
export interface DomainUpdateInputDTO {
  /**
   *
   * @type {string}
   * @memberof DomainUpdateInputDTO
   */
  name: string;
}
/**
 *
 * @export
 * @interface ErrorOutput
 */
export interface ErrorOutput {
  /**
   *
   * @type {string}
   * @memberof ErrorOutput
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof ErrorOutput
   */
  message: string;
  /**
   *
   * @type {string}
   * @memberof ErrorOutput
   */
  details: string;
}
/**
 *
 * @export
 * @interface EventChatMessage
 */
export interface EventChatMessage {
  /**
   *
   * @type {IGamePlayer}
   * @memberof EventChatMessage
   */
  player: IGamePlayer;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof EventChatMessage
   */
  timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {string}
   * @memberof EventChatMessage
   */
  type: EventChatMessageTypeEnum;
  /**
   *
   * @type {string}
   * @memberof EventChatMessage
   */
  msg: string;
}

export const EventChatMessageTypeEnum = {
  Log: 'log',
  PlayerConnected: 'player-connected',
  PlayerDisconnected: 'player-disconnected',
  ChatMessage: 'chat-message',
} as const;

export type EventChatMessageTypeEnum =
  typeof EventChatMessageTypeEnum[keyof typeof EventChatMessageTypeEnum];

/**
 *
 * @export
 * @interface EventPlayerConnected
 */
export interface EventPlayerConnected {
  /**
   *
   * @type {IGamePlayer}
   * @memberof EventPlayerConnected
   */
  player: IGamePlayer;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof EventPlayerConnected
   */
  timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {string}
   * @memberof EventPlayerConnected
   */
  type: EventPlayerConnectedTypeEnum;
  /**
   *
   * @type {string}
   * @memberof EventPlayerConnected
   */
  msg: string;
}

export const EventPlayerConnectedTypeEnum = {
  Log: 'log',
  PlayerConnected: 'player-connected',
  PlayerDisconnected: 'player-disconnected',
  ChatMessage: 'chat-message',
} as const;

export type EventPlayerConnectedTypeEnum =
  typeof EventPlayerConnectedTypeEnum[keyof typeof EventPlayerConnectedTypeEnum];

/**
 *
 * @export
 * @interface EventPlayerDisconnected
 */
export interface EventPlayerDisconnected {
  /**
   *
   * @type {IGamePlayer}
   * @memberof EventPlayerDisconnected
   */
  player: IGamePlayer;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof EventPlayerDisconnected
   */
  timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {string}
   * @memberof EventPlayerDisconnected
   */
  type: EventPlayerDisconnectedTypeEnum;
  /**
   *
   * @type {string}
   * @memberof EventPlayerDisconnected
   */
  msg: string;
}

export const EventPlayerDisconnectedTypeEnum = {
  Log: 'log',
  PlayerConnected: 'player-connected',
  PlayerDisconnected: 'player-disconnected',
  ChatMessage: 'chat-message',
} as const;

export type EventPlayerDisconnectedTypeEnum =
  typeof EventPlayerDisconnectedTypeEnum[keyof typeof EventPlayerDisconnectedTypeEnum];

/**
 *
 * @export
 * @interface FunctionCreateDTO
 */
export interface FunctionCreateDTO {
  /**
   *
   * @type {string}
   * @memberof FunctionCreateDTO
   */
  code: string;
}
/**
 *
 * @export
 * @interface FunctionOutputArrayDTOAPI
 */
export interface FunctionOutputArrayDTOAPI {
  /**
   *
   * @type {Array<FunctionOutputDTO>}
   * @memberof FunctionOutputArrayDTOAPI
   */
  data: Array<FunctionOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof FunctionOutputArrayDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface FunctionOutputDTO
 */
export interface FunctionOutputDTO {
  /**
   *
   * @type {string}
   * @memberof FunctionOutputDTO
   */
  code: string;
  /**
   *
   * @type {string}
   * @memberof FunctionOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof FunctionOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof FunctionOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface FunctionOutputDTOAPI
 */
export interface FunctionOutputDTOAPI {
  /**
   *
   * @type {FunctionOutputDTO}
   * @memberof FunctionOutputDTOAPI
   */
  data: FunctionOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof FunctionOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface FunctionSearchInputAllowedFilters
 */
export interface FunctionSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof FunctionSearchInputAllowedFilters
   */
  id: string;
}
/**
 *
 * @export
 * @interface FunctionSearchInputDTO
 */
export interface FunctionSearchInputDTO {
  /**
   *
   * @type {FunctionSearchInputAllowedFilters}
   * @memberof FunctionSearchInputDTO
   */
  filters?: FunctionSearchInputAllowedFilters;
  /**
   *
   * @type {any}
   * @memberof FunctionSearchInputDTO
   */
  search?: any;
  /**
   *
   * @type {number}
   * @memberof FunctionSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof FunctionSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof FunctionSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof FunctionSearchInputDTO
   */
  sortDirection?: FunctionSearchInputDTOSortDirectionEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof FunctionSearchInputDTO
   */
  extend?: Array<string>;
}

export const FunctionSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type FunctionSearchInputDTOSortDirectionEnum =
  typeof FunctionSearchInputDTOSortDirectionEnum[keyof typeof FunctionSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface FunctionUpdateDTO
 */
export interface FunctionUpdateDTO {
  /**
   *
   * @type {string}
   * @memberof FunctionUpdateDTO
   */
  code: string;
}
/**
 *
 * @export
 * @interface GameServerCreateDTO
 */
export interface GameServerCreateDTO {
  /**
   *
   * @type {string}
   * @memberof GameServerCreateDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof GameServerCreateDTO
   */
  connectionInfo: string;
  /**
   *
   * @type {string}
   * @memberof GameServerCreateDTO
   */
  type: GameServerCreateDTOTypeEnum;
}

export const GameServerCreateDTOTypeEnum = {
  Mock: 'MOCK',
  Sevendaystodie: 'SEVENDAYSTODIE',
  Rust: 'RUST',
} as const;

export type GameServerCreateDTOTypeEnum =
  typeof GameServerCreateDTOTypeEnum[keyof typeof GameServerCreateDTOTypeEnum];

/**
 *
 * @export
 * @interface GameServerOutputArrayDTOAPI
 */
export interface GameServerOutputArrayDTOAPI {
  /**
   *
   * @type {Array<GameServerOutputDTO>}
   * @memberof GameServerOutputArrayDTOAPI
   */
  data: Array<GameServerOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof GameServerOutputArrayDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface GameServerOutputDTO
 */
export interface GameServerOutputDTO {
  /**
   *
   * @type {string}
   * @memberof GameServerOutputDTO
   */
  name: string;
  /**
   *
   * @type {object}
   * @memberof GameServerOutputDTO
   */
  connectionInfo: object;
  /**
   *
   * @type {string}
   * @memberof GameServerOutputDTO
   */
  type: GameServerOutputDTOTypeEnum;
  /**
   *
   * @type {string}
   * @memberof GameServerOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof GameServerOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof GameServerOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}

export const GameServerOutputDTOTypeEnum = {
  Mock: 'MOCK',
  Sevendaystodie: 'SEVENDAYSTODIE',
  Rust: 'RUST',
} as const;

export type GameServerOutputDTOTypeEnum =
  typeof GameServerOutputDTOTypeEnum[keyof typeof GameServerOutputDTOTypeEnum];

/**
 *
 * @export
 * @interface GameServerOutputDTOAPI
 */
export interface GameServerOutputDTOAPI {
  /**
   *
   * @type {GameServerOutputDTO}
   * @memberof GameServerOutputDTOAPI
   */
  data: GameServerOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof GameServerOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface GameServerSearchInputAllowedFilters
 */
export interface GameServerSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof GameServerSearchInputAllowedFilters
   */
  name?: string;
}
/**
 *
 * @export
 * @interface GameServerSearchInputDTO
 */
export interface GameServerSearchInputDTO {
  /**
   *
   * @type {GameServerSearchInputAllowedFilters}
   * @memberof GameServerSearchInputDTO
   */
  filters?: GameServerSearchInputAllowedFilters;
  /**
   *
   * @type {any}
   * @memberof GameServerSearchInputDTO
   */
  search?: any;
  /**
   *
   * @type {number}
   * @memberof GameServerSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof GameServerSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof GameServerSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof GameServerSearchInputDTO
   */
  sortDirection?: GameServerSearchInputDTOSortDirectionEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof GameServerSearchInputDTO
   */
  extend?: Array<string>;
}

export const GameServerSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type GameServerSearchInputDTOSortDirectionEnum =
  typeof GameServerSearchInputDTOSortDirectionEnum[keyof typeof GameServerSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface GameServerTestReachabilityDTOAPI
 */
export interface GameServerTestReachabilityDTOAPI {
  /**
   *
   * @type {TestReachabilityOutput}
   * @memberof GameServerTestReachabilityDTOAPI
   */
  data: TestReachabilityOutput;
  /**
   *
   * @type {MetadataOutput}
   * @memberof GameServerTestReachabilityDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface GameServerTestReachabilityInputDTO
 */
export interface GameServerTestReachabilityInputDTO {
  /**
   *
   * @type {string}
   * @memberof GameServerTestReachabilityInputDTO
   */
  connectionInfo: string;
  /**
   *
   * @type {string}
   * @memberof GameServerTestReachabilityInputDTO
   */
  type: GameServerTestReachabilityInputDTOTypeEnum;
}

export const GameServerTestReachabilityInputDTOTypeEnum = {
  Mock: 'MOCK',
  Sevendaystodie: 'SEVENDAYSTODIE',
  Rust: 'RUST',
} as const;

export type GameServerTestReachabilityInputDTOTypeEnum =
  typeof GameServerTestReachabilityInputDTOTypeEnum[keyof typeof GameServerTestReachabilityInputDTOTypeEnum];

/**
 *
 * @export
 * @interface GameServerTypesOutputDTO
 */
export interface GameServerTypesOutputDTO {
  /**
   *
   * @type {string}
   * @memberof GameServerTypesOutputDTO
   */
  type: GameServerTypesOutputDTOTypeEnum;
  /**
   *
   * @type {string}
   * @memberof GameServerTypesOutputDTO
   */
  connectionInfoSchema: string;
}

export const GameServerTypesOutputDTOTypeEnum = {
  Mock: 'MOCK',
  Sevendaystodie: 'SEVENDAYSTODIE',
  Rust: 'RUST',
} as const;

export type GameServerTypesOutputDTOTypeEnum =
  typeof GameServerTypesOutputDTOTypeEnum[keyof typeof GameServerTypesOutputDTOTypeEnum];

/**
 *
 * @export
 * @interface GameServerTypesOutputDTOAPI
 */
export interface GameServerTypesOutputDTOAPI {
  /**
   *
   * @type {Array<GameServerOutputDTO>}
   * @memberof GameServerTypesOutputDTOAPI
   */
  data: Array<GameServerOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof GameServerTypesOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface GameServerUpdateDTO
 */
export interface GameServerUpdateDTO {
  /**
   *
   * @type {string}
   * @memberof GameServerUpdateDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof GameServerUpdateDTO
   */
  connectionInfo: string;
  /**
   *
   * @type {string}
   * @memberof GameServerUpdateDTO
   */
  type: GameServerUpdateDTOTypeEnum;
}

export const GameServerUpdateDTOTypeEnum = {
  Mock: 'MOCK',
  Sevendaystodie: 'SEVENDAYSTODIE',
  Rust: 'RUST',
} as const;

export type GameServerUpdateDTOTypeEnum =
  typeof GameServerUpdateDTOTypeEnum[keyof typeof GameServerUpdateDTOTypeEnum];

/**
 *
 * @export
 * @interface GetSettingsInput
 */
export interface GetSettingsInput {
  /**
   *
   * @type {Array<string>}
   * @memberof GetSettingsInput
   */
  keys?: Array<GetSettingsInputKeysEnum>;
  /**
   *
   * @type {string}
   * @memberof GetSettingsInput
   */
  gameServerId?: string;
}

export const GetSettingsInputKeysEnum = {
  CommandPrefix: 'commandPrefix',
  ServerChatName: 'serverChatName',
} as const;

export type GetSettingsInputKeysEnum =
  typeof GetSettingsInputKeysEnum[keyof typeof GetSettingsInputKeysEnum];

/**
 *
 * @export
 * @interface GetSettingsOneInput
 */
export interface GetSettingsOneInput {
  /**
   *
   * @type {string}
   * @memberof GetSettingsOneInput
   */
  gameServerId?: string;
}
/**
 *
 * @export
 * @interface GetUserDTO
 */
export interface GetUserDTO {
  /**
   *
   * @type {string}
   * @memberof GetUserDTO
   */
  name: string;
}
/**
 *
 * @export
 * @interface HealthOutputDTO
 */
export interface HealthOutputDTO {
  /**
   *
   * @type {boolean}
   * @memberof HealthOutputDTO
   */
  healthy: boolean;
}
/**
 *
 * @export
 * @interface HookCreateDTO
 */
export interface HookCreateDTO {
  /**
   *
   * @type {string}
   * @memberof HookCreateDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof HookCreateDTO
   */
  regex: string;
  /**
   *
   * @type {string}
   * @memberof HookCreateDTO
   */
  moduleId: string;
  /**
   *
   * @type {string}
   * @memberof HookCreateDTO
   */
  eventType: HookCreateDTOEventTypeEnum;
  /**
   *
   * @type {string}
   * @memberof HookCreateDTO
   */
  function?: string;
}

export const HookCreateDTOEventTypeEnum = {
  Log: 'log',
  PlayerConnected: 'player-connected',
  PlayerDisconnected: 'player-disconnected',
  ChatMessage: 'chat-message',
} as const;

export type HookCreateDTOEventTypeEnum =
  typeof HookCreateDTOEventTypeEnum[keyof typeof HookCreateDTOEventTypeEnum];

/**
 *
 * @export
 * @interface HookOutputArrayDTOAPI
 */
export interface HookOutputArrayDTOAPI {
  /**
   *
   * @type {Array<HookOutputDTO>}
   * @memberof HookOutputArrayDTOAPI
   */
  data: Array<HookOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof HookOutputArrayDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface HookOutputDTO
 */
export interface HookOutputDTO {
  /**
   *
   * @type {string}
   * @memberof HookOutputDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof HookOutputDTO
   */
  regex: string;
  /**
   *
   * @type {FunctionOutputDTO}
   * @memberof HookOutputDTO
   */
  function: FunctionOutputDTO;
  /**
   *
   * @type {string}
   * @memberof HookOutputDTO
   */
  eventType: HookOutputDTOEventTypeEnum;
  /**
   *
   * @type {string}
   * @memberof HookOutputDTO
   */
  moduleId: string;
  /**
   *
   * @type {string}
   * @memberof HookOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof HookOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof HookOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}

export const HookOutputDTOEventTypeEnum = {
  Log: 'log',
  PlayerConnected: 'player-connected',
  PlayerDisconnected: 'player-disconnected',
  ChatMessage: 'chat-message',
} as const;

export type HookOutputDTOEventTypeEnum =
  typeof HookOutputDTOEventTypeEnum[keyof typeof HookOutputDTOEventTypeEnum];

/**
 *
 * @export
 * @interface HookOutputDTOAPI
 */
export interface HookOutputDTOAPI {
  /**
   *
   * @type {HookOutputDTO}
   * @memberof HookOutputDTOAPI
   */
  data: HookOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof HookOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface HookSearchInputAllowedFilters
 */
export interface HookSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof HookSearchInputAllowedFilters
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof HookSearchInputAllowedFilters
   */
  moduleId?: string;
  /**
   *
   * @type {string}
   * @memberof HookSearchInputAllowedFilters
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof HookSearchInputAllowedFilters
   */
  eventType?: HookSearchInputAllowedFiltersEventTypeEnum;
}

export const HookSearchInputAllowedFiltersEventTypeEnum = {
  Log: 'log',
  PlayerConnected: 'player-connected',
  PlayerDisconnected: 'player-disconnected',
  ChatMessage: 'chat-message',
} as const;

export type HookSearchInputAllowedFiltersEventTypeEnum =
  typeof HookSearchInputAllowedFiltersEventTypeEnum[keyof typeof HookSearchInputAllowedFiltersEventTypeEnum];

/**
 *
 * @export
 * @interface HookSearchInputDTO
 */
export interface HookSearchInputDTO {
  /**
   *
   * @type {HookSearchInputAllowedFilters}
   * @memberof HookSearchInputDTO
   */
  filters?: HookSearchInputAllowedFilters;
  /**
   *
   * @type {any}
   * @memberof HookSearchInputDTO
   */
  search?: any;
  /**
   *
   * @type {number}
   * @memberof HookSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof HookSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof HookSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof HookSearchInputDTO
   */
  sortDirection?: HookSearchInputDTOSortDirectionEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof HookSearchInputDTO
   */
  extend?: Array<string>;
}

export const HookSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type HookSearchInputDTOSortDirectionEnum =
  typeof HookSearchInputDTOSortDirectionEnum[keyof typeof HookSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface HookTriggerDTO
 */
export interface HookTriggerDTO {
  /**
   *
   * @type {string}
   * @memberof HookTriggerDTO
   */
  gameServerId: string;
  /**
   *
   * @type {string}
   * @memberof HookTriggerDTO
   */
  eventType: HookTriggerDTOEventTypeEnum;
  /**
   *
   * @type {IPlayerReferenceDTO}
   * @memberof HookTriggerDTO
   */
  player?: IPlayerReferenceDTO;
  /**
   *
   * @type {string}
   * @memberof HookTriggerDTO
   */
  msg?: string;
}

export const HookTriggerDTOEventTypeEnum = {
  Log: 'log',
  PlayerConnected: 'player-connected',
  PlayerDisconnected: 'player-disconnected',
  ChatMessage: 'chat-message',
} as const;

export type HookTriggerDTOEventTypeEnum =
  typeof HookTriggerDTOEventTypeEnum[keyof typeof HookTriggerDTOEventTypeEnum];

/**
 *
 * @export
 * @interface HookUpdateDTO
 */
export interface HookUpdateDTO {
  /**
   *
   * @type {string}
   * @memberof HookUpdateDTO
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof HookUpdateDTO
   */
  regex?: string;
  /**
   *
   * @type {string}
   * @memberof HookUpdateDTO
   */
  eventType?: HookUpdateDTOEventTypeEnum;
  /**
   *
   * @type {string}
   * @memberof HookUpdateDTO
   */
  function?: string;
}

export const HookUpdateDTOEventTypeEnum = {
  Log: 'log',
  PlayerConnected: 'player-connected',
  PlayerDisconnected: 'player-disconnected',
  ChatMessage: 'chat-message',
} as const;

export type HookUpdateDTOEventTypeEnum =
  typeof HookUpdateDTOEventTypeEnum[keyof typeof HookUpdateDTOEventTypeEnum];

/**
 *
 * @export
 * @interface IGamePlayer
 */
export interface IGamePlayer {
  /**
   *
   * @type {string}
   * @memberof IGamePlayer
   */
  gameId: string;
  /**
   *
   * @type {string}
   * @memberof IGamePlayer
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof IGamePlayer
   */
  steamId?: string;
  /**
   *
   * @type {string}
   * @memberof IGamePlayer
   */
  epicOnlineServicesId?: string;
  /**
   *
   * @type {string}
   * @memberof IGamePlayer
   */
  xboxLiveId?: string;
  /**
   *
   * @type {string}
   * @memberof IGamePlayer
   */
  platformId?: string;
  /**
   *
   * @type {string}
   * @memberof IGamePlayer
   */
  device?: string;
  /**
   *
   * @type {string}
   * @memberof IGamePlayer
   */
  ip?: string;
}
/**
 *
 * @export
 * @interface IMessageOptsDTO
 */
export interface IMessageOptsDTO {
  /**
   *
   * @type {IPlayerReferenceDTO}
   * @memberof IMessageOptsDTO
   */
  recipient: IPlayerReferenceDTO;
}
/**
 *
 * @export
 * @interface IPlayerReferenceDTO
 */
export interface IPlayerReferenceDTO {
  /**
   *
   * @type {string}
   * @memberof IPlayerReferenceDTO
   */
  gameId: string;
}
/**
 *
 * @export
 * @interface ITakaroQuery
 */
export interface ITakaroQuery {
  /**
   *
   * @type {any}
   * @memberof ITakaroQuery
   */
  filters?: any;
  /**
   *
   * @type {any}
   * @memberof ITakaroQuery
   */
  search?: any;
  /**
   *
   * @type {number}
   * @memberof ITakaroQuery
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof ITakaroQuery
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof ITakaroQuery
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof ITakaroQuery
   */
  sortDirection?: ITakaroQuerySortDirectionEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof ITakaroQuery
   */
  extend?: Array<string>;
}

export const ITakaroQuerySortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type ITakaroQuerySortDirectionEnum =
  typeof ITakaroQuerySortDirectionEnum[keyof typeof ITakaroQuerySortDirectionEnum];

/**
 *
 * @export
 * @interface IdUuidDTO
 */
export interface IdUuidDTO {
  /**
   *
   * @type {string}
   * @memberof IdUuidDTO
   */
  id: string;
}
/**
 *
 * @export
 * @interface IdUuidDTOAPI
 */
export interface IdUuidDTOAPI {
  /**
   *
   * @type {IdUuidDTO}
   * @memberof IdUuidDTOAPI
   */
  data: IdUuidDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof IdUuidDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface LoginDTO
 */
export interface LoginDTO {
  /**
   *
   * @type {string}
   * @memberof LoginDTO
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof LoginDTO
   */
  password: string;
}
/**
 *
 * @export
 * @interface LoginOutputDTO
 */
export interface LoginOutputDTO {
  /**
   *
   * @type {string}
   * @memberof LoginOutputDTO
   */
  token: string;
}
/**
 *
 * @export
 * @interface LoginOutputDTOAPI
 */
export interface LoginOutputDTOAPI {
  /**
   *
   * @type {LoginOutputDTO}
   * @memberof LoginOutputDTOAPI
   */
  data: LoginOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof LoginOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface MessageSendInputDTO
 */
export interface MessageSendInputDTO {
  /**
   *
   * @type {string}
   * @memberof MessageSendInputDTO
   */
  message: string;
  /**
   *
   * @type {IMessageOptsDTO}
   * @memberof MessageSendInputDTO
   */
  opts?: IMessageOptsDTO;
}
/**
 *
 * @export
 * @interface MetadataOutput
 */
export interface MetadataOutput {
  /**
   *
   * @type {MetadataOutputServerTime}
   * @memberof MetadataOutput
   */
  serverTime: MetadataOutputServerTime;
  /**
   *
   * @type {ErrorOutput}
   * @memberof MetadataOutput
   */
  error: ErrorOutput;
  /**
   *
   * @type {number}
   * @memberof MetadataOutput
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof MetadataOutput
   */
  limit?: number;
  /**
   *
   * @type {number}
   * @memberof MetadataOutput
   */
  total?: number;
}
/**
 * @type MetadataOutputServerTime
 * @export
 */
export type MetadataOutputServerTime = string;

/**
 *
 * @export
 * @interface MockConnectionInfo
 */
export interface MockConnectionInfo {
  /**
   *
   * @type {string}
   * @memberof MockConnectionInfo
   */
  host: string;
}
/**
 *
 * @export
 * @interface ModuleCreateDTO
 */
export interface ModuleCreateDTO {
  /**
   *
   * @type {string}
   * @memberof ModuleCreateDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ModuleCreateDTO
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ModuleCreateDTO
   */
  configSchema?: string;
}
/**
 *
 * @export
 * @interface ModuleCreateInternalDTO
 */
export interface ModuleCreateInternalDTO {
  /**
   *
   * @type {string}
   * @memberof ModuleCreateInternalDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ModuleCreateInternalDTO
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ModuleCreateInternalDTO
   */
  configSchema?: string;
  /**
   *
   * @type {string}
   * @memberof ModuleCreateInternalDTO
   */
  builtin?: string;
}
/**
 *
 * @export
 * @interface ModuleInstallDTO
 */
export interface ModuleInstallDTO {
  /**
   *
   * @type {string}
   * @memberof ModuleInstallDTO
   */
  userConfig?: string;
  /**
   *
   * @type {string}
   * @memberof ModuleInstallDTO
   */
  systemConfig?: string;
}
/**
 *
 * @export
 * @interface ModuleInstallationOutputArrayDTOAPI
 */
export interface ModuleInstallationOutputArrayDTOAPI {
  /**
   *
   * @type {Array<ModuleInstallationOutputDTO>}
   * @memberof ModuleInstallationOutputArrayDTOAPI
   */
  data: Array<ModuleInstallationOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof ModuleInstallationOutputArrayDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface ModuleInstallationOutputDTO
 */
export interface ModuleInstallationOutputDTO {
  /**
   *
   * @type {string}
   * @memberof ModuleInstallationOutputDTO
   */
  gameserverId: string;
  /**
   *
   * @type {string}
   * @memberof ModuleInstallationOutputDTO
   */
  moduleId: string;
  /**
   *
   * @type {object}
   * @memberof ModuleInstallationOutputDTO
   */
  userConfig: object;
  /**
   *
   * @type {ModuleInstallationOutputDTOSystemConfig}
   * @memberof ModuleInstallationOutputDTO
   */
  systemConfig: ModuleInstallationOutputDTOSystemConfig;
  /**
   *
   * @type {string}
   * @memberof ModuleInstallationOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof ModuleInstallationOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof ModuleInstallationOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface ModuleInstallationOutputDTOAPI
 */
export interface ModuleInstallationOutputDTOAPI {
  /**
   *
   * @type {ModuleInstallationOutputDTO}
   * @memberof ModuleInstallationOutputDTOAPI
   */
  data: ModuleInstallationOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof ModuleInstallationOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface ModuleInstallationOutputDTOSystemConfig
 */
export interface ModuleInstallationOutputDTOSystemConfig {
  /**
   *
   * @type {object}
   * @memberof ModuleInstallationOutputDTOSystemConfig
   */
  cronJobs?: object;
}
/**
 *
 * @export
 * @interface ModuleOutputArrayDTOAPI
 */
export interface ModuleOutputArrayDTOAPI {
  /**
   *
   * @type {Array<ModuleOutputDTO>}
   * @memberof ModuleOutputArrayDTOAPI
   */
  data: Array<ModuleOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof ModuleOutputArrayDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface ModuleOutputDTO
 */
export interface ModuleOutputDTO {
  /**
   *
   * @type {string}
   * @memberof ModuleOutputDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ModuleOutputDTO
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ModuleOutputDTO
   */
  configSchema: string;
  /**
   *
   * @type {string}
   * @memberof ModuleOutputDTO
   */
  systemConfigSchema: string;
  /**
   *
   * @type {string}
   * @memberof ModuleOutputDTO
   */
  builtin?: string;
  /**
   *
   * @type {Array<CronJobOutputDTO>}
   * @memberof ModuleOutputDTO
   */
  cronJobs: Array<CronJobOutputDTO>;
  /**
   *
   * @type {Array<HookOutputDTO>}
   * @memberof ModuleOutputDTO
   */
  hooks: Array<HookOutputDTO>;
  /**
   *
   * @type {Array<CommandOutputDTO>}
   * @memberof ModuleOutputDTO
   */
  commands: Array<CommandOutputDTO>;
  /**
   *
   * @type {string}
   * @memberof ModuleOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof ModuleOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof ModuleOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface ModuleOutputDTOAPI
 */
export interface ModuleOutputDTOAPI {
  /**
   *
   * @type {ModuleOutputDTO}
   * @memberof ModuleOutputDTOAPI
   */
  data: ModuleOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof ModuleOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface ModuleSearchInputAllowedFilters
 */
export interface ModuleSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof ModuleSearchInputAllowedFilters
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ModuleSearchInputAllowedFilters
   */
  name?: string;
}
/**
 *
 * @export
 * @interface ModuleSearchInputDTO
 */
export interface ModuleSearchInputDTO {
  /**
   *
   * @type {ModuleSearchInputAllowedFilters}
   * @memberof ModuleSearchInputDTO
   */
  filters?: ModuleSearchInputAllowedFilters;
  /**
   *
   * @type {any}
   * @memberof ModuleSearchInputDTO
   */
  search?: any;
  /**
   *
   * @type {number}
   * @memberof ModuleSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof ModuleSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof ModuleSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof ModuleSearchInputDTO
   */
  sortDirection?: ModuleSearchInputDTOSortDirectionEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof ModuleSearchInputDTO
   */
  extend?: Array<string>;
}

export const ModuleSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type ModuleSearchInputDTOSortDirectionEnum =
  typeof ModuleSearchInputDTOSortDirectionEnum[keyof typeof ModuleSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface ModuleUpdateDTO
 */
export interface ModuleUpdateDTO {
  /**
   *
   * @type {string}
   * @memberof ModuleUpdateDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ModuleUpdateDTO
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ModuleUpdateDTO
   */
  configSchema?: string;
}
/**
 *
 * @export
 * @interface NOTDOMAINSCOPEDTakaroModelDTO
 */
export interface NOTDOMAINSCOPEDTakaroModelDTO {
  /**
   *
   * @type {string}
   * @memberof NOTDOMAINSCOPEDTakaroModelDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof NOTDOMAINSCOPEDTakaroModelDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof NOTDOMAINSCOPEDTakaroModelDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 * @type NOTDOMAINSCOPEDTakaroModelDTOCreatedAt
 * @export
 */
export type NOTDOMAINSCOPEDTakaroModelDTOCreatedAt = string;

/**
 *
 * @export
 * @interface ParamId
 */
export interface ParamId {
  /**
   *
   * @type {string}
   * @memberof ParamId
   */
  id: string;
}
/**
 *
 * @export
 * @interface ParamIdAndModuleId
 */
export interface ParamIdAndModuleId {
  /**
   *
   * @type {string}
   * @memberof ParamIdAndModuleId
   */
  gameserverId: string;
  /**
   *
   * @type {string}
   * @memberof ParamIdAndModuleId
   */
  moduleId: string;
}
/**
 *
 * @export
 * @interface ParamIdAndPlayerId
 */
export interface ParamIdAndPlayerId {
  /**
   *
   * @type {string}
   * @memberof ParamIdAndPlayerId
   */
  gameserverId: string;
  /**
   *
   * @type {string}
   * @memberof ParamIdAndPlayerId
   */
  playerId: string;
}
/**
 *
 * @export
 * @interface ParamIdAndRoleId
 */
export interface ParamIdAndRoleId {
  /**
   *
   * @type {string}
   * @memberof ParamIdAndRoleId
   */
  roleId: string;
  /**
   *
   * @type {string}
   * @memberof ParamIdAndRoleId
   */
  id: string;
}
/**
 *
 * @export
 * @interface ParamKey
 */
export interface ParamKey {
  /**
   *
   * @type {Array<string>}
   * @memberof ParamKey
   */
  key: Array<ParamKeyKeyEnum>;
}

export const ParamKeyKeyEnum = {
  CommandPrefix: 'commandPrefix',
  ServerChatName: 'serverChatName',
} as const;

export type ParamKeyKeyEnum =
  typeof ParamKeyKeyEnum[keyof typeof ParamKeyKeyEnum];

/**
 *
 * @export
 * @interface PermissionOutputDTO
 */
export interface PermissionOutputDTO {
  /**
   *
   * @type {string}
   * @memberof PermissionOutputDTO
   */
  permission: PermissionOutputDTOPermissionEnum;
  /**
   *
   * @type {string}
   * @memberof PermissionOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof PermissionOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof PermissionOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}

export const PermissionOutputDTOPermissionEnum = {
  Root: 'ROOT',
  ManageUsers: 'MANAGE_USERS',
  ReadUsers: 'READ_USERS',
  ManageRoles: 'MANAGE_ROLES',
  ReadRoles: 'READ_ROLES',
  ManageGameservers: 'MANAGE_GAMESERVERS',
  ReadGameservers: 'READ_GAMESERVERS',
  ReadFunctions: 'READ_FUNCTIONS',
  ManageFunctions: 'MANAGE_FUNCTIONS',
  ReadCronjobs: 'READ_CRONJOBS',
  ManageCronjobs: 'MANAGE_CRONJOBS',
  ReadHooks: 'READ_HOOKS',
  ManageHooks: 'MANAGE_HOOKS',
  ReadCommands: 'READ_COMMANDS',
  ManageCommands: 'MANAGE_COMMANDS',
  ReadModules: 'READ_MODULES',
  ManageModules: 'MANAGE_MODULES',
  ReadPlayers: 'READ_PLAYERS',
  ManagePlayers: 'MANAGE_PLAYERS',
  ManageSettings: 'MANAGE_SETTINGS',
  ReadSettings: 'READ_SETTINGS',
  ReadVariables: 'READ_VARIABLES',
  ManageVariables: 'MANAGE_VARIABLES',
} as const;

export type PermissionOutputDTOPermissionEnum =
  typeof PermissionOutputDTOPermissionEnum[keyof typeof PermissionOutputDTOPermissionEnum];

/**
 *
 * @export
 * @interface PlayerCreateDTO
 */
export interface PlayerCreateDTO {
  /**
   *
   * @type {string}
   * @memberof PlayerCreateDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof PlayerCreateDTO
   */
  steamId?: string;
  /**
   *
   * @type {string}
   * @memberof PlayerCreateDTO
   */
  xboxLiveId?: string;
  /**
   *
   * @type {string}
   * @memberof PlayerCreateDTO
   */
  epicOnlineServicesId?: string;
}
/**
 *
 * @export
 * @interface PlayerOutputArrayDTOAPI
 */
export interface PlayerOutputArrayDTOAPI {
  /**
   *
   * @type {Array<PlayerOutputDTO>}
   * @memberof PlayerOutputArrayDTOAPI
   */
  data: Array<PlayerOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof PlayerOutputArrayDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface PlayerOutputDTO
 */
export interface PlayerOutputDTO {
  /**
   *
   * @type {string}
   * @memberof PlayerOutputDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof PlayerOutputDTO
   */
  steamId?: string;
  /**
   *
   * @type {string}
   * @memberof PlayerOutputDTO
   */
  xboxLiveId?: string;
  /**
   *
   * @type {string}
   * @memberof PlayerOutputDTO
   */
  epicOnlineServicesId?: string;
  /**
   *
   * @type {string}
   * @memberof PlayerOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof PlayerOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof PlayerOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface PlayerOutputDTOAPI
 */
export interface PlayerOutputDTOAPI {
  /**
   *
   * @type {PlayerOutputDTO}
   * @memberof PlayerOutputDTOAPI
   */
  data: PlayerOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof PlayerOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface PlayerSearchInputAllowedFilters
 */
export interface PlayerSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof PlayerSearchInputAllowedFilters
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof PlayerSearchInputAllowedFilters
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PlayerSearchInputAllowedFilters
   */
  steamId?: string;
  /**
   *
   * @type {string}
   * @memberof PlayerSearchInputAllowedFilters
   */
  epicOnlineServicesId?: string;
  /**
   *
   * @type {string}
   * @memberof PlayerSearchInputAllowedFilters
   */
  xboxLiveId?: string;
}
/**
 *
 * @export
 * @interface PlayerSearchInputDTO
 */
export interface PlayerSearchInputDTO {
  /**
   *
   * @type {PlayerSearchInputAllowedFilters}
   * @memberof PlayerSearchInputDTO
   */
  filters?: PlayerSearchInputAllowedFilters;
  /**
   *
   * @type {any}
   * @memberof PlayerSearchInputDTO
   */
  search?: any;
  /**
   *
   * @type {number}
   * @memberof PlayerSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof PlayerSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof PlayerSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof PlayerSearchInputDTO
   */
  sortDirection?: PlayerSearchInputDTOSortDirectionEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof PlayerSearchInputDTO
   */
  extend?: Array<string>;
}

export const PlayerSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type PlayerSearchInputDTOSortDirectionEnum =
  typeof PlayerSearchInputDTOSortDirectionEnum[keyof typeof PlayerSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface PlayerUpdateDTO
 */
export interface PlayerUpdateDTO {
  /**
   *
   * @type {string}
   * @memberof PlayerUpdateDTO
   */
  name: string;
}
/**
 *
 * @export
 * @interface RoleCreateInputDTO
 */
export interface RoleCreateInputDTO {
  /**
   *
   * @type {string}
   * @memberof RoleCreateInputDTO
   */
  name: string;
  /**
   *
   * @type {Array<string>}
   * @memberof RoleCreateInputDTO
   */
  permissions: Array<RoleCreateInputDTOPermissionsEnum>;
}

export const RoleCreateInputDTOPermissionsEnum = {
  Root: 'ROOT',
  ManageUsers: 'MANAGE_USERS',
  ReadUsers: 'READ_USERS',
  ManageRoles: 'MANAGE_ROLES',
  ReadRoles: 'READ_ROLES',
  ManageGameservers: 'MANAGE_GAMESERVERS',
  ReadGameservers: 'READ_GAMESERVERS',
  ReadFunctions: 'READ_FUNCTIONS',
  ManageFunctions: 'MANAGE_FUNCTIONS',
  ReadCronjobs: 'READ_CRONJOBS',
  ManageCronjobs: 'MANAGE_CRONJOBS',
  ReadHooks: 'READ_HOOKS',
  ManageHooks: 'MANAGE_HOOKS',
  ReadCommands: 'READ_COMMANDS',
  ManageCommands: 'MANAGE_COMMANDS',
  ReadModules: 'READ_MODULES',
  ManageModules: 'MANAGE_MODULES',
  ReadPlayers: 'READ_PLAYERS',
  ManagePlayers: 'MANAGE_PLAYERS',
  ManageSettings: 'MANAGE_SETTINGS',
  ReadSettings: 'READ_SETTINGS',
  ReadVariables: 'READ_VARIABLES',
  ManageVariables: 'MANAGE_VARIABLES',
} as const;

export type RoleCreateInputDTOPermissionsEnum =
  typeof RoleCreateInputDTOPermissionsEnum[keyof typeof RoleCreateInputDTOPermissionsEnum];

/**
 *
 * @export
 * @interface RoleOutputArrayDTOAPI
 */
export interface RoleOutputArrayDTOAPI {
  /**
   *
   * @type {Array<RoleOutputDTO>}
   * @memberof RoleOutputArrayDTOAPI
   */
  data: Array<RoleOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof RoleOutputArrayDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface RoleOutputDTO
 */
export interface RoleOutputDTO {
  /**
   *
   * @type {string}
   * @memberof RoleOutputDTO
   */
  name: string;
  /**
   *
   * @type {Array<any>}
   * @memberof RoleOutputDTO
   */
  permissions: Array<any>;
  /**
   *
   * @type {string}
   * @memberof RoleOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof RoleOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof RoleOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface RoleOutputDTOAPI
 */
export interface RoleOutputDTOAPI {
  /**
   *
   * @type {RoleOutputDTO}
   * @memberof RoleOutputDTOAPI
   */
  data: RoleOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof RoleOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface RoleSearchInputAllowedFilters
 */
export interface RoleSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof RoleSearchInputAllowedFilters
   */
  name?: string;
}
/**
 *
 * @export
 * @interface RoleSearchInputDTO
 */
export interface RoleSearchInputDTO {
  /**
   *
   * @type {RoleSearchInputAllowedFilters}
   * @memberof RoleSearchInputDTO
   */
  filters?: RoleSearchInputAllowedFilters;
  /**
   *
   * @type {any}
   * @memberof RoleSearchInputDTO
   */
  search?: any;
  /**
   *
   * @type {number}
   * @memberof RoleSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof RoleSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof RoleSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof RoleSearchInputDTO
   */
  sortDirection?: RoleSearchInputDTOSortDirectionEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof RoleSearchInputDTO
   */
  extend?: Array<string>;
}

export const RoleSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type RoleSearchInputDTOSortDirectionEnum =
  typeof RoleSearchInputDTOSortDirectionEnum[keyof typeof RoleSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface RoleUpdateInputDTO
 */
export interface RoleUpdateInputDTO {
  /**
   *
   * @type {string}
   * @memberof RoleUpdateInputDTO
   */
  name: string;
  /**
   *
   * @type {Array<string>}
   * @memberof RoleUpdateInputDTO
   */
  permissions: Array<RoleUpdateInputDTOPermissionsEnum>;
}

export const RoleUpdateInputDTOPermissionsEnum = {
  Root: 'ROOT',
  ManageUsers: 'MANAGE_USERS',
  ReadUsers: 'READ_USERS',
  ManageRoles: 'MANAGE_ROLES',
  ReadRoles: 'READ_ROLES',
  ManageGameservers: 'MANAGE_GAMESERVERS',
  ReadGameservers: 'READ_GAMESERVERS',
  ReadFunctions: 'READ_FUNCTIONS',
  ManageFunctions: 'MANAGE_FUNCTIONS',
  ReadCronjobs: 'READ_CRONJOBS',
  ManageCronjobs: 'MANAGE_CRONJOBS',
  ReadHooks: 'READ_HOOKS',
  ManageHooks: 'MANAGE_HOOKS',
  ReadCommands: 'READ_COMMANDS',
  ManageCommands: 'MANAGE_COMMANDS',
  ReadModules: 'READ_MODULES',
  ManageModules: 'MANAGE_MODULES',
  ReadPlayers: 'READ_PLAYERS',
  ManagePlayers: 'MANAGE_PLAYERS',
  ManageSettings: 'MANAGE_SETTINGS',
  ReadSettings: 'READ_SETTINGS',
  ReadVariables: 'READ_VARIABLES',
  ManageVariables: 'MANAGE_VARIABLES',
} as const;

export type RoleUpdateInputDTOPermissionsEnum =
  typeof RoleUpdateInputDTOPermissionsEnum[keyof typeof RoleUpdateInputDTOPermissionsEnum];

/**
 *
 * @export
 * @interface RustConfig
 */
export interface RustConfig {
  /**
   *
   * @type {string}
   * @memberof RustConfig
   */
  hostname: string;
  /**
   *
   * @type {string}
   * @memberof RustConfig
   */
  port: string;
  /**
   *
   * @type {string}
   * @memberof RustConfig
   */
  password: string;
}
/**
 *
 * @export
 * @interface RustConnectionInfo
 */
export interface RustConnectionInfo {
  /**
   *
   * @type {string}
   * @memberof RustConnectionInfo
   */
  host: string;
  /**
   *
   * @type {number}
   * @memberof RustConnectionInfo
   */
  rconPort: number;
  /**
   *
   * @type {string}
   * @memberof RustConnectionInfo
   */
  rconPassword: string;
}
/**
 *
 * @export
 * @interface SdtdConnectionInfo
 */
export interface SdtdConnectionInfo {
  /**
   *
   * @type {string}
   * @memberof SdtdConnectionInfo
   */
  host: string;
  /**
   *
   * @type {string}
   * @memberof SdtdConnectionInfo
   */
  adminUser: string;
  /**
   *
   * @type {string}
   * @memberof SdtdConnectionInfo
   */
  adminToken: string;
  /**
   *
   * @type {boolean}
   * @memberof SdtdConnectionInfo
   */
  useTls: boolean;
}
/**
 *
 * @export
 * @interface SearchRoleInputDTO
 */
export interface SearchRoleInputDTO {
  /**
   *
   * @type {string}
   * @memberof SearchRoleInputDTO
   */
  name: string;
}
/**
 *
 * @export
 * @interface Settings
 */
export interface Settings {
  /**
   *
   * @type {string}
   * @memberof Settings
   */
  commandPrefix: string;
  /**
   *
   * @type {string}
   * @memberof Settings
   */
  serverChatName: string;
  /**
   *
   * @type {string}
   * @memberof Settings
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof Settings
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof Settings
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface SettingsOutputDTOAPI
 */
export interface SettingsOutputDTOAPI {
  /**
   *
   * @type {string}
   * @memberof SettingsOutputDTOAPI
   */
  data: string;
  /**
   *
   * @type {MetadataOutput}
   * @memberof SettingsOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface SettingsOutputObjectDTOAPI
 */
export interface SettingsOutputObjectDTOAPI {
  /**
   *
   * @type {Settings}
   * @memberof SettingsOutputObjectDTOAPI
   */
  data: Settings;
  /**
   *
   * @type {MetadataOutput}
   * @memberof SettingsOutputObjectDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface SettingsSetDTO
 */
export interface SettingsSetDTO {
  /**
   *
   * @type {string}
   * @memberof SettingsSetDTO
   */
  gameServerId?: string;
  /**
   *
   * @type {string}
   * @memberof SettingsSetDTO
   */
  value: string;
}
/**
 *
 * @export
 * @interface TakaroModelDTO
 */
export interface TakaroModelDTO {
  /**
   *
   * @type {string}
   * @memberof TakaroModelDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof TakaroModelDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof TakaroModelDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface TakaroTokenDTO
 */
export interface TakaroTokenDTO {
  /**
   *
   * @type {boolean}
   * @memberof TakaroTokenDTO
   */
  active: boolean;
  /**
   *
   * @type {string}
   * @memberof TakaroTokenDTO
   */
  clientId: string;
  /**
   *
   * @type {number}
   * @memberof TakaroTokenDTO
   */
  exp: number;
  /**
   *
   * @type {number}
   * @memberof TakaroTokenDTO
   */
  iat: number;
  /**
   *
   * @type {string}
   * @memberof TakaroTokenDTO
   */
  iss: string;
  /**
   *
   * @type {string}
   * @memberof TakaroTokenDTO
   */
  sub: string;
  /**
   *
   * @type {Array<string>}
   * @memberof TakaroTokenDTO
   */
  aud: Array<string>;
}
/**
 *
 * @export
 * @interface TeleportPlayerInputDTO
 */
export interface TeleportPlayerInputDTO {
  /**
   *
   * @type {number}
   * @memberof TeleportPlayerInputDTO
   */
  x: number;
  /**
   *
   * @type {number}
   * @memberof TeleportPlayerInputDTO
   */
  y: number;
  /**
   *
   * @type {number}
   * @memberof TeleportPlayerInputDTO
   */
  z: number;
}
/**
 *
 * @export
 * @interface TestReachabilityOutput
 */
export interface TestReachabilityOutput {
  /**
   *
   * @type {boolean}
   * @memberof TestReachabilityOutput
   */
  connectable: boolean;
  /**
   *
   * @type {string}
   * @memberof TestReachabilityOutput
   */
  reason?: string;
}
/**
 *
 * @export
 * @interface TokenInputDTO
 */
export interface TokenInputDTO {
  /**
   *
   * @type {string}
   * @memberof TokenInputDTO
   */
  domainId: string;
}
/**
 *
 * @export
 * @interface TokenOutputDTO
 */
export interface TokenOutputDTO {
  /**
   *
   * @type {string}
   * @memberof TokenOutputDTO
   */
  token: string;
}
/**
 *
 * @export
 * @interface TokenOutputDTOAPI
 */
export interface TokenOutputDTOAPI {
  /**
   *
   * @type {TokenOutputDTO}
   * @memberof TokenOutputDTOAPI
   */
  data: TokenOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof TokenOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface UserCreateInputDTO
 */
export interface UserCreateInputDTO {
  /**
   *
   * @type {string}
   * @memberof UserCreateInputDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserCreateInputDTO
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserCreateInputDTO
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof UserCreateInputDTO
   */
  idpId?: string;
}
/**
 *
 * @export
 * @interface UserOutputArrayDTOAPI
 */
export interface UserOutputArrayDTOAPI {
  /**
   *
   * @type {Array<UserOutputDTO>}
   * @memberof UserOutputArrayDTOAPI
   */
  data: Array<UserOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof UserOutputArrayDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface UserOutputDTO
 */
export interface UserOutputDTO {
  /**
   *
   * @type {string}
   * @memberof UserOutputDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserOutputDTO
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserOutputDTO
   */
  idpId: string;
  /**
   *
   * @type {string}
   * @memberof UserOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof UserOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof UserOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface UserOutputDTOAPI
 */
export interface UserOutputDTOAPI {
  /**
   *
   * @type {UserOutputDTO}
   * @memberof UserOutputDTOAPI
   */
  data: UserOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof UserOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface UserOutputWithRolesDTO
 */
export interface UserOutputWithRolesDTO {
  /**
   *
   * @type {RoleOutputDTO}
   * @memberof UserOutputWithRolesDTO
   */
  roles: RoleOutputDTO;
  /**
   *
   * @type {string}
   * @memberof UserOutputWithRolesDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof UserOutputWithRolesDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof UserOutputWithRolesDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {string}
   * @memberof UserOutputWithRolesDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserOutputWithRolesDTO
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserOutputWithRolesDTO
   */
  idpId: string;
}
/**
 *
 * @export
 * @interface UserSearchInputAllowedFilters
 */
export interface UserSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof UserSearchInputAllowedFilters
   */
  name?: string;
}
/**
 *
 * @export
 * @interface UserSearchInputDTO
 */
export interface UserSearchInputDTO {
  /**
   *
   * @type {UserSearchInputAllowedFilters}
   * @memberof UserSearchInputDTO
   */
  filters?: UserSearchInputAllowedFilters;
  /**
   *
   * @type {any}
   * @memberof UserSearchInputDTO
   */
  search?: any;
  /**
   *
   * @type {number}
   * @memberof UserSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof UserSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof UserSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof UserSearchInputDTO
   */
  sortDirection?: UserSearchInputDTOSortDirectionEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof UserSearchInputDTO
   */
  extend?: Array<string>;
}

export const UserSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type UserSearchInputDTOSortDirectionEnum =
  typeof UserSearchInputDTOSortDirectionEnum[keyof typeof UserSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface UserUpdateDTO
 */
export interface UserUpdateDTO {
  /**
   *
   * @type {string}
   * @memberof UserUpdateDTO
   */
  name: string;
}
/**
 *
 * @export
 * @interface VariableCreateDTO
 */
export interface VariableCreateDTO {
  /**
   *
   * @type {string}
   * @memberof VariableCreateDTO
   */
  key: string;
  /**
   *
   * @type {string}
   * @memberof VariableCreateDTO
   */
  value: string;
  /**
   *
   * @type {string}
   * @memberof VariableCreateDTO
   */
  gameServerId?: string;
  /**
   *
   * @type {string}
   * @memberof VariableCreateDTO
   */
  playerId?: string;
}
/**
 *
 * @export
 * @interface VariableOutputArrayDTOAPI
 */
export interface VariableOutputArrayDTOAPI {
  /**
   *
   * @type {Array<VariableOutputDTO>}
   * @memberof VariableOutputArrayDTOAPI
   */
  data: Array<VariableOutputDTO>;
  /**
   *
   * @type {MetadataOutput}
   * @memberof VariableOutputArrayDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface VariableOutputDTO
 */
export interface VariableOutputDTO {
  /**
   *
   * @type {string}
   * @memberof VariableOutputDTO
   */
  key: string;
  /**
   *
   * @type {string}
   * @memberof VariableOutputDTO
   */
  value: string;
  /**
   *
   * @type {string}
   * @memberof VariableOutputDTO
   */
  gameServerId?: string;
  /**
   *
   * @type {string}
   * @memberof VariableOutputDTO
   */
  playerId?: string;
  /**
   *
   * @type {string}
   * @memberof VariableOutputDTO
   */
  id: string;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof VariableOutputDTO
   */
  createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
  /**
   *
   * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}
   * @memberof VariableOutputDTO
   */
  updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;
}
/**
 *
 * @export
 * @interface VariableOutputDTOAPI
 */
export interface VariableOutputDTOAPI {
  /**
   *
   * @type {VariableOutputDTO}
   * @memberof VariableOutputDTOAPI
   */
  data: VariableOutputDTO;
  /**
   *
   * @type {MetadataOutput}
   * @memberof VariableOutputDTOAPI
   */
  meta: MetadataOutput;
}
/**
 *
 * @export
 * @interface VariableSearchInputAllowedFilters
 */
export interface VariableSearchInputAllowedFilters {
  /**
   *
   * @type {string}
   * @memberof VariableSearchInputAllowedFilters
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof VariableSearchInputAllowedFilters
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof VariableSearchInputAllowedFilters
   */
  gameServerId?: string;
  /**
   *
   * @type {string}
   * @memberof VariableSearchInputAllowedFilters
   */
  playerId?: string;
}
/**
 *
 * @export
 * @interface VariableSearchInputDTO
 */
export interface VariableSearchInputDTO {
  /**
   *
   * @type {VariableSearchInputAllowedFilters}
   * @memberof VariableSearchInputDTO
   */
  filters?: VariableSearchInputAllowedFilters;
  /**
   *
   * @type {VariableSearchInputAllowedFilters}
   * @memberof VariableSearchInputDTO
   */
  search?: VariableSearchInputAllowedFilters;
  /**
   *
   * @type {number}
   * @memberof VariableSearchInputDTO
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof VariableSearchInputDTO
   */
  limit?: number;
  /**
   *
   * @type {string}
   * @memberof VariableSearchInputDTO
   */
  sortBy?: string;
  /**
   *
   * @type {string}
   * @memberof VariableSearchInputDTO
   */
  sortDirection?: VariableSearchInputDTOSortDirectionEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof VariableSearchInputDTO
   */
  extend?: Array<string>;
}

export const VariableSearchInputDTOSortDirectionEnum = {
  Asc: 'asc',
  Desc: 'desc',
} as const;

export type VariableSearchInputDTOSortDirectionEnum =
  typeof VariableSearchInputDTOSortDirectionEnum[keyof typeof VariableSearchInputDTOSortDirectionEnum];

/**
 *
 * @export
 * @interface VariableUpdateDTO
 */
export interface VariableUpdateDTO {
  /**
   *
   * @type {string}
   * @memberof VariableUpdateDTO
   */
  key: string;
  /**
   *
   * @type {string}
   * @memberof VariableUpdateDTO
   */
  value: string;
  /**
   *
   * @type {string}
   * @memberof VariableUpdateDTO
   */
  gameServerId?: string;
  /**
   *
   * @type {string}
   * @memberof VariableUpdateDTO
   */
  playerId?: string;
}

/**
 * CommandApi - axios parameter creator
 * @export
 */
export const CommandApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create
     * @param {CommandCreateDTO} [commandCreateDTO] CommandCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerCreate: async (
      commandCreateDTO?: CommandCreateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/command`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commandCreateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create argument
     * @param {CommandArgumentCreateDTO} [commandArgumentCreateDTO] CommandArgumentCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerCreateArgument: async (
      commandArgumentCreateDTO?: CommandArgumentCreateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/command/argument`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commandArgumentCreateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('commandControllerGetOne', 'id', id);
      const localVarPath = `/command/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('commandControllerRemove', 'id', id);
      const localVarPath = `/command/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove argument
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerRemoveArgument: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('commandControllerRemoveArgument', 'id', id);
      const localVarPath = `/command/argument/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {CommandSearchInputDTO} [commandSearchInputDTO] CommandSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerSearch: async (
      commandSearchInputDTO?: CommandSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/command/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commandSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Trigger
     * @param {string} id
     * @param {CommandTriggerDTO} [commandTriggerDTO] CommandTriggerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerTrigger: async (
      id: string,
      commandTriggerDTO?: CommandTriggerDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('commandControllerTrigger', 'id', id);
      const localVarPath = `/command/{id}/trigger`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commandTriggerDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {CommandUpdateDTO} [commandUpdateDTO] CommandUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerUpdate: async (
      id: string,
      commandUpdateDTO?: CommandUpdateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('commandControllerUpdate', 'id', id);
      const localVarPath = `/command/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commandUpdateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update argument
     * @param {string} id
     * @param {CommandArgumentUpdateDTO} [commandArgumentUpdateDTO] CommandArgumentUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerUpdateArgument: async (
      id: string,
      commandArgumentUpdateDTO?: CommandArgumentUpdateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('commandControllerUpdateArgument', 'id', id);
      const localVarPath = `/command/argument/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commandArgumentUpdateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CommandApi - functional programming interface
 * @export
 */
export const CommandApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CommandApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {CommandCreateDTO} [commandCreateDTO] CommandCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commandControllerCreate(
      commandCreateDTO?: CommandCreateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CommandOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.commandControllerCreate(
          commandCreateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create argument
     * @param {CommandArgumentCreateDTO} [commandArgumentCreateDTO] CommandArgumentCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commandControllerCreateArgument(
      commandArgumentCreateDTO?: CommandArgumentCreateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CommandArgumentDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.commandControllerCreateArgument(
          commandArgumentCreateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commandControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CommandOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.commandControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commandControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdUuidDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.commandControllerRemove(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove argument
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commandControllerRemoveArgument(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdUuidDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.commandControllerRemoveArgument(
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {CommandSearchInputDTO} [commandSearchInputDTO] CommandSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commandControllerSearch(
      commandSearchInputDTO?: CommandSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CommandOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.commandControllerSearch(
          commandSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Trigger
     * @param {string} id
     * @param {CommandTriggerDTO} [commandTriggerDTO] CommandTriggerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commandControllerTrigger(
      id: string,
      commandTriggerDTO?: CommandTriggerDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.commandControllerTrigger(
          id,
          commandTriggerDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {CommandUpdateDTO} [commandUpdateDTO] CommandUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commandControllerUpdate(
      id: string,
      commandUpdateDTO?: CommandUpdateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CommandOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.commandControllerUpdate(
          id,
          commandUpdateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update argument
     * @param {string} id
     * @param {CommandArgumentUpdateDTO} [commandArgumentUpdateDTO] CommandArgumentUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async commandControllerUpdateArgument(
      id: string,
      commandArgumentUpdateDTO?: CommandArgumentUpdateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CommandArgumentDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.commandControllerUpdateArgument(
          id,
          commandArgumentUpdateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CommandApi - factory interface
 * @export
 */
export const CommandApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CommandApiFp(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {CommandCreateDTO} [commandCreateDTO] CommandCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerCreate(
      commandCreateDTO?: CommandCreateDTO,
      options?: any
    ): AxiosPromise<CommandOutputDTOAPI> {
      return localVarFp
        .commandControllerCreate(commandCreateDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create argument
     * @param {CommandArgumentCreateDTO} [commandArgumentCreateDTO] CommandArgumentCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerCreateArgument(
      commandArgumentCreateDTO?: CommandArgumentCreateDTO,
      options?: any
    ): AxiosPromise<CommandArgumentDTOAPI> {
      return localVarFp
        .commandControllerCreateArgument(commandArgumentCreateDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<CommandOutputDTOAPI> {
      return localVarFp
        .commandControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerRemove(
      id: string,
      options?: any
    ): AxiosPromise<IdUuidDTOAPI> {
      return localVarFp
        .commandControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove argument
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerRemoveArgument(
      id: string,
      options?: any
    ): AxiosPromise<IdUuidDTOAPI> {
      return localVarFp
        .commandControllerRemoveArgument(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {CommandSearchInputDTO} [commandSearchInputDTO] CommandSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerSearch(
      commandSearchInputDTO?: CommandSearchInputDTO,
      options?: any
    ): AxiosPromise<CommandOutputArrayDTOAPI> {
      return localVarFp
        .commandControllerSearch(commandSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Trigger
     * @param {string} id
     * @param {CommandTriggerDTO} [commandTriggerDTO] CommandTriggerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerTrigger(
      id: string,
      commandTriggerDTO?: CommandTriggerDTO,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .commandControllerTrigger(id, commandTriggerDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {CommandUpdateDTO} [commandUpdateDTO] CommandUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerUpdate(
      id: string,
      commandUpdateDTO?: CommandUpdateDTO,
      options?: any
    ): AxiosPromise<CommandOutputDTOAPI> {
      return localVarFp
        .commandControllerUpdate(id, commandUpdateDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update argument
     * @param {string} id
     * @param {CommandArgumentUpdateDTO} [commandArgumentUpdateDTO] CommandArgumentUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commandControllerUpdateArgument(
      id: string,
      commandArgumentUpdateDTO?: CommandArgumentUpdateDTO,
      options?: any
    ): AxiosPromise<CommandArgumentDTOAPI> {
      return localVarFp
        .commandControllerUpdateArgument(id, commandArgumentUpdateDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CommandApi - object-oriented interface
 * @export
 * @class CommandApi
 * @extends {BaseAPI}
 */
export class CommandApi extends BaseAPI {
  /**
   *
   * @summary Create
   * @param {CommandCreateDTO} [commandCreateDTO] CommandCreateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommandApi
   */
  public commandControllerCreate(
    commandCreateDTO?: CommandCreateDTO,
    options?: AxiosRequestConfig
  ) {
    return CommandApiFp(this.configuration)
      .commandControllerCreate(commandCreateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create argument
   * @param {CommandArgumentCreateDTO} [commandArgumentCreateDTO] CommandArgumentCreateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommandApi
   */
  public commandControllerCreateArgument(
    commandArgumentCreateDTO?: CommandArgumentCreateDTO,
    options?: AxiosRequestConfig
  ) {
    return CommandApiFp(this.configuration)
      .commandControllerCreateArgument(commandArgumentCreateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommandApi
   */
  public commandControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return CommandApiFp(this.configuration)
      .commandControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommandApi
   */
  public commandControllerRemove(id: string, options?: AxiosRequestConfig) {
    return CommandApiFp(this.configuration)
      .commandControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove argument
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommandApi
   */
  public commandControllerRemoveArgument(
    id: string,
    options?: AxiosRequestConfig
  ) {
    return CommandApiFp(this.configuration)
      .commandControllerRemoveArgument(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {CommandSearchInputDTO} [commandSearchInputDTO] CommandSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommandApi
   */
  public commandControllerSearch(
    commandSearchInputDTO?: CommandSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return CommandApiFp(this.configuration)
      .commandControllerSearch(commandSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Trigger
   * @param {string} id
   * @param {CommandTriggerDTO} [commandTriggerDTO] CommandTriggerDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommandApi
   */
  public commandControllerTrigger(
    id: string,
    commandTriggerDTO?: CommandTriggerDTO,
    options?: AxiosRequestConfig
  ) {
    return CommandApiFp(this.configuration)
      .commandControllerTrigger(id, commandTriggerDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {CommandUpdateDTO} [commandUpdateDTO] CommandUpdateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommandApi
   */
  public commandControllerUpdate(
    id: string,
    commandUpdateDTO?: CommandUpdateDTO,
    options?: AxiosRequestConfig
  ) {
    return CommandApiFp(this.configuration)
      .commandControllerUpdate(id, commandUpdateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update argument
   * @param {string} id
   * @param {CommandArgumentUpdateDTO} [commandArgumentUpdateDTO] CommandArgumentUpdateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommandApi
   */
  public commandControllerUpdateArgument(
    id: string,
    commandArgumentUpdateDTO?: CommandArgumentUpdateDTO,
    options?: AxiosRequestConfig
  ) {
    return CommandApiFp(this.configuration)
      .commandControllerUpdateArgument(id, commandArgumentUpdateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CronJobApi - axios parameter creator
 * @export
 */
export const CronJobApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create
     * @param {CronJobCreateDTO} [cronJobCreateDTO] CronJobCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cronJobControllerCreate: async (
      cronJobCreateDTO?: CronJobCreateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/cronjob`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cronJobCreateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cronJobControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('cronJobControllerGetOne', 'id', id);
      const localVarPath = `/cronjob/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cronJobControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('cronJobControllerRemove', 'id', id);
      const localVarPath = `/cronjob/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {CronJobSearchInputDTO} [cronJobSearchInputDTO] CronJobSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cronJobControllerSearch: async (
      cronJobSearchInputDTO?: CronJobSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/cronjob/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cronJobSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Trigger
     * @param {CronJobTriggerDTO} [cronJobTriggerDTO] CronJobTriggerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cronJobControllerTrigger: async (
      cronJobTriggerDTO?: CronJobTriggerDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/cronjob/trigger`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cronJobTriggerDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {CronJobUpdateDTO} [cronJobUpdateDTO] CronJobUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cronJobControllerUpdate: async (
      id: string,
      cronJobUpdateDTO?: CronJobUpdateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('cronJobControllerUpdate', 'id', id);
      const localVarPath = `/cronjob/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cronJobUpdateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CronJobApi - functional programming interface
 * @export
 */
export const CronJobApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CronJobApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {CronJobCreateDTO} [cronJobCreateDTO] CronJobCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cronJobControllerCreate(
      cronJobCreateDTO?: CronJobCreateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CronJobOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cronJobControllerCreate(
          cronJobCreateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cronJobControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CronJobOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cronJobControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cronJobControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdUuidDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cronJobControllerRemove(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {CronJobSearchInputDTO} [cronJobSearchInputDTO] CronJobSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cronJobControllerSearch(
      cronJobSearchInputDTO?: CronJobSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CronJobOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cronJobControllerSearch(
          cronJobSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Trigger
     * @param {CronJobTriggerDTO} [cronJobTriggerDTO] CronJobTriggerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cronJobControllerTrigger(
      cronJobTriggerDTO?: CronJobTriggerDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cronJobControllerTrigger(
          cronJobTriggerDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {CronJobUpdateDTO} [cronJobUpdateDTO] CronJobUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cronJobControllerUpdate(
      id: string,
      cronJobUpdateDTO?: CronJobUpdateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CronJobOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.cronJobControllerUpdate(
          id,
          cronJobUpdateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CronJobApi - factory interface
 * @export
 */
export const CronJobApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CronJobApiFp(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {CronJobCreateDTO} [cronJobCreateDTO] CronJobCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cronJobControllerCreate(
      cronJobCreateDTO?: CronJobCreateDTO,
      options?: any
    ): AxiosPromise<CronJobOutputDTOAPI> {
      return localVarFp
        .cronJobControllerCreate(cronJobCreateDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cronJobControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<CronJobOutputDTOAPI> {
      return localVarFp
        .cronJobControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cronJobControllerRemove(
      id: string,
      options?: any
    ): AxiosPromise<IdUuidDTOAPI> {
      return localVarFp
        .cronJobControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {CronJobSearchInputDTO} [cronJobSearchInputDTO] CronJobSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cronJobControllerSearch(
      cronJobSearchInputDTO?: CronJobSearchInputDTO,
      options?: any
    ): AxiosPromise<CronJobOutputArrayDTOAPI> {
      return localVarFp
        .cronJobControllerSearch(cronJobSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Trigger
     * @param {CronJobTriggerDTO} [cronJobTriggerDTO] CronJobTriggerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cronJobControllerTrigger(
      cronJobTriggerDTO?: CronJobTriggerDTO,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .cronJobControllerTrigger(cronJobTriggerDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {CronJobUpdateDTO} [cronJobUpdateDTO] CronJobUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cronJobControllerUpdate(
      id: string,
      cronJobUpdateDTO?: CronJobUpdateDTO,
      options?: any
    ): AxiosPromise<CronJobOutputDTOAPI> {
      return localVarFp
        .cronJobControllerUpdate(id, cronJobUpdateDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CronJobApi - object-oriented interface
 * @export
 * @class CronJobApi
 * @extends {BaseAPI}
 */
export class CronJobApi extends BaseAPI {
  /**
   *
   * @summary Create
   * @param {CronJobCreateDTO} [cronJobCreateDTO] CronJobCreateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CronJobApi
   */
  public cronJobControllerCreate(
    cronJobCreateDTO?: CronJobCreateDTO,
    options?: AxiosRequestConfig
  ) {
    return CronJobApiFp(this.configuration)
      .cronJobControllerCreate(cronJobCreateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CronJobApi
   */
  public cronJobControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return CronJobApiFp(this.configuration)
      .cronJobControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CronJobApi
   */
  public cronJobControllerRemove(id: string, options?: AxiosRequestConfig) {
    return CronJobApiFp(this.configuration)
      .cronJobControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {CronJobSearchInputDTO} [cronJobSearchInputDTO] CronJobSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CronJobApi
   */
  public cronJobControllerSearch(
    cronJobSearchInputDTO?: CronJobSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return CronJobApiFp(this.configuration)
      .cronJobControllerSearch(cronJobSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Trigger
   * @param {CronJobTriggerDTO} [cronJobTriggerDTO] CronJobTriggerDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CronJobApi
   */
  public cronJobControllerTrigger(
    cronJobTriggerDTO?: CronJobTriggerDTO,
    options?: AxiosRequestConfig
  ) {
    return CronJobApiFp(this.configuration)
      .cronJobControllerTrigger(cronJobTriggerDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {CronJobUpdateDTO} [cronJobUpdateDTO] CronJobUpdateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CronJobApi
   */
  public cronJobControllerUpdate(
    id: string,
    cronJobUpdateDTO?: CronJobUpdateDTO,
    options?: AxiosRequestConfig
  ) {
    return CronJobApiFp(this.configuration)
      .cronJobControllerUpdate(id, cronJobUpdateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DomainApi - axios parameter creator
 * @export
 */
export const DomainApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create
     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerCreate: async (
      domainCreateInputDTO?: DomainCreateInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/domain`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication adminAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        domainCreateInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('domainControllerGetOne', 'id', id);
      const localVarPath = `/domain/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication adminAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get token
     * @param {TokenInputDTO} [tokenInputDTO] TokenInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerGetToken: async (
      tokenInputDTO?: TokenInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication adminAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tokenInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('domainControllerRemove', 'id', id);
      const localVarPath = `/domain/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication adminAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {DomainSearchInputDTO} [domainSearchInputDTO] DomainSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerSearch: async (
      domainSearchInputDTO?: DomainSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/domain/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication adminAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        domainSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {DomainUpdateInputDTO} [domainUpdateInputDTO] DomainUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerUpdate: async (
      id: string,
      domainUpdateInputDTO?: DomainUpdateInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('domainControllerUpdate', 'id', id);
      const localVarPath = `/domain/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication adminAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        domainUpdateInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DomainApi - functional programming interface
 * @export
 */
export const DomainApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DomainApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async domainControllerCreate(
      domainCreateInputDTO?: DomainCreateInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DomainCreateOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.domainControllerCreate(
          domainCreateInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async domainControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DomainOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.domainControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get token
     * @param {TokenInputDTO} [tokenInputDTO] TokenInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async domainControllerGetToken(
      tokenInputDTO?: TokenInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<TokenOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.domainControllerGetToken(
          tokenInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async domainControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdUuidDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.domainControllerRemove(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {DomainSearchInputDTO} [domainSearchInputDTO] DomainSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async domainControllerSearch(
      domainSearchInputDTO?: DomainSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DomainOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.domainControllerSearch(
          domainSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {DomainUpdateInputDTO} [domainUpdateInputDTO] DomainUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async domainControllerUpdate(
      id: string,
      domainUpdateInputDTO?: DomainUpdateInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DomainOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.domainControllerUpdate(
          id,
          domainUpdateInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DomainApi - factory interface
 * @export
 */
export const DomainApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DomainApiFp(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerCreate(
      domainCreateInputDTO?: DomainCreateInputDTO,
      options?: any
    ): AxiosPromise<DomainCreateOutputDTOAPI> {
      return localVarFp
        .domainControllerCreate(domainCreateInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<DomainOutputDTOAPI> {
      return localVarFp
        .domainControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get token
     * @param {TokenInputDTO} [tokenInputDTO] TokenInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerGetToken(
      tokenInputDTO?: TokenInputDTO,
      options?: any
    ): AxiosPromise<TokenOutputDTOAPI> {
      return localVarFp
        .domainControllerGetToken(tokenInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerRemove(
      id: string,
      options?: any
    ): AxiosPromise<IdUuidDTOAPI> {
      return localVarFp
        .domainControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {DomainSearchInputDTO} [domainSearchInputDTO] DomainSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerSearch(
      domainSearchInputDTO?: DomainSearchInputDTO,
      options?: any
    ): AxiosPromise<DomainOutputArrayDTOAPI> {
      return localVarFp
        .domainControllerSearch(domainSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {DomainUpdateInputDTO} [domainUpdateInputDTO] DomainUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainControllerUpdate(
      id: string,
      domainUpdateInputDTO?: DomainUpdateInputDTO,
      options?: any
    ): AxiosPromise<DomainOutputDTOAPI> {
      return localVarFp
        .domainControllerUpdate(id, domainUpdateInputDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DomainApi - object-oriented interface
 * @export
 * @class DomainApi
 * @extends {BaseAPI}
 */
export class DomainApi extends BaseAPI {
  /**
   *
   * @summary Create
   * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainApi
   */
  public domainControllerCreate(
    domainCreateInputDTO?: DomainCreateInputDTO,
    options?: AxiosRequestConfig
  ) {
    return DomainApiFp(this.configuration)
      .domainControllerCreate(domainCreateInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainApi
   */
  public domainControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return DomainApiFp(this.configuration)
      .domainControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get token
   * @param {TokenInputDTO} [tokenInputDTO] TokenInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainApi
   */
  public domainControllerGetToken(
    tokenInputDTO?: TokenInputDTO,
    options?: AxiosRequestConfig
  ) {
    return DomainApiFp(this.configuration)
      .domainControllerGetToken(tokenInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainApi
   */
  public domainControllerRemove(id: string, options?: AxiosRequestConfig) {
    return DomainApiFp(this.configuration)
      .domainControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {DomainSearchInputDTO} [domainSearchInputDTO] DomainSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainApi
   */
  public domainControllerSearch(
    domainSearchInputDTO?: DomainSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return DomainApiFp(this.configuration)
      .domainControllerSearch(domainSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {DomainUpdateInputDTO} [domainUpdateInputDTO] DomainUpdateInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DomainApi
   */
  public domainControllerUpdate(
    id: string,
    domainUpdateInputDTO?: DomainUpdateInputDTO,
    options?: AxiosRequestConfig
  ) {
    return DomainApiFp(this.configuration)
      .domainControllerUpdate(id, domainUpdateInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FunctionApi - axios parameter creator
 * @export
 */
export const FunctionApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create
     * @param {FunctionCreateDTO} [functionCreateDTO] FunctionCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    functionControllerCreate: async (
      functionCreateDTO?: FunctionCreateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/function`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        functionCreateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    functionControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('functionControllerGetOne', 'id', id);
      const localVarPath = `/function/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    functionControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('functionControllerRemove', 'id', id);
      const localVarPath = `/function/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {FunctionSearchInputDTO} [functionSearchInputDTO] FunctionSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    functionControllerSearch: async (
      functionSearchInputDTO?: FunctionSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/function/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        functionSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {FunctionUpdateDTO} [functionUpdateDTO] FunctionUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    functionControllerUpdate: async (
      id: string,
      functionUpdateDTO?: FunctionUpdateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('functionControllerUpdate', 'id', id);
      const localVarPath = `/function/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        functionUpdateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FunctionApi - functional programming interface
 * @export
 */
export const FunctionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FunctionApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {FunctionCreateDTO} [functionCreateDTO] FunctionCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async functionControllerCreate(
      functionCreateDTO?: FunctionCreateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FunctionOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.functionControllerCreate(
          functionCreateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async functionControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FunctionOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.functionControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async functionControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdUuidDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.functionControllerRemove(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {FunctionSearchInputDTO} [functionSearchInputDTO] FunctionSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async functionControllerSearch(
      functionSearchInputDTO?: FunctionSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FunctionOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.functionControllerSearch(
          functionSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {FunctionUpdateDTO} [functionUpdateDTO] FunctionUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async functionControllerUpdate(
      id: string,
      functionUpdateDTO?: FunctionUpdateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FunctionOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.functionControllerUpdate(
          id,
          functionUpdateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * FunctionApi - factory interface
 * @export
 */
export const FunctionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FunctionApiFp(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {FunctionCreateDTO} [functionCreateDTO] FunctionCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    functionControllerCreate(
      functionCreateDTO?: FunctionCreateDTO,
      options?: any
    ): AxiosPromise<FunctionOutputDTOAPI> {
      return localVarFp
        .functionControllerCreate(functionCreateDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    functionControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<FunctionOutputDTOAPI> {
      return localVarFp
        .functionControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    functionControllerRemove(
      id: string,
      options?: any
    ): AxiosPromise<IdUuidDTOAPI> {
      return localVarFp
        .functionControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {FunctionSearchInputDTO} [functionSearchInputDTO] FunctionSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    functionControllerSearch(
      functionSearchInputDTO?: FunctionSearchInputDTO,
      options?: any
    ): AxiosPromise<FunctionOutputArrayDTOAPI> {
      return localVarFp
        .functionControllerSearch(functionSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {FunctionUpdateDTO} [functionUpdateDTO] FunctionUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    functionControllerUpdate(
      id: string,
      functionUpdateDTO?: FunctionUpdateDTO,
      options?: any
    ): AxiosPromise<FunctionOutputDTOAPI> {
      return localVarFp
        .functionControllerUpdate(id, functionUpdateDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FunctionApi - object-oriented interface
 * @export
 * @class FunctionApi
 * @extends {BaseAPI}
 */
export class FunctionApi extends BaseAPI {
  /**
   *
   * @summary Create
   * @param {FunctionCreateDTO} [functionCreateDTO] FunctionCreateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FunctionApi
   */
  public functionControllerCreate(
    functionCreateDTO?: FunctionCreateDTO,
    options?: AxiosRequestConfig
  ) {
    return FunctionApiFp(this.configuration)
      .functionControllerCreate(functionCreateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FunctionApi
   */
  public functionControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return FunctionApiFp(this.configuration)
      .functionControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FunctionApi
   */
  public functionControllerRemove(id: string, options?: AxiosRequestConfig) {
    return FunctionApiFp(this.configuration)
      .functionControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {FunctionSearchInputDTO} [functionSearchInputDTO] FunctionSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FunctionApi
   */
  public functionControllerSearch(
    functionSearchInputDTO?: FunctionSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return FunctionApiFp(this.configuration)
      .functionControllerSearch(functionSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {FunctionUpdateDTO} [functionUpdateDTO] FunctionUpdateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FunctionApi
   */
  public functionControllerUpdate(
    id: string,
    functionUpdateDTO?: FunctionUpdateDTO,
    options?: AxiosRequestConfig
  ) {
    return FunctionApiFp(this.configuration)
      .functionControllerUpdate(id, functionUpdateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GameServerApi - axios parameter creator
 * @export
 */
export const GameServerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create
     * @param {GameServerCreateDTO} [gameServerCreateDTO] GameServerCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerCreate: async (
      gameServerCreateDTO?: GameServerCreateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/gameserver`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        gameServerCreateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Execute command
     * @param {string} id
     * @param {CommandExecuteInputDTO} [commandExecuteInputDTO] CommandExecuteInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerExecuteCommand: async (
      id: string,
      commandExecuteInputDTO?: CommandExecuteInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('gameServerControllerExecuteCommand', 'id', id);
      const localVarPath = `/gameserver/{id}/command`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        commandExecuteInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get installed modules
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerGetInstalledModules: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('gameServerControllerGetInstalledModules', 'id', id);
      const localVarPath = `/gameserver/{id}/modules`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get module installation
     * @param {string} gameserverId
     * @param {string} moduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerGetModuleInstallation: async (
      gameserverId: string,
      moduleId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameserverId' is not null or undefined
      assertParamExists(
        'gameServerControllerGetModuleInstallation',
        'gameserverId',
        gameserverId
      );
      // verify required parameter 'moduleId' is not null or undefined
      assertParamExists(
        'gameServerControllerGetModuleInstallation',
        'moduleId',
        moduleId
      );
      const localVarPath = `/gameserver/{gameserverId}/module/{moduleId}`
        .replace(
          `{${'gameserverId'}}`,
          encodeURIComponent(String(gameserverId))
        )
        .replace(`{${'moduleId'}}`, encodeURIComponent(String(moduleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('gameServerControllerGetOne', 'id', id);
      const localVarPath = `/gameserver/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerGetTypes: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/gameserver/types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Install module
     * @param {string} gameserverId
     * @param {string} moduleId
     * @param {ModuleInstallDTO} [moduleInstallDTO] ModuleInstallDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerInstallModule: async (
      gameserverId: string,
      moduleId: string,
      moduleInstallDTO?: ModuleInstallDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameserverId' is not null or undefined
      assertParamExists(
        'gameServerControllerInstallModule',
        'gameserverId',
        gameserverId
      );
      // verify required parameter 'moduleId' is not null or undefined
      assertParamExists(
        'gameServerControllerInstallModule',
        'moduleId',
        moduleId
      );
      const localVarPath = `/gameserver/{gameserverId}/modules/{moduleId}`
        .replace(
          `{${'gameserverId'}}`,
          encodeURIComponent(String(gameserverId))
        )
        .replace(`{${'moduleId'}}`, encodeURIComponent(String(moduleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        moduleInstallDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('gameServerControllerRemove', 'id', id);
      const localVarPath = `/gameserver/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {GameServerSearchInputDTO} [gameServerSearchInputDTO] GameServerSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerSearch: async (
      gameServerSearchInputDTO?: GameServerSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/gameserver/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        gameServerSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Send message
     * @param {string} id
     * @param {MessageSendInputDTO} [messageSendInputDTO] MessageSendInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerSendMessage: async (
      id: string,
      messageSendInputDTO?: MessageSendInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('gameServerControllerSendMessage', 'id', id);
      const localVarPath = `/gameserver/{id}/message`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        messageSendInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Teleport player
     * @param {string} gameserverId
     * @param {string} playerId
     * @param {TeleportPlayerInputDTO} [teleportPlayerInputDTO] TeleportPlayerInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerTeleportPlayer: async (
      gameserverId: string,
      playerId: string,
      teleportPlayerInputDTO?: TeleportPlayerInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameserverId' is not null or undefined
      assertParamExists(
        'gameServerControllerTeleportPlayer',
        'gameserverId',
        gameserverId
      );
      // verify required parameter 'playerId' is not null or undefined
      assertParamExists(
        'gameServerControllerTeleportPlayer',
        'playerId',
        playerId
      );
      const localVarPath =
        `/gameserver/{gameserverId}/player/{playerId}/teleport`
          .replace(
            `{${'gameserverId'}}`,
            encodeURIComponent(String(gameserverId))
          )
          .replace(`{${'playerId'}}`, encodeURIComponent(String(playerId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        teleportPlayerInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Test reachability
     * @param {GameServerTestReachabilityInputDTO} [gameServerTestReachabilityInputDTO] GameServerTestReachabilityInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerTestReachability: async (
      gameServerTestReachabilityInputDTO?: GameServerTestReachabilityInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/gameserver/reachability`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        gameServerTestReachabilityInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Test reachability for id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerTestReachabilityForId: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('gameServerControllerTestReachabilityForId', 'id', id);
      const localVarPath = `/gameserver/{id}/reachability`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Uninstall module
     * @param {string} gameserverId
     * @param {string} moduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerUninstallModule: async (
      gameserverId: string,
      moduleId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gameserverId' is not null or undefined
      assertParamExists(
        'gameServerControllerUninstallModule',
        'gameserverId',
        gameserverId
      );
      // verify required parameter 'moduleId' is not null or undefined
      assertParamExists(
        'gameServerControllerUninstallModule',
        'moduleId',
        moduleId
      );
      const localVarPath = `/gameserver/{gameserverId}/modules/{moduleId}`
        .replace(
          `{${'gameserverId'}}`,
          encodeURIComponent(String(gameserverId))
        )
        .replace(`{${'moduleId'}}`, encodeURIComponent(String(moduleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {GameServerUpdateDTO} [gameServerUpdateDTO] GameServerUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerUpdate: async (
      id: string,
      gameServerUpdateDTO?: GameServerUpdateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('gameServerControllerUpdate', 'id', id);
      const localVarPath = `/gameserver/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        gameServerUpdateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GameServerApi - functional programming interface
 * @export
 */
export const GameServerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    GameServerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {GameServerCreateDTO} [gameServerCreateDTO] GameServerCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerCreate(
      gameServerCreateDTO?: GameServerCreateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GameServerOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerCreate(
          gameServerCreateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Execute command
     * @param {string} id
     * @param {CommandExecuteInputDTO} [commandExecuteInputDTO] CommandExecuteInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerExecuteCommand(
      id: string,
      commandExecuteInputDTO?: CommandExecuteInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CommandExecuteDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerExecuteCommand(
          id,
          commandExecuteInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get installed modules
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerGetInstalledModules(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ModuleInstallationOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerGetInstalledModules(
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get module installation
     * @param {string} gameserverId
     * @param {string} moduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerGetModuleInstallation(
      gameserverId: string,
      moduleId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ModuleInstallationOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerGetModuleInstallation(
          gameserverId,
          moduleId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GameServerOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerGetTypes(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GameServerTypesOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerGetTypes(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Install module
     * @param {string} gameserverId
     * @param {string} moduleId
     * @param {ModuleInstallDTO} [moduleInstallDTO] ModuleInstallDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerInstallModule(
      gameserverId: string,
      moduleId: string,
      moduleInstallDTO?: ModuleInstallDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ModuleInstallationOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerInstallModule(
          gameserverId,
          moduleId,
          moduleInstallDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdUuidDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerRemove(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {GameServerSearchInputDTO} [gameServerSearchInputDTO] GameServerSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerSearch(
      gameServerSearchInputDTO?: GameServerSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GameServerOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerSearch(
          gameServerSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Send message
     * @param {string} id
     * @param {MessageSendInputDTO} [messageSendInputDTO] MessageSendInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerSendMessage(
      id: string,
      messageSendInputDTO?: MessageSendInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerSendMessage(
          id,
          messageSendInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Teleport player
     * @param {string} gameserverId
     * @param {string} playerId
     * @param {TeleportPlayerInputDTO} [teleportPlayerInputDTO] TeleportPlayerInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerTeleportPlayer(
      gameserverId: string,
      playerId: string,
      teleportPlayerInputDTO?: TeleportPlayerInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerTeleportPlayer(
          gameserverId,
          playerId,
          teleportPlayerInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Test reachability
     * @param {GameServerTestReachabilityInputDTO} [gameServerTestReachabilityInputDTO] GameServerTestReachabilityInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerTestReachability(
      gameServerTestReachabilityInputDTO?: GameServerTestReachabilityInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GameServerTestReachabilityDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerTestReachability(
          gameServerTestReachabilityInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Test reachability for id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerTestReachabilityForId(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GameServerTestReachabilityDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerTestReachabilityForId(
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Uninstall module
     * @param {string} gameserverId
     * @param {string} moduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerUninstallModule(
      gameserverId: string,
      moduleId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ModuleInstallationOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerUninstallModule(
          gameserverId,
          moduleId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {GameServerUpdateDTO} [gameServerUpdateDTO] GameServerUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gameServerControllerUpdate(
      id: string,
      gameServerUpdateDTO?: GameServerUpdateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GameServerOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.gameServerControllerUpdate(
          id,
          gameServerUpdateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * GameServerApi - factory interface
 * @export
 */
export const GameServerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GameServerApiFp(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {GameServerCreateDTO} [gameServerCreateDTO] GameServerCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerCreate(
      gameServerCreateDTO?: GameServerCreateDTO,
      options?: any
    ): AxiosPromise<GameServerOutputDTOAPI> {
      return localVarFp
        .gameServerControllerCreate(gameServerCreateDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Execute command
     * @param {string} id
     * @param {CommandExecuteInputDTO} [commandExecuteInputDTO] CommandExecuteInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerExecuteCommand(
      id: string,
      commandExecuteInputDTO?: CommandExecuteInputDTO,
      options?: any
    ): AxiosPromise<CommandExecuteDTOAPI> {
      return localVarFp
        .gameServerControllerExecuteCommand(id, commandExecuteInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get installed modules
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerGetInstalledModules(
      id: string,
      options?: any
    ): AxiosPromise<ModuleInstallationOutputArrayDTOAPI> {
      return localVarFp
        .gameServerControllerGetInstalledModules(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get module installation
     * @param {string} gameserverId
     * @param {string} moduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerGetModuleInstallation(
      gameserverId: string,
      moduleId: string,
      options?: any
    ): AxiosPromise<ModuleInstallationOutputDTOAPI> {
      return localVarFp
        .gameServerControllerGetModuleInstallation(
          gameserverId,
          moduleId,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<GameServerOutputDTOAPI> {
      return localVarFp
        .gameServerControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerGetTypes(
      options?: any
    ): AxiosPromise<GameServerTypesOutputDTOAPI> {
      return localVarFp
        .gameServerControllerGetTypes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Install module
     * @param {string} gameserverId
     * @param {string} moduleId
     * @param {ModuleInstallDTO} [moduleInstallDTO] ModuleInstallDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerInstallModule(
      gameserverId: string,
      moduleId: string,
      moduleInstallDTO?: ModuleInstallDTO,
      options?: any
    ): AxiosPromise<ModuleInstallationOutputDTOAPI> {
      return localVarFp
        .gameServerControllerInstallModule(
          gameserverId,
          moduleId,
          moduleInstallDTO,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerRemove(
      id: string,
      options?: any
    ): AxiosPromise<IdUuidDTOAPI> {
      return localVarFp
        .gameServerControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {GameServerSearchInputDTO} [gameServerSearchInputDTO] GameServerSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerSearch(
      gameServerSearchInputDTO?: GameServerSearchInputDTO,
      options?: any
    ): AxiosPromise<GameServerOutputArrayDTOAPI> {
      return localVarFp
        .gameServerControllerSearch(gameServerSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Send message
     * @param {string} id
     * @param {MessageSendInputDTO} [messageSendInputDTO] MessageSendInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerSendMessage(
      id: string,
      messageSendInputDTO?: MessageSendInputDTO,
      options?: any
    ): AxiosPromise<APIOutput> {
      return localVarFp
        .gameServerControllerSendMessage(id, messageSendInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Teleport player
     * @param {string} gameserverId
     * @param {string} playerId
     * @param {TeleportPlayerInputDTO} [teleportPlayerInputDTO] TeleportPlayerInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerTeleportPlayer(
      gameserverId: string,
      playerId: string,
      teleportPlayerInputDTO?: TeleportPlayerInputDTO,
      options?: any
    ): AxiosPromise<APIOutput> {
      return localVarFp
        .gameServerControllerTeleportPlayer(
          gameserverId,
          playerId,
          teleportPlayerInputDTO,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Test reachability
     * @param {GameServerTestReachabilityInputDTO} [gameServerTestReachabilityInputDTO] GameServerTestReachabilityInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerTestReachability(
      gameServerTestReachabilityInputDTO?: GameServerTestReachabilityInputDTO,
      options?: any
    ): AxiosPromise<GameServerTestReachabilityDTOAPI> {
      return localVarFp
        .gameServerControllerTestReachability(
          gameServerTestReachabilityInputDTO,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Test reachability for id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerTestReachabilityForId(
      id: string,
      options?: any
    ): AxiosPromise<GameServerTestReachabilityDTOAPI> {
      return localVarFp
        .gameServerControllerTestReachabilityForId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Uninstall module
     * @param {string} gameserverId
     * @param {string} moduleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerUninstallModule(
      gameserverId: string,
      moduleId: string,
      options?: any
    ): AxiosPromise<ModuleInstallationOutputDTOAPI> {
      return localVarFp
        .gameServerControllerUninstallModule(gameserverId, moduleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {GameServerUpdateDTO} [gameServerUpdateDTO] GameServerUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gameServerControllerUpdate(
      id: string,
      gameServerUpdateDTO?: GameServerUpdateDTO,
      options?: any
    ): AxiosPromise<GameServerOutputDTOAPI> {
      return localVarFp
        .gameServerControllerUpdate(id, gameServerUpdateDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GameServerApi - object-oriented interface
 * @export
 * @class GameServerApi
 * @extends {BaseAPI}
 */
export class GameServerApi extends BaseAPI {
  /**
   *
   * @summary Create
   * @param {GameServerCreateDTO} [gameServerCreateDTO] GameServerCreateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerCreate(
    gameServerCreateDTO?: GameServerCreateDTO,
    options?: AxiosRequestConfig
  ) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerCreate(gameServerCreateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Execute command
   * @param {string} id
   * @param {CommandExecuteInputDTO} [commandExecuteInputDTO] CommandExecuteInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerExecuteCommand(
    id: string,
    commandExecuteInputDTO?: CommandExecuteInputDTO,
    options?: AxiosRequestConfig
  ) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerExecuteCommand(id, commandExecuteInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get installed modules
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerGetInstalledModules(
    id: string,
    options?: AxiosRequestConfig
  ) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerGetInstalledModules(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get module installation
   * @param {string} gameserverId
   * @param {string} moduleId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerGetModuleInstallation(
    gameserverId: string,
    moduleId: string,
    options?: AxiosRequestConfig
  ) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerGetModuleInstallation(
        gameserverId,
        moduleId,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get types
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerGetTypes(options?: AxiosRequestConfig) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerGetTypes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Install module
   * @param {string} gameserverId
   * @param {string} moduleId
   * @param {ModuleInstallDTO} [moduleInstallDTO] ModuleInstallDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerInstallModule(
    gameserverId: string,
    moduleId: string,
    moduleInstallDTO?: ModuleInstallDTO,
    options?: AxiosRequestConfig
  ) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerInstallModule(
        gameserverId,
        moduleId,
        moduleInstallDTO,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerRemove(id: string, options?: AxiosRequestConfig) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {GameServerSearchInputDTO} [gameServerSearchInputDTO] GameServerSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerSearch(
    gameServerSearchInputDTO?: GameServerSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerSearch(gameServerSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Send message
   * @param {string} id
   * @param {MessageSendInputDTO} [messageSendInputDTO] MessageSendInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerSendMessage(
    id: string,
    messageSendInputDTO?: MessageSendInputDTO,
    options?: AxiosRequestConfig
  ) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerSendMessage(id, messageSendInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Teleport player
   * @param {string} gameserverId
   * @param {string} playerId
   * @param {TeleportPlayerInputDTO} [teleportPlayerInputDTO] TeleportPlayerInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerTeleportPlayer(
    gameserverId: string,
    playerId: string,
    teleportPlayerInputDTO?: TeleportPlayerInputDTO,
    options?: AxiosRequestConfig
  ) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerTeleportPlayer(
        gameserverId,
        playerId,
        teleportPlayerInputDTO,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Test reachability
   * @param {GameServerTestReachabilityInputDTO} [gameServerTestReachabilityInputDTO] GameServerTestReachabilityInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerTestReachability(
    gameServerTestReachabilityInputDTO?: GameServerTestReachabilityInputDTO,
    options?: AxiosRequestConfig
  ) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerTestReachability(
        gameServerTestReachabilityInputDTO,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Test reachability for id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerTestReachabilityForId(
    id: string,
    options?: AxiosRequestConfig
  ) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerTestReachabilityForId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Uninstall module
   * @param {string} gameserverId
   * @param {string} moduleId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerUninstallModule(
    gameserverId: string,
    moduleId: string,
    options?: AxiosRequestConfig
  ) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerUninstallModule(gameserverId, moduleId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {GameServerUpdateDTO} [gameServerUpdateDTO] GameServerUpdateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GameServerApi
   */
  public gameServerControllerUpdate(
    id: string,
    gameServerUpdateDTO?: GameServerUpdateDTO,
    options?: AxiosRequestConfig
  ) {
    return GameServerApiFp(this.configuration)
      .gameServerControllerUpdate(id, gameServerUpdateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * HookApi - axios parameter creator
 * @export
 */
export const HookApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create
     * @param {HookCreateDTO} [hookCreateDTO] HookCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hookControllerCreate: async (
      hookCreateDTO?: HookCreateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/hook`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        hookCreateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hookControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('hookControllerGetOne', 'id', id);
      const localVarPath = `/hook/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hookControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('hookControllerRemove', 'id', id);
      const localVarPath = `/hook/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {HookSearchInputDTO} [hookSearchInputDTO] HookSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hookControllerSearch: async (
      hookSearchInputDTO?: HookSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/hook/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        hookSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Trigger
     * @param {HookTriggerDTO} [hookTriggerDTO] HookTriggerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hookControllerTrigger: async (
      hookTriggerDTO?: HookTriggerDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/hook/trigger`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        hookTriggerDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {HookUpdateDTO} [hookUpdateDTO] HookUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hookControllerUpdate: async (
      id: string,
      hookUpdateDTO?: HookUpdateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('hookControllerUpdate', 'id', id);
      const localVarPath = `/hook/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        hookUpdateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HookApi - functional programming interface
 * @export
 */
export const HookApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HookApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {HookCreateDTO} [hookCreateDTO] HookCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hookControllerCreate(
      hookCreateDTO?: HookCreateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<HookOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.hookControllerCreate(
          hookCreateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hookControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<HookOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.hookControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hookControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdUuidDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.hookControllerRemove(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {HookSearchInputDTO} [hookSearchInputDTO] HookSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hookControllerSearch(
      hookSearchInputDTO?: HookSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<HookOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.hookControllerSearch(
          hookSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Trigger
     * @param {HookTriggerDTO} [hookTriggerDTO] HookTriggerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hookControllerTrigger(
      hookTriggerDTO?: HookTriggerDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.hookControllerTrigger(
          hookTriggerDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {HookUpdateDTO} [hookUpdateDTO] HookUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hookControllerUpdate(
      id: string,
      hookUpdateDTO?: HookUpdateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<HookOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.hookControllerUpdate(
          id,
          hookUpdateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * HookApi - factory interface
 * @export
 */
export const HookApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = HookApiFp(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {HookCreateDTO} [hookCreateDTO] HookCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hookControllerCreate(
      hookCreateDTO?: HookCreateDTO,
      options?: any
    ): AxiosPromise<HookOutputDTOAPI> {
      return localVarFp
        .hookControllerCreate(hookCreateDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hookControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<HookOutputDTOAPI> {
      return localVarFp
        .hookControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hookControllerRemove(
      id: string,
      options?: any
    ): AxiosPromise<IdUuidDTOAPI> {
      return localVarFp
        .hookControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {HookSearchInputDTO} [hookSearchInputDTO] HookSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hookControllerSearch(
      hookSearchInputDTO?: HookSearchInputDTO,
      options?: any
    ): AxiosPromise<HookOutputArrayDTOAPI> {
      return localVarFp
        .hookControllerSearch(hookSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Trigger
     * @param {HookTriggerDTO} [hookTriggerDTO] HookTriggerDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hookControllerTrigger(
      hookTriggerDTO?: HookTriggerDTO,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .hookControllerTrigger(hookTriggerDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {HookUpdateDTO} [hookUpdateDTO] HookUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hookControllerUpdate(
      id: string,
      hookUpdateDTO?: HookUpdateDTO,
      options?: any
    ): AxiosPromise<HookOutputDTOAPI> {
      return localVarFp
        .hookControllerUpdate(id, hookUpdateDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HookApi - object-oriented interface
 * @export
 * @class HookApi
 * @extends {BaseAPI}
 */
export class HookApi extends BaseAPI {
  /**
   *
   * @summary Create
   * @param {HookCreateDTO} [hookCreateDTO] HookCreateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HookApi
   */
  public hookControllerCreate(
    hookCreateDTO?: HookCreateDTO,
    options?: AxiosRequestConfig
  ) {
    return HookApiFp(this.configuration)
      .hookControllerCreate(hookCreateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HookApi
   */
  public hookControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return HookApiFp(this.configuration)
      .hookControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HookApi
   */
  public hookControllerRemove(id: string, options?: AxiosRequestConfig) {
    return HookApiFp(this.configuration)
      .hookControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {HookSearchInputDTO} [hookSearchInputDTO] HookSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HookApi
   */
  public hookControllerSearch(
    hookSearchInputDTO?: HookSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return HookApiFp(this.configuration)
      .hookControllerSearch(hookSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Trigger
   * @param {HookTriggerDTO} [hookTriggerDTO] HookTriggerDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HookApi
   */
  public hookControllerTrigger(
    hookTriggerDTO?: HookTriggerDTO,
    options?: AxiosRequestConfig
  ) {
    return HookApiFp(this.configuration)
      .hookControllerTrigger(hookTriggerDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {HookUpdateDTO} [hookUpdateDTO] HookUpdateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HookApi
   */
  public hookControllerUpdate(
    id: string,
    hookUpdateDTO?: HookUpdateDTO,
    options?: AxiosRequestConfig
  ) {
    return HookApiFp(this.configuration)
      .hookControllerUpdate(id, hookUpdateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MetaApi - axios parameter creator
 * @export
 */
export const MetaApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetHealth: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/healthz`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetMetrics: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/metrics`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get open api
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetOpenApi: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/openapi.json`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get open api html
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetOpenApiHtml: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api.html`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get readiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetReadiness: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/readyz`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MetaApi - functional programming interface
 * @export
 */
export const MetaApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MetaApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metaGetHealth(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<HealthOutputDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.metaGetHealth(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metaGetMetrics(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.metaGetMetrics(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get open api
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metaGetOpenApi(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.metaGetOpenApi(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get open api html
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metaGetOpenApiHtml(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.metaGetOpenApiHtml(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get readiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metaGetReadiness(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<HealthOutputDTO>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.metaGetReadiness(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * MetaApi - factory interface
 * @export
 */
export const MetaApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MetaApiFp(configuration);
  return {
    /**
     *
     * @summary Get health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetHealth(options?: any): AxiosPromise<HealthOutputDTO> {
      return localVarFp
        .metaGetHealth(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetMetrics(options?: any): AxiosPromise<void> {
      return localVarFp
        .metaGetMetrics(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get open api
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetOpenApi(options?: any): AxiosPromise<void> {
      return localVarFp
        .metaGetOpenApi(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get open api html
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetOpenApiHtml(options?: any): AxiosPromise<void> {
      return localVarFp
        .metaGetOpenApiHtml(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get readiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metaGetReadiness(options?: any): AxiosPromise<HealthOutputDTO> {
      return localVarFp
        .metaGetReadiness(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MetaApi - object-oriented interface
 * @export
 * @class MetaApi
 * @extends {BaseAPI}
 */
export class MetaApi extends BaseAPI {
  /**
   *
   * @summary Get health
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetaApi
   */
  public metaGetHealth(options?: AxiosRequestConfig) {
    return MetaApiFp(this.configuration)
      .metaGetHealth(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get metrics
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetaApi
   */
  public metaGetMetrics(options?: AxiosRequestConfig) {
    return MetaApiFp(this.configuration)
      .metaGetMetrics(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get open api
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetaApi
   */
  public metaGetOpenApi(options?: AxiosRequestConfig) {
    return MetaApiFp(this.configuration)
      .metaGetOpenApi(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get open api html
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetaApi
   */
  public metaGetOpenApiHtml(options?: AxiosRequestConfig) {
    return MetaApiFp(this.configuration)
      .metaGetOpenApiHtml(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get readiness
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetaApi
   */
  public metaGetReadiness(options?: AxiosRequestConfig) {
    return MetaApiFp(this.configuration)
      .metaGetReadiness(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ModuleApi - axios parameter creator
 * @export
 */
export const ModuleApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create
     * @param {ModuleCreateDTO} [moduleCreateDTO] ModuleCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moduleControllerCreate: async (
      moduleCreateDTO?: ModuleCreateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/module`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        moduleCreateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moduleControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('moduleControllerGetOne', 'id', id);
      const localVarPath = `/module/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moduleControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('moduleControllerRemove', 'id', id);
      const localVarPath = `/module/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {ModuleSearchInputDTO} [moduleSearchInputDTO] ModuleSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moduleControllerSearch: async (
      moduleSearchInputDTO?: ModuleSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/module/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        moduleSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {ModuleUpdateDTO} [moduleUpdateDTO] ModuleUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moduleControllerUpdate: async (
      id: string,
      moduleUpdateDTO?: ModuleUpdateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('moduleControllerUpdate', 'id', id);
      const localVarPath = `/module/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        moduleUpdateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ModuleApi - functional programming interface
 * @export
 */
export const ModuleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ModuleApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {ModuleCreateDTO} [moduleCreateDTO] ModuleCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async moduleControllerCreate(
      moduleCreateDTO?: ModuleCreateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ModuleOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.moduleControllerCreate(
          moduleCreateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async moduleControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ModuleOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.moduleControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async moduleControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdUuidDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.moduleControllerRemove(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {ModuleSearchInputDTO} [moduleSearchInputDTO] ModuleSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async moduleControllerSearch(
      moduleSearchInputDTO?: ModuleSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ModuleOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.moduleControllerSearch(
          moduleSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {ModuleUpdateDTO} [moduleUpdateDTO] ModuleUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async moduleControllerUpdate(
      id: string,
      moduleUpdateDTO?: ModuleUpdateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ModuleOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.moduleControllerUpdate(
          id,
          moduleUpdateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ModuleApi - factory interface
 * @export
 */
export const ModuleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ModuleApiFp(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {ModuleCreateDTO} [moduleCreateDTO] ModuleCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moduleControllerCreate(
      moduleCreateDTO?: ModuleCreateDTO,
      options?: any
    ): AxiosPromise<ModuleOutputDTOAPI> {
      return localVarFp
        .moduleControllerCreate(moduleCreateDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moduleControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<ModuleOutputDTOAPI> {
      return localVarFp
        .moduleControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moduleControllerRemove(
      id: string,
      options?: any
    ): AxiosPromise<IdUuidDTOAPI> {
      return localVarFp
        .moduleControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {ModuleSearchInputDTO} [moduleSearchInputDTO] ModuleSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moduleControllerSearch(
      moduleSearchInputDTO?: ModuleSearchInputDTO,
      options?: any
    ): AxiosPromise<ModuleOutputArrayDTOAPI> {
      return localVarFp
        .moduleControllerSearch(moduleSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {ModuleUpdateDTO} [moduleUpdateDTO] ModuleUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moduleControllerUpdate(
      id: string,
      moduleUpdateDTO?: ModuleUpdateDTO,
      options?: any
    ): AxiosPromise<ModuleOutputDTOAPI> {
      return localVarFp
        .moduleControllerUpdate(id, moduleUpdateDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ModuleApi - object-oriented interface
 * @export
 * @class ModuleApi
 * @extends {BaseAPI}
 */
export class ModuleApi extends BaseAPI {
  /**
   *
   * @summary Create
   * @param {ModuleCreateDTO} [moduleCreateDTO] ModuleCreateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModuleApi
   */
  public moduleControllerCreate(
    moduleCreateDTO?: ModuleCreateDTO,
    options?: AxiosRequestConfig
  ) {
    return ModuleApiFp(this.configuration)
      .moduleControllerCreate(moduleCreateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModuleApi
   */
  public moduleControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return ModuleApiFp(this.configuration)
      .moduleControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModuleApi
   */
  public moduleControllerRemove(id: string, options?: AxiosRequestConfig) {
    return ModuleApiFp(this.configuration)
      .moduleControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {ModuleSearchInputDTO} [moduleSearchInputDTO] ModuleSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModuleApi
   */
  public moduleControllerSearch(
    moduleSearchInputDTO?: ModuleSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return ModuleApiFp(this.configuration)
      .moduleControllerSearch(moduleSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {ModuleUpdateDTO} [moduleUpdateDTO] ModuleUpdateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ModuleApi
   */
  public moduleControllerUpdate(
    id: string,
    moduleUpdateDTO?: ModuleUpdateDTO,
    options?: AxiosRequestConfig
  ) {
    return ModuleApiFp(this.configuration)
      .moduleControllerUpdate(id, moduleUpdateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PlayerApi - axios parameter creator
 * @export
 */
export const PlayerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playerControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('playerControllerGetOne', 'id', id);
      const localVarPath = `/player/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {PlayerSearchInputDTO} [playerSearchInputDTO] PlayerSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playerControllerSearch: async (
      playerSearchInputDTO?: PlayerSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/player/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        playerSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PlayerApi - functional programming interface
 * @export
 */
export const PlayerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PlayerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playerControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PlayerOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.playerControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {PlayerSearchInputDTO} [playerSearchInputDTO] PlayerSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playerControllerSearch(
      playerSearchInputDTO?: PlayerSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PlayerOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.playerControllerSearch(
          playerSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PlayerApi - factory interface
 * @export
 */
export const PlayerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PlayerApiFp(configuration);
  return {
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playerControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<PlayerOutputDTOAPI> {
      return localVarFp
        .playerControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {PlayerSearchInputDTO} [playerSearchInputDTO] PlayerSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playerControllerSearch(
      playerSearchInputDTO?: PlayerSearchInputDTO,
      options?: any
    ): AxiosPromise<PlayerOutputArrayDTOAPI> {
      return localVarFp
        .playerControllerSearch(playerSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PlayerApi - object-oriented interface
 * @export
 * @class PlayerApi
 * @extends {BaseAPI}
 */
export class PlayerApi extends BaseAPI {
  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayerApi
   */
  public playerControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return PlayerApiFp(this.configuration)
      .playerControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {PlayerSearchInputDTO} [playerSearchInputDTO] PlayerSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayerApi
   */
  public playerControllerSearch(
    playerSearchInputDTO?: PlayerSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return PlayerApiFp(this.configuration)
      .playerControllerSearch(playerSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create
     * @param {RoleCreateInputDTO} [roleCreateInputDTO] RoleCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerCreate: async (
      roleCreateInputDTO?: RoleCreateInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/role`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleCreateInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roleControllerGetOne', 'id', id);
      const localVarPath = `/role/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roleControllerRemove', 'id', id);
      const localVarPath = `/role/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {RoleSearchInputDTO} [roleSearchInputDTO] RoleSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerSearch: async (
      roleSearchInputDTO?: RoleSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/role/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {RoleUpdateInputDTO} [roleUpdateInputDTO] RoleUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerUpdate: async (
      id: string,
      roleUpdateInputDTO?: RoleUpdateInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('roleControllerUpdate', 'id', id);
      const localVarPath = `/role/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleUpdateInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {RoleCreateInputDTO} [roleCreateInputDTO] RoleCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleControllerCreate(
      roleCreateInputDTO?: RoleCreateInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.roleControllerCreate(
          roleCreateInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.roleControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdUuidDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.roleControllerRemove(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {RoleSearchInputDTO} [roleSearchInputDTO] RoleSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleControllerSearch(
      roleSearchInputDTO?: RoleSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.roleControllerSearch(
          roleSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {RoleUpdateInputDTO} [roleUpdateInputDTO] RoleUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async roleControllerUpdate(
      id: string,
      roleUpdateInputDTO?: RoleUpdateInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.roleControllerUpdate(
          id,
          roleUpdateInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RoleApiFp(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {RoleCreateInputDTO} [roleCreateInputDTO] RoleCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerCreate(
      roleCreateInputDTO?: RoleCreateInputDTO,
      options?: any
    ): AxiosPromise<RoleOutputDTOAPI> {
      return localVarFp
        .roleControllerCreate(roleCreateInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<RoleOutputDTOAPI> {
      return localVarFp
        .roleControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerRemove(
      id: string,
      options?: any
    ): AxiosPromise<IdUuidDTOAPI> {
      return localVarFp
        .roleControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {RoleSearchInputDTO} [roleSearchInputDTO] RoleSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerSearch(
      roleSearchInputDTO?: RoleSearchInputDTO,
      options?: any
    ): AxiosPromise<RoleOutputArrayDTOAPI> {
      return localVarFp
        .roleControllerSearch(roleSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {RoleUpdateInputDTO} [roleUpdateInputDTO] RoleUpdateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleControllerUpdate(
      id: string,
      roleUpdateInputDTO?: RoleUpdateInputDTO,
      options?: any
    ): AxiosPromise<RoleOutputDTOAPI> {
      return localVarFp
        .roleControllerUpdate(id, roleUpdateInputDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI {
  /**
   *
   * @summary Create
   * @param {RoleCreateInputDTO} [roleCreateInputDTO] RoleCreateInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public roleControllerCreate(
    roleCreateInputDTO?: RoleCreateInputDTO,
    options?: AxiosRequestConfig
  ) {
    return RoleApiFp(this.configuration)
      .roleControllerCreate(roleCreateInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public roleControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .roleControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public roleControllerRemove(id: string, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .roleControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {RoleSearchInputDTO} [roleSearchInputDTO] RoleSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public roleControllerSearch(
    roleSearchInputDTO?: RoleSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return RoleApiFp(this.configuration)
      .roleControllerSearch(roleSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {RoleUpdateInputDTO} [roleUpdateInputDTO] RoleUpdateInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public roleControllerUpdate(
    id: string,
    roleUpdateInputDTO?: RoleUpdateInputDTO,
    options?: AxiosRequestConfig
  ) {
    return RoleApiFp(this.configuration)
      .roleControllerUpdate(id, roleUpdateInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get
     * @param {Array<'commandPrefix' | 'serverChatName'>} [keys]
     * @param {string} [gameServerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerGet: async (
      keys?: Array<'commandPrefix' | 'serverChatName'>,
      gameServerId?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/settings`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      if (keys) {
        localVarQueryParameter['keys'] = keys;
      }

      if (gameServerId !== undefined) {
        localVarQueryParameter['gameServerId'] = gameServerId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} key
     * @param {string} [gameServerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerGetOne: async (
      key: string,
      gameServerId?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'key' is not null or undefined
      assertParamExists('settingsControllerGetOne', 'key', key);
      const localVarPath = `/settings/{key}`.replace(
        `{${'key'}}`,
        encodeURIComponent(String(key))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      if (gameServerId !== undefined) {
        localVarQueryParameter['gameServerId'] = gameServerId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Set
     * @param {string} key
     * @param {SettingsSetDTO} [settingsSetDTO] SettingsSetDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerSet: async (
      key: string,
      settingsSetDTO?: SettingsSetDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'key' is not null or undefined
      assertParamExists('settingsControllerSet', 'key', key);
      const localVarPath = `/settings/{key}`.replace(
        `{${'key'}}`,
        encodeURIComponent(String(key))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        settingsSetDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get
     * @param {Array<'commandPrefix' | 'serverChatName'>} [keys]
     * @param {string} [gameServerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async settingsControllerGet(
      keys?: Array<'commandPrefix' | 'serverChatName'>,
      gameServerId?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SettingsOutputObjectDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.settingsControllerGet(
          keys,
          gameServerId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} key
     * @param {string} [gameServerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async settingsControllerGetOne(
      key: string,
      gameServerId?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SettingsOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.settingsControllerGetOne(
          key,
          gameServerId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Set
     * @param {string} key
     * @param {SettingsSetDTO} [settingsSetDTO] SettingsSetDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async settingsControllerSet(
      key: string,
      settingsSetDTO?: SettingsSetDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SettingsOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.settingsControllerSet(
          key,
          settingsSetDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SettingsApiFp(configuration);
  return {
    /**
     *
     * @summary Get
     * @param {Array<'commandPrefix' | 'serverChatName'>} [keys]
     * @param {string} [gameServerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerGet(
      keys?: Array<'commandPrefix' | 'serverChatName'>,
      gameServerId?: string,
      options?: any
    ): AxiosPromise<SettingsOutputObjectDTOAPI> {
      return localVarFp
        .settingsControllerGet(keys, gameServerId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} key
     * @param {string} [gameServerId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerGetOne(
      key: string,
      gameServerId?: string,
      options?: any
    ): AxiosPromise<SettingsOutputDTOAPI> {
      return localVarFp
        .settingsControllerGetOne(key, gameServerId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Set
     * @param {string} key
     * @param {SettingsSetDTO} [settingsSetDTO] SettingsSetDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    settingsControllerSet(
      key: string,
      settingsSetDTO?: SettingsSetDTO,
      options?: any
    ): AxiosPromise<SettingsOutputDTOAPI> {
      return localVarFp
        .settingsControllerSet(key, settingsSetDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
  /**
   *
   * @summary Get
   * @param {Array<'commandPrefix' | 'serverChatName'>} [keys]
   * @param {string} [gameServerId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public settingsControllerGet(
    keys?: Array<'commandPrefix' | 'serverChatName'>,
    gameServerId?: string,
    options?: AxiosRequestConfig
  ) {
    return SettingsApiFp(this.configuration)
      .settingsControllerGet(keys, gameServerId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} key
   * @param {string} [gameServerId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public settingsControllerGetOne(
    key: string,
    gameServerId?: string,
    options?: AxiosRequestConfig
  ) {
    return SettingsApiFp(this.configuration)
      .settingsControllerGetOne(key, gameServerId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Set
   * @param {string} key
   * @param {SettingsSetDTO} [settingsSetDTO] SettingsSetDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SettingsApi
   */
  public settingsControllerSet(
    key: string,
    settingsSetDTO?: SettingsSetDTO,
    options?: AxiosRequestConfig
  ) {
    return SettingsApiFp(this.configuration)
      .settingsControllerSet(key, settingsSetDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Assign role
     * @param {string} id
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerAssignRole: async (
      id: string,
      roleId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerAssignRole', 'id', id);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('userControllerAssignRole', 'roleId', roleId);
      const localVarPath = `/user/{id}/role/{roleId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create
     * @param {UserCreateInputDTO} [userCreateInputDTO] UserCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerCreate: async (
      userCreateInputDTO?: UserCreateInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userCreateInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerGetOne', 'id', id);
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Login
     * @param {LoginDTO} [loginDTO] LoginDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerLogin: async (
      loginDTO?: LoginDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerLogout: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerMe: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerRemove', 'id', id);
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove role
     * @param {string} id
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerRemoveRole: async (
      id: string,
      roleId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerRemoveRole', 'id', id);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('userControllerRemoveRole', 'roleId', roleId);
      const localVarPath = `/user/{id}/role/{roleId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search
     * @param {UserSearchInputDTO} [userSearchInputDTO] UserSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerSearch: async (
      userSearchInputDTO?: UserSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {UserUpdateDTO} [userUpdateDTO] UserUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerUpdate: async (
      id: string,
      userUpdateDTO?: UserUpdateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerUpdate', 'id', id);
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userUpdateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Assign role
     * @param {string} id
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerAssignRole(
      id: string,
      roleId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerAssignRole(
          id,
          roleId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create
     * @param {UserCreateInputDTO} [userCreateInputDTO] UserCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerCreate(
      userCreateInputDTO?: UserCreateInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerCreate(
          userCreateInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerGetOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerGetOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Login
     * @param {LoginDTO} [loginDTO] LoginDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerLogin(
      loginDTO?: LoginDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LoginOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerLogin(loginDTO, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerLogout(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerLogout(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerMe(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerMe(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdUuidDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerRemove(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove role
     * @param {string} id
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerRemoveRole(
      id: string,
      roleId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerRemoveRole(
          id,
          roleId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Search
     * @param {UserSearchInputDTO} [userSearchInputDTO] UserSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerSearch(
      userSearchInputDTO?: UserSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerSearch(
          userSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {UserUpdateDTO} [userUpdateDTO] UserUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerUpdate(
      id: string,
      userUpdateDTO?: UserUpdateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.userControllerUpdate(
          id,
          userUpdateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @summary Assign role
     * @param {string} id
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerAssignRole(
      id: string,
      roleId: string,
      options?: any
    ): AxiosPromise<APIOutput> {
      return localVarFp
        .userControllerAssignRole(id, roleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create
     * @param {UserCreateInputDTO} [userCreateInputDTO] UserCreateInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerCreate(
      userCreateInputDTO?: UserCreateInputDTO,
      options?: any
    ): AxiosPromise<UserOutputDTOAPI> {
      return localVarFp
        .userControllerCreate(userCreateInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetOne(
      id: string,
      options?: any
    ): AxiosPromise<UserOutputDTOAPI> {
      return localVarFp
        .userControllerGetOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Login
     * @param {LoginDTO} [loginDTO] LoginDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerLogin(
      loginDTO?: LoginDTO,
      options?: any
    ): AxiosPromise<LoginOutputDTOAPI> {
      return localVarFp
        .userControllerLogin(loginDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerLogout(options?: any): AxiosPromise<APIOutput> {
      return localVarFp
        .userControllerLogout(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerMe(options?: any): AxiosPromise<UserOutputDTOAPI> {
      return localVarFp
        .userControllerMe(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerRemove(
      id: string,
      options?: any
    ): AxiosPromise<IdUuidDTOAPI> {
      return localVarFp
        .userControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove role
     * @param {string} id
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerRemoveRole(
      id: string,
      roleId: string,
      options?: any
    ): AxiosPromise<APIOutput> {
      return localVarFp
        .userControllerRemoveRole(id, roleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search
     * @param {UserSearchInputDTO} [userSearchInputDTO] UserSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerSearch(
      userSearchInputDTO?: UserSearchInputDTO,
      options?: any
    ): AxiosPromise<UserOutputArrayDTOAPI> {
      return localVarFp
        .userControllerSearch(userSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {UserUpdateDTO} [userUpdateDTO] UserUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerUpdate(
      id: string,
      userUpdateDTO?: UserUpdateDTO,
      options?: any
    ): AxiosPromise<UserOutputDTOAPI> {
      return localVarFp
        .userControllerUpdate(id, userUpdateDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Assign role
   * @param {string} id
   * @param {string} roleId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerAssignRole(
    id: string,
    roleId: string,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .userControllerAssignRole(id, roleId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create
   * @param {UserCreateInputDTO} [userCreateInputDTO] UserCreateInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerCreate(
    userCreateInputDTO?: UserCreateInputDTO,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .userControllerCreate(userCreateInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerGetOne(id: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .userControllerGetOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Login
   * @param {LoginDTO} [loginDTO] LoginDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerLogin(
    loginDTO?: LoginDTO,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .userControllerLogin(loginDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Logout
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerLogout(options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .userControllerLogout(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Me
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerMe(options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .userControllerMe(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerRemove(id: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .userControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove role
   * @param {string} id
   * @param {string} roleId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerRemoveRole(
    id: string,
    roleId: string,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .userControllerRemoveRole(id, roleId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search
   * @param {UserSearchInputDTO} [userSearchInputDTO] UserSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerSearch(
    userSearchInputDTO?: UserSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .userControllerSearch(userSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {UserUpdateDTO} [userUpdateDTO] UserUpdateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerUpdate(
    id: string,
    userUpdateDTO?: UserUpdateDTO,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .userControllerUpdate(id, userUpdateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * VariableApi - axios parameter creator
 * @export
 */
export const VariableApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create
     * @param {VariableCreateDTO} [variableCreateDTO] VariableCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variableControllerCreate: async (
      variableCreateDTO?: VariableCreateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/variables`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        variableCreateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variableControllerDelete: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('variableControllerDelete', 'id', id);
      const localVarPath = `/variables/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Find
     * @param {VariableSearchInputDTO} [variableSearchInputDTO] VariableSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variableControllerFind: async (
      variableSearchInputDTO?: VariableSearchInputDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/variables/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        variableSearchInputDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Find one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variableControllerFindOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('variableControllerFindOne', 'id', id);
      const localVarPath = `/variables/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {VariableUpdateDTO} [variableUpdateDTO] VariableUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variableControllerUpdate: async (
      id: string,
      variableUpdateDTO?: VariableUpdateDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('variableControllerUpdate', 'id', id);
      const localVarPath = `/variables/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication domainAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        variableUpdateDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * VariableApi - functional programming interface
 * @export
 */
export const VariableApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = VariableApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {VariableCreateDTO} [variableCreateDTO] VariableCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async variableControllerCreate(
      variableCreateDTO?: VariableCreateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<VariableOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.variableControllerCreate(
          variableCreateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async variableControllerDelete(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdUuidDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.variableControllerDelete(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Find
     * @param {VariableSearchInputDTO} [variableSearchInputDTO] VariableSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async variableControllerFind(
      variableSearchInputDTO?: VariableSearchInputDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<VariableOutputArrayDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.variableControllerFind(
          variableSearchInputDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Find one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async variableControllerFindOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<VariableOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.variableControllerFindOne(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {VariableUpdateDTO} [variableUpdateDTO] VariableUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async variableControllerUpdate(
      id: string,
      variableUpdateDTO?: VariableUpdateDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<VariableOutputDTOAPI>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.variableControllerUpdate(
          id,
          variableUpdateDTO,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * VariableApi - factory interface
 * @export
 */
export const VariableApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = VariableApiFp(configuration);
  return {
    /**
     *
     * @summary Create
     * @param {VariableCreateDTO} [variableCreateDTO] VariableCreateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variableControllerCreate(
      variableCreateDTO?: VariableCreateDTO,
      options?: any
    ): AxiosPromise<VariableOutputDTOAPI> {
      return localVarFp
        .variableControllerCreate(variableCreateDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variableControllerDelete(
      id: string,
      options?: any
    ): AxiosPromise<IdUuidDTOAPI> {
      return localVarFp
        .variableControllerDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Find
     * @param {VariableSearchInputDTO} [variableSearchInputDTO] VariableSearchInputDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variableControllerFind(
      variableSearchInputDTO?: VariableSearchInputDTO,
      options?: any
    ): AxiosPromise<VariableOutputArrayDTOAPI> {
      return localVarFp
        .variableControllerFind(variableSearchInputDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Find one
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variableControllerFindOne(
      id: string,
      options?: any
    ): AxiosPromise<VariableOutputDTOAPI> {
      return localVarFp
        .variableControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update
     * @param {string} id
     * @param {VariableUpdateDTO} [variableUpdateDTO] VariableUpdateDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    variableControllerUpdate(
      id: string,
      variableUpdateDTO?: VariableUpdateDTO,
      options?: any
    ): AxiosPromise<VariableOutputDTOAPI> {
      return localVarFp
        .variableControllerUpdate(id, variableUpdateDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * VariableApi - object-oriented interface
 * @export
 * @class VariableApi
 * @extends {BaseAPI}
 */
export class VariableApi extends BaseAPI {
  /**
   *
   * @summary Create
   * @param {VariableCreateDTO} [variableCreateDTO] VariableCreateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariableApi
   */
  public variableControllerCreate(
    variableCreateDTO?: VariableCreateDTO,
    options?: AxiosRequestConfig
  ) {
    return VariableApiFp(this.configuration)
      .variableControllerCreate(variableCreateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariableApi
   */
  public variableControllerDelete(id: string, options?: AxiosRequestConfig) {
    return VariableApiFp(this.configuration)
      .variableControllerDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Find
   * @param {VariableSearchInputDTO} [variableSearchInputDTO] VariableSearchInputDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariableApi
   */
  public variableControllerFind(
    variableSearchInputDTO?: VariableSearchInputDTO,
    options?: AxiosRequestConfig
  ) {
    return VariableApiFp(this.configuration)
      .variableControllerFind(variableSearchInputDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Find one
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariableApi
   */
  public variableControllerFindOne(id: string, options?: AxiosRequestConfig) {
    return VariableApiFp(this.configuration)
      .variableControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update
   * @param {string} id
   * @param {VariableUpdateDTO} [variableUpdateDTO] VariableUpdateDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VariableApi
   */
  public variableControllerUpdate(
    id: string,
    variableUpdateDTO?: VariableUpdateDTO,
    options?: AxiosRequestConfig
  ) {
    return VariableApiFp(this.configuration)
      .variableControllerUpdate(id, variableUpdateDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

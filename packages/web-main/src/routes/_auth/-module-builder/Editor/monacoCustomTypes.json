{"file://node_modules/axios/package.json":"{\"name\":\"axios\",\"types\":\"./index.d.ts\"}","file://node_modules/axios/index.d.ts":"// TypeScript Version: 4.7\ntype AxiosHeaderValue = AxiosHeaders | string | string[] | number | boolean | null;\n\ninterface RawAxiosHeaders {\n  [key: string]: AxiosHeaderValue;\n}\n\ntype MethodsHeaders = Partial<{\n  [Key in Method as Lowercase<Key>]: AxiosHeaders;\n} & {common: AxiosHeaders}>;\n\ntype AxiosHeaderMatcher = string | RegExp | ((this: AxiosHeaders, value: string, name: string) => boolean);\n\ntype AxiosHeaderParser = (this: AxiosHeaders, value: AxiosHeaderValue, header: string) => any;\n\nclass AxiosHeaders {\n  constructor(\n      headers?: RawAxiosHeaders | AxiosHeaders | string\n  );\n\n  [key: string]: any;\n\n  set(headerName?: string, value?: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  set(headers?: RawAxiosHeaders | AxiosHeaders | string, rewrite?: boolean): AxiosHeaders;\n\n  get(headerName: string, parser: RegExp): RegExpExecArray | null;\n  get(headerName: string, matcher?: true | AxiosHeaderParser): AxiosHeaderValue;\n\n  has(header: string, matcher?: AxiosHeaderMatcher): boolean;\n\n  delete(header: string | string[], matcher?: AxiosHeaderMatcher): boolean;\n\n  clear(matcher?: AxiosHeaderMatcher): boolean;\n\n  normalize(format: boolean): AxiosHeaders;\n\n  concat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n\n  toJSON(asStrings?: boolean): RawAxiosHeaders;\n\n  static from(thing?: AxiosHeaders | RawAxiosHeaders | string): AxiosHeaders;\n\n  static accessor(header: string | string[]): AxiosHeaders;\n\n  static concat(...targets: Array<AxiosHeaders | RawAxiosHeaders | string | undefined | null>): AxiosHeaders;\n\n  setContentType(value: ContentType, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  getContentType(parser?: RegExp): RegExpExecArray | null;\n  getContentType(matcher?: AxiosHeaderMatcher): AxiosHeaderValue;\n  hasContentType(matcher?: AxiosHeaderMatcher): boolean;\n\n  setContentLength(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  getContentLength(parser?: RegExp): RegExpExecArray | null;\n  getContentLength(matcher?: AxiosHeaderMatcher): AxiosHeaderValue;\n  hasContentLength(matcher?: AxiosHeaderMatcher): boolean;\n\n  setAccept(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  getAccept(parser?: RegExp): RegExpExecArray | null;\n  getAccept(matcher?: AxiosHeaderMatcher): AxiosHeaderValue;\n  hasAccept(matcher?: AxiosHeaderMatcher): boolean;\n\n  setUserAgent(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  getUserAgent(parser?: RegExp): RegExpExecArray | null;\n  getUserAgent(matcher?: AxiosHeaderMatcher): AxiosHeaderValue;\n  hasUserAgent(matcher?: AxiosHeaderMatcher): boolean;\n\n  setContentEncoding(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  getContentEncoding(parser?: RegExp): RegExpExecArray | null;\n  getContentEncoding(matcher?: AxiosHeaderMatcher): AxiosHeaderValue;\n  hasContentEncoding(matcher?: AxiosHeaderMatcher): boolean;\n\n  setAuthorization(value: AxiosHeaderValue, rewrite?: boolean | AxiosHeaderMatcher): AxiosHeaders;\n  getAuthorization(parser?: RegExp): RegExpExecArray | null;\n  getAuthorization(matcher?: AxiosHeaderMatcher): AxiosHeaderValue;\n  hasAuthorization(matcher?: AxiosHeaderMatcher): boolean;\n\n  [Symbol.iterator](): IterableIterator<[string, AxiosHeaderValue]>;\n}\n\ntype CommonRequestHeadersList = 'Accept' | 'Content-Length' | 'User-Agent' | 'Content-Encoding' | 'Authorization';\n\ntype ContentType = AxiosHeaderValue | 'text/html' | 'text/plain' | 'multipart/form-data' | 'application/json' | 'application/x-www-form-urlencoded' | 'application/octet-stream';\n\ntype RawAxiosRequestHeaders = Partial<RawAxiosHeaders & {\n  [Key in CommonRequestHeadersList]: AxiosHeaderValue;\n} & {\n  'Content-Type': ContentType\n}>;\n\ntype AxiosRequestHeaders = RawAxiosRequestHeaders & AxiosHeaders;\n\ntype CommonResponseHeadersList = 'Server' | 'Content-Type' | 'Content-Length' | 'Cache-Control'| 'Content-Encoding';\n\ntype RawCommonResponseHeaders = {\n  [Key in CommonResponseHeadersList]: AxiosHeaderValue;\n} & {\n  \"set-cookie\": string[];\n};\n\ntype RawAxiosResponseHeaders = Partial<RawAxiosHeaders & RawCommonResponseHeaders>;\n\ntype AxiosResponseHeaders = RawAxiosResponseHeaders & AxiosHeaders;\n\ninterface AxiosRequestTransformer {\n  (this: InternalAxiosRequestConfig, data: any, headers: AxiosRequestHeaders): any;\n}\n\ninterface AxiosResponseTransformer {\n  (this: InternalAxiosRequestConfig, data: any, headers: AxiosResponseHeaders, status?: number): any;\n}\n\ninterface AxiosAdapter {\n  (config: InternalAxiosRequestConfig): AxiosPromise;\n}\n\ninterface AxiosBasicCredentials {\n  username: string;\n  password: string;\n}\n\ninterface AxiosProxyConfig {\n  host: string;\n  port: number;\n  auth?: AxiosBasicCredentials;\n  protocol?: string;\n}\n\nenum HttpStatusCode {\n  Continue = 100,\n  SwitchingProtocols = 101,\n  Processing = 102,\n  EarlyHints = 103,\n  Ok = 200,\n  Created = 201,\n  Accepted = 202,\n  NonAuthoritativeInformation = 203,\n  NoContent = 204,\n  ResetContent = 205,\n  PartialContent = 206,\n  MultiStatus = 207,\n  AlreadyReported = 208,\n  ImUsed = 226,\n  MultipleChoices = 300,\n  MovedPermanently = 301,\n  Found = 302,\n  SeeOther = 303,\n  NotModified = 304,\n  UseProxy = 305,\n  Unused = 306,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  PreconditionFailed = 412,\n  PayloadTooLarge = 413,\n  UriTooLong = 414,\n  UnsupportedMediaType = 415,\n  RangeNotSatisfiable = 416,\n  ExpectationFailed = 417,\n  ImATeapot = 418,\n  MisdirectedRequest = 421,\n  UnprocessableEntity = 422,\n  Locked = 423,\n  FailedDependency = 424,\n  TooEarly = 425,\n  UpgradeRequired = 426,\n  PreconditionRequired = 428,\n  TooManyRequests = 429,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n  InternalServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  HttpVersionNotSupported = 505,\n  VariantAlsoNegotiates = 506,\n  InsufficientStorage = 507,\n  LoopDetected = 508,\n  NotExtended = 510,\n  NetworkAuthenticationRequired = 511,\n}\n\ntype Method =\n    | 'get' | 'GET'\n    | 'delete' | 'DELETE'\n    | 'head' | 'HEAD'\n    | 'options' | 'OPTIONS'\n    | 'post' | 'POST'\n    | 'put' | 'PUT'\n    | 'patch' | 'PATCH'\n    | 'purge' | 'PURGE'\n    | 'link' | 'LINK'\n    | 'unlink' | 'UNLINK';\n\ntype ResponseType =\n    | 'arraybuffer'\n    | 'blob'\n    | 'document'\n    | 'json'\n    | 'text'\n    | 'stream'\n    | 'formdata';\n\ntype responseEncoding =\n    | 'ascii' | 'ASCII'\n    | 'ansi' | 'ANSI'\n    | 'binary' | 'BINARY'\n    | 'base64' | 'BASE64'\n    | 'base64url' | 'BASE64URL'\n    | 'hex' | 'HEX'\n    | 'latin1' | 'LATIN1'\n    | 'ucs-2' | 'UCS-2'\n    | 'ucs2' | 'UCS2'\n    | 'utf-8' | 'UTF-8'\n    | 'utf8' | 'UTF8'\n    | 'utf16le' | 'UTF16LE';\n\ninterface TransitionalOptions {\n  silentJSONParsing?: boolean;\n  forcedJSONParsing?: boolean;\n  clarifyTimeoutError?: boolean;\n}\n\ninterface GenericAbortSignal {\n  readonly aborted: boolean;\n  onabort?: ((...args: any) => any) | null;\n  addEventListener?: (...args: any) => any;\n  removeEventListener?: (...args: any) => any;\n}\n\ninterface FormDataVisitorHelpers {\n  defaultVisitor: SerializerVisitor;\n  convertValue: (value: any) => any;\n  isVisitable: (value: any) => boolean;\n}\n\ninterface SerializerVisitor {\n  (\n      this: GenericFormData,\n      value: any,\n      key: string | number,\n      path: null | Array<string | number>,\n      helpers: FormDataVisitorHelpers\n  ): boolean;\n}\n\ninterface SerializerOptions {\n  visitor?: SerializerVisitor;\n  dots?: boolean;\n  metaTokens?: boolean;\n  indexes?: boolean | null;\n}\n\n// tslint:disable-next-line\ninterface FormSerializerOptions extends SerializerOptions {\n}\n\ninterface ParamEncoder {\n  (value: any, defaultEncoder: (value: any) => any): any;\n}\n\ninterface CustomParamsSerializer {\n  (params: Record<string, any>, options?: ParamsSerializerOptions): string;\n}\n\ninterface ParamsSerializerOptions extends SerializerOptions {\n  encode?: ParamEncoder;\n  serialize?: CustomParamsSerializer;\n}\n\ntype MaxUploadRate = number;\n\ntype MaxDownloadRate = number;\n\ntype BrowserProgressEvent = any;\n\ninterface AxiosProgressEvent {\n  loaded: number;\n  total?: number;\n  progress?: number;\n  bytes: number;\n  rate?: number;\n  estimated?: number;\n  upload?: boolean;\n  download?: boolean;\n  event?: BrowserProgressEvent;\n  lengthComputable: boolean;\n}\n\ntype Milliseconds = number;\n\ntype AxiosAdapterName = 'fetch' | 'xhr' | 'http' | string;\n\ntype AxiosAdapterConfig = AxiosAdapter | AxiosAdapterName;\n\ntype AddressFamily = 4 | 6 | undefined;\n\ninterface LookupAddressEntry {\n  address: string;\n  family?: AddressFamily;\n}\n\ntype LookupAddress = string | LookupAddressEntry;\n\ninterface AxiosRequestConfig<D = any> {\n  url?: string;\n  method?: Method | string;\n  baseURL?: string;\n  transformRequest?: AxiosRequestTransformer | AxiosRequestTransformer[];\n  transformResponse?: AxiosResponseTransformer | AxiosResponseTransformer[];\n  headers?: (RawAxiosRequestHeaders & MethodsHeaders) | AxiosHeaders;\n  params?: any;\n  paramsSerializer?: ParamsSerializerOptions | CustomParamsSerializer;\n  data?: D;\n  timeout?: Milliseconds;\n  timeoutErrorMessage?: string;\n  withCredentials?: boolean;\n  adapter?: AxiosAdapterConfig | AxiosAdapterConfig[];\n  auth?: AxiosBasicCredentials;\n  responseType?: ResponseType;\n  responseEncoding?: responseEncoding | string;\n  xsrfCookieName?: string;\n  xsrfHeaderName?: string;\n  onUploadProgress?: (progressEvent: AxiosProgressEvent) => void;\n  onDownloadProgress?: (progressEvent: AxiosProgressEvent) => void;\n  maxContentLength?: number;\n  validateStatus?: ((status: number) => boolean) | null;\n  maxBodyLength?: number;\n  maxRedirects?: number;\n  maxRate?: number | [MaxUploadRate, MaxDownloadRate];\n  beforeRedirect?: (options: Record<string, any>, responseDetails: {headers: Record<string, string>, statusCode: HttpStatusCode}) => void;\n  socketPath?: string | null;\n  transport?: any;\n  httpAgent?: any;\n  httpsAgent?: any;\n  proxy?: AxiosProxyConfig | false;\n  cancelToken?: CancelToken;\n  decompress?: boolean;\n  transitional?: TransitionalOptions;\n  signal?: GenericAbortSignal;\n  insecureHTTPParser?: boolean;\n  env?: {\n    FormData?: new (...args: any[]) => object;\n  };\n  formSerializer?: FormSerializerOptions;\n  family?: AddressFamily;\n  lookup?: ((hostname: string, options: object, cb: (err: Error | null, address: LookupAddress | LookupAddress[], family?: AddressFamily) => void) => void) |\n      ((hostname: string, options: object) => Promise<[address: LookupAddressEntry | LookupAddressEntry[], family?: AddressFamily] | LookupAddress>);\n  withXSRFToken?: boolean | ((config: InternalAxiosRequestConfig) => boolean | undefined);\n  fetchOptions?: Record<string, any>;\n}\n\n// Alias\ntype RawAxiosRequestConfig<D = any> = AxiosRequestConfig<D>;\n\ninterface InternalAxiosRequestConfig<D = any> extends AxiosRequestConfig<D> {\n  headers: AxiosRequestHeaders;\n}\n\ninterface HeadersDefaults {\n  common: RawAxiosRequestHeaders;\n  delete: RawAxiosRequestHeaders;\n  get: RawAxiosRequestHeaders;\n  head: RawAxiosRequestHeaders;\n  post: RawAxiosRequestHeaders;\n  put: RawAxiosRequestHeaders;\n  patch: RawAxiosRequestHeaders;\n  options?: RawAxiosRequestHeaders;\n  purge?: RawAxiosRequestHeaders;\n  link?: RawAxiosRequestHeaders;\n  unlink?: RawAxiosRequestHeaders;\n}\n\ninterface AxiosDefaults<D = any> extends Omit<AxiosRequestConfig<D>, 'headers'> {\n  headers: HeadersDefaults;\n}\n\ninterface CreateAxiosDefaults<D = any> extends Omit<AxiosRequestConfig<D>, 'headers'> {\n  headers?: RawAxiosRequestHeaders | AxiosHeaders | Partial<HeadersDefaults>;\n}\n\ninterface AxiosResponse<T = any, D = any> {\n  data: T;\n  status: number;\n  statusText: string;\n  headers: RawAxiosResponseHeaders | AxiosResponseHeaders;\n  config: InternalAxiosRequestConfig<D>;\n  request?: any;\n}\n\nclass AxiosError<T = unknown, D = any> extends Error {\n  constructor(\n      message?: string,\n      code?: string,\n      config?: InternalAxiosRequestConfig<D>,\n      request?: any,\n      response?: AxiosResponse<T, D>\n  );\n\n  config?: InternalAxiosRequestConfig<D>;\n  code?: string;\n  request?: any;\n  response?: AxiosResponse<T, D>;\n  isAxiosError: boolean;\n  status?: number;\n  toJSON: () => object;\n  cause?: Error;\n  static from<T = unknown, D = any>(\n    error: Error | unknown,\n    code?: string,\n    config?: InternalAxiosRequestConfig<D>,\n    request?: any,\n    response?: AxiosResponse<T, D>,\n    customProps?: object,\n): AxiosError<T, D>;\n  static readonly ERR_FR_TOO_MANY_REDIRECTS = \"ERR_FR_TOO_MANY_REDIRECTS\";\n  static readonly ERR_BAD_OPTION_VALUE = \"ERR_BAD_OPTION_VALUE\";\n  static readonly ERR_BAD_OPTION = \"ERR_BAD_OPTION\";\n  static readonly ERR_NETWORK = \"ERR_NETWORK\";\n  static readonly ERR_DEPRECATED = \"ERR_DEPRECATED\";\n  static readonly ERR_BAD_RESPONSE = \"ERR_BAD_RESPONSE\";\n  static readonly ERR_BAD_REQUEST = \"ERR_BAD_REQUEST\";\n  static readonly ERR_NOT_SUPPORT = \"ERR_NOT_SUPPORT\";\n  static readonly ERR_INVALID_URL = \"ERR_INVALID_URL\";\n  static readonly ERR_CANCELED = \"ERR_CANCELED\";\n  static readonly ECONNABORTED = \"ECONNABORTED\";\n  static readonly ETIMEDOUT = \"ETIMEDOUT\";\n}\n\nclass CanceledError<T> extends AxiosError<T> {\n}\n\ntype AxiosPromise<T = any> = Promise<AxiosResponse<T>>;\n\ninterface CancelStatic {\n  new (message?: string): Cancel;\n}\n\ninterface Cancel {\n  message: string | undefined;\n}\n\ninterface Canceler {\n  (message?: string, config?: AxiosRequestConfig, request?: any): void;\n}\n\ninterface CancelTokenStatic {\n  new (executor: (cancel: Canceler) => void): CancelToken;\n  source(): CancelTokenSource;\n}\n\ninterface CancelToken {\n  promise: Promise<Cancel>;\n  reason?: Cancel;\n  throwIfRequested(): void;\n}\n\ninterface CancelTokenSource {\n  token: CancelToken;\n  cancel: Canceler;\n}\n\ninterface AxiosInterceptorOptions {\n  synchronous?: boolean;\n  runWhen?: (config: InternalAxiosRequestConfig) => boolean;\n}\n\ninterface AxiosInterceptorManager<V> {\n  use(onFulfilled?: ((value: V) => V | Promise<V>) | null, onRejected?: ((error: any) => any) | null, options?: AxiosInterceptorOptions): number;\n  eject(id: number): void;\n  clear(): void;\n}\n\nclass Axios {\n  constructor(config?: AxiosRequestConfig);\n  defaults: AxiosDefaults;\n  interceptors: {\n    request: AxiosInterceptorManager<InternalAxiosRequestConfig>;\n    response: AxiosInterceptorManager<AxiosResponse>;\n  };\n  getUri(config?: AxiosRequestConfig): string;\n  request<T = any, R = AxiosResponse<T>, D = any>(config: AxiosRequestConfig<D>): Promise<R>;\n  get<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;\n  delete<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;\n  head<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;\n  options<T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;\n  post<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;\n  put<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;\n  patch<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;\n  postForm<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;\n  putForm<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;\n  patchForm<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: AxiosRequestConfig<D>): Promise<R>;\n}\n\ninterface AxiosInstance extends Axios {\n  <T = any, R = AxiosResponse<T>, D = any>(config: AxiosRequestConfig<D>): Promise<R>;\n  <T = any, R = AxiosResponse<T>, D = any>(url: string, config?: AxiosRequestConfig<D>): Promise<R>;\n\n  defaults: Omit<AxiosDefaults, 'headers'> & {\n    headers: HeadersDefaults & {\n      [key: string]: AxiosHeaderValue\n    }\n  };\n}\n\ninterface GenericFormData {\n  append(name: string, value: any, options?: any): any;\n}\n\ninterface GenericHTMLFormElement {\n  name: string;\n  method: string;\n  submit(): void;\n}\n\nfunction getAdapter(adapters: AxiosAdapterConfig | AxiosAdapterConfig[] | undefined): AxiosAdapter;\n\nfunction toFormData(sourceObj: object, targetFormData?: GenericFormData, options?: FormSerializerOptions): GenericFormData;\n\nfunction formToJSON(form: GenericFormData|GenericHTMLFormElement): object;\n\nfunction isAxiosError<T = any, D = any>(payload: any): payload is AxiosError<T, D>;\n\nfunction spread<T, R>(callback: (...args: T[]) => R): (array: T[]) => R;\n\nfunction isCancel(value: any): value is Cancel;\n\nfunction all<T>(values: Array<T | Promise<T>>): Promise<T[]>;\n\ninterface AxiosStatic extends AxiosInstance {\n  create(config?: CreateAxiosDefaults): AxiosInstance;\n  Cancel: CancelStatic;\n  CancelToken: CancelTokenStatic;\n  Axios: typeof Axios;\n  AxiosError: typeof AxiosError;\n  HttpStatusCode: typeof HttpStatusCode;\n  readonly VERSION: string;\n  isCancel: typeof isCancel;\n  all: typeof all;\n  spread: typeof spread;\n  isAxiosError: typeof isAxiosError;\n  toFormData: typeof toFormData;\n  formToJSON: typeof formToJSON;\n  getAdapter: typeof getAdapter;\n  CanceledError: typeof CanceledError;\n  AxiosHeaders: typeof AxiosHeaders;\n}\n\ndeclare const axios: AxiosStatic;\n\ndefault axios;\n","file://node_modules/form-data/package.json":"{\"name\":\"form-data\",\"types\":\"./index.d.ts\"}","file://node_modules/form-data/index.d.ts":"// Definitions by: Carlos Ballesteros Velasco <https://github.com/soywiz>\n//                 Leon Yu <https://github.com/leonyu>\n//                 BendingBender <https://github.com/BendingBender>\n//                 Maple Miao <https://github.com/mapleeit>\n\n/// <reference types=\"node\" />\n\n= FormData;\n\n// Extracted because @types/node doesn't export interfaces.\ninterface ReadableOptions {\n  highWaterMark?: number;\n  encoding?: string;\n  objectMode?: boolean;\n  read?(this: stream.Readable, size: number): void;\n  destroy?(this: stream.Readable, error: Error | null, callback: (error: Error | null) => void): void;\n  autoDestroy?: boolean;\n}\n\ninterface Options extends ReadableOptions {\n  writable?: boolean;\n  readable?: boolean;\n  dataSize?: number;\n  maxDataSize?: number;\n  pauseStreams?: boolean;\n}\n\ndeclare class FormData extends stream.Readable {\n  constructor(options?: Options);\n  append(key: string, value: any, options?: FormData.AppendOptions | string): void;\n  getHeaders(userHeaders?: FormData.Headers): FormData.Headers;\n  submit(\n    params: string | FormData.SubmitOptions,\n    callback?: (error: Error | null, response: http.IncomingMessage) => void\n  ): http.ClientRequest;\n  getBuffer(): Buffer;\n  setBoundary(boundary: string): void;\n  getBoundary(): string;\n  getLength(callback: (err: Error | null, length: number) => void): void;\n  getLengthSync(): number;\n  hasKnownLength(): boolean;\n}\n\ndeclare namespace FormData {\n  interface Headers {\n    [key: string]: any;\n  }\n\n  interface AppendOptions {\n    header?: string | Headers;\n    knownLength?: number;\n    filename?: string;\n    filepath?: string;\n    contentType?: string;\n  }\n\n  interface SubmitOptions extends http.RequestOptions {\n    protocol?: 'https:' | 'http:';\n  }\n}\n","file://node_modules/@takaro/helpers/package.json":"{\"name\":\"@takaro/helpers\",\"types\":\"dist/main.d.ts\"}","file://node_modules/@takaro/helpers/dist/TakaroUserError.d.ts":"declare class TakaroUserError extends Error {\n    constructor(message: string);\n}\n//# sourceMappingURL=TakaroUserError.d.ts.map","file://node_modules/@takaro/helpers/dist/checkPermission.d.ts":"declare function checkPermission(player: PlayerOnGameserverOutputWithRolesDTO, permission: string): any;\n//# sourceMappingURL=checkPermission.d.ts.map","file://node_modules/@takaro/helpers/dist/config.d.ts":"interface IHelpersConfig extends IBaseConfig {\n    apiClient: {\n        token: string;\n        url: string;\n    };\n    data: string;\n}\ndeclare const config: Config<IHelpersConfig>;\n{};\n//# sourceMappingURL=config.d.ts.map","file://node_modules/@takaro/helpers/dist/getData.d.ts":"declare function getData(): any;\n//# sourceMappingURL=getData.d.ts.map","file://node_modules/@takaro/helpers/dist/getTakaro.d.ts":"declare function getTakaro(data: Record<string, any>, logger?: Pick<Console, 'log' | 'debug' | 'error' | 'warn' | 'info'>): {\n    takaro: Client;\n    data: Record<string, any>;\n};\n//# sourceMappingURL=getTakaro.d.ts.map","file://node_modules/@takaro/helpers/dist/main.d.ts":"{ getTakaro } from './getTakaro.js';\n{ checkPermission } from './checkPermission.js';\n{ nextCronJobRun } from './nextCronJobRun.js';\n{ TakaroUserError } from './TakaroUserError.js';\n* as _ from 'lodash-es';\n* as axios from 'axios';\ndeclare const takaro: Client;\n//# sourceMappingURL=main.d.ts.map","file://node_modules/@takaro/helpers/dist/nextCronJobRun.d.ts":"declare const nextCronJobRun: (cron: string) => Date | null;\n//# sourceMappingURL=nextCronJobRun.d.ts.map","file://node_modules/croner/package.json":"{\"name\":\"croner\",\"types\":\"./types/croner.d.ts\"}","file://node_modules/croner/./types/croner.d.ts":"type TimePoint = {\n    /**\n     * - 1970--\n     */\n    y: number;\n    /**\n     * - 1-12\n     */\n    m: number;\n    /**\n     * - 1-31\n     */\n    d: number;\n    /**\n     * - 0-24\n     */\n    h: number;\n    /**\n     * - 0-60 Minute\n     */\n    i: number;\n    /**\n     * - 0-60\n     */\n    s: number;\n    /**\n     * - Time zone in IANA database format 'Europe/Stockholm'\n     */\n    tz: string;\n};\ntype CatchCallbackFn = (e: unknown, job: Cron) => any;\ntype ProtectCallbackFn = (job: Cron) => any;\n/**\n * - Cron scheduler options\n */\ntype CronOptions = {\n    /**\n     * - Name of a job\n     */\n    name?: string;\n    /**\n     * - Job is paused\n     */\n    paused?: boolean;\n    /**\n     * - Job is about to be killed or killed\n     */\n    kill?: boolean;\n    /**\n     * - Continue exection even if a unhandled error is thrown by triggered function\n     * - If set to a function, execute function on catching the error.\n     */\n    catch?: boolean | CatchCallbackFn;\n    /**\n     * - Abort job instantly if nothing else keeps the event loop running.\n     */\n    unref?: boolean;\n    /**\n     * - Maximum nuber of executions\n     */\n    maxRuns?: number;\n    /**\n     * - Minimum interval between executions, in seconds\n     */\n    interval?: number;\n    /**\n     * - Skip current run if job is already running\n     */\n    protect?: boolean | ProtectCallbackFn;\n    /**\n     * - When to start running\n     */\n    startAt?: string | Date;\n    /**\n     * - When to stop running\n     */\n    stopAt?: string | Date;\n    /**\n     * - Time zone in Europe/Stockholm format\n     */\n    timezone?: string;\n    /**\n     * - Offset from UTC in minutes\n     */\n    utcOffset?: number;\n    /**\n     * - Combine day-of-month and day-of-week using true = OR, false = AND. Default is true = OR.\n     */\n    legacyMode?: boolean;\n    /**\n     * - Used to pass any object to scheduled function\n     */\n    context?: unknown;\n};\n/**\n * Name for each part of the cron pattern\n */\ntype CronPatternPart = (\"second\" | \"minute\" | \"hour\" | \"day\" | \"month\" | \"dayOfWeek\");\n/**\n * Offset, 0 or -1.\n *\n * 0 offset is used for seconds,minutes and hours as they start on 1.\n * -1 on days and months, as they start on 0\n */\ntype CronIndexOffset = number;\n/**\n * Cron entrypoint\n *\n * @constructor\n * @param {string|Date} pattern - Input pattern, input date, or input ISO 8601 time string\n * @param {CronOptions|Function} [fnOrOptions1] - Options or function to be run each iteration of pattern\n * @param {CronOptions|Function} [fnOrOptions2] - Options or function to be run each iteration of pattern\n * @returns {Cron}\n */\nfunction Cron(pattern: string | Date, fnOrOptions1?: CronOptions | Function, fnOrOptions2?: CronOptions | Function): Cron;\nclass Cron {\n    /**\n     * Cron entrypoint\n     *\n     * @constructor\n     * @param {string|Date} pattern - Input pattern, input date, or input ISO 8601 time string\n     * @param {CronOptions|Function} [fnOrOptions1] - Options or function to be run each iteration of pattern\n     * @param {CronOptions|Function} [fnOrOptions2] - Options or function to be run each iteration of pattern\n     * @returns {Cron}\n     */\n    constructor(pattern: string | Date, fnOrOptions1?: CronOptions | Function, fnOrOptions2?: CronOptions | Function);\n    /**\n     * @public\n     * @type {string|undefined} */\n    public name: string | undefined;\n    /**\n     * @public\n     * @type {CronOptions} */\n    public options: CronOptions;\n    /**\n     * Encapsulate all internal states in an object.\n     * Duplicate all options that can change to internal states, for example maxRuns and paused.\n     * @private\n     */\n    private _states;\n    fn: Function | CronOptions;\n    /**\n     * Find next runtime, based on supplied date. Strips milliseconds.\n     *\n     * @param {CronDate|Date|string} [prev] - Date to start from\n     * @returns {Date | null} - Next run time\n     */\n    nextRun(prev?: CronDate | Date | string): Date | null;\n    /**\n     * Find next n runs, based on supplied date. Strips milliseconds.\n     *\n     * @param {number} n - Number of runs to enumerate\n     * @param {Date|string} [previous] - Date to start from\n     * @returns {Date[]} - Next n run times\n     */\n    nextRuns(n: number, previous?: Date | string): Date[];\n    /**\n     * Return the original pattern, if there was one\n     *\n     * @returns {string|undefined} - Original pattern\n     */\n    getPattern(): string | undefined;\n    /**\n     * Indicates whether or not the cron job is scheduled and running, e.g. awaiting next trigger\n     * @public\n     *\n     * @returns {boolean} - Running or not\n     */\n    public isRunning(): boolean;\n    /**\n     * Indicates whether or not the cron job is permanently stopped\n     * @public\n     *\n     * @returns {boolean} - Running or not\n     */\n    public isStopped(): boolean;\n    /**\n     * Indicates whether or not the cron job is currently working\n     * @public\n     *\n     * @returns {boolean} - Running or not\n     */\n    public isBusy(): boolean;\n    /**\n     * Return current/previous run start time\n     * @public\n     *\n     * @returns {Date | null} - Previous run time\n     */\n    public currentRun(): Date | null;\n    /**\n     * Return previous run start time\n     * @public\n     *\n     * @returns {Date | null} - Previous run time\n     */\n    public previousRun(): Date | null;\n    /**\n     * Returns number of milliseconds to next run\n     * @public\n     *\n     * @param {CronDate|Date|string} [prev] - Starting date, defaults to now - minimum interval\n     * @returns {number | null}\n     */\n    public msToNext(prev?: CronDate | Date | string): number | null;\n    /**\n     * Stop execution\n     *\n     * Running this will forcefully stop the job, and prevent furter exection. `.resume()` will not work after stopping.\n     * It will also be removed from the scheduledJobs array if it were named.\n     *\n     * @public\n     */\n    public stop(): void;\n    /**\n     * Pause execution\n     * @public\n     *\n     * @returns {boolean} - Wether pause was successful\n     */\n    public pause(): boolean;\n    /**\n     * Resume execution\n     * @public\n     *\n     * @returns {boolean} - Wether resume was successful\n     */\n    public resume(): boolean;\n    /**\n     * Schedule a new job\n     * @public\n     *\n     * @param {Function} func - Function to be run each iteration of pattern\n     * @returns {Cron}\n     */\n    public schedule(func: Function): Cron;\n    private _trigger;\n    /**\n     * Trigger a run manually\n     * @public\n     */\n    public trigger(): Promise<void>;\n    private _checkTrigger;\n    private _next;\n    private _calculatePreviousRun;\n}\nnamespace Cron {\n    export { Cron };\n    export { scheduledJobs };\n}\n/**\n * An array containing all named cron jobs.\n *\n * @constant\n * @type {Cron[]}\n */\nconst scheduledJobs: Cron[];\n/**\n * Converts date to CronDate\n * @constructor\n *\n * @param {CronDate|Date|string} [d] - Input date, if using string representation ISO 8001 (2015-11-24T19:40:00) local timezone is expected\n * @param {string|number} [tz] - String representation of target timezone in Europe/Stockholm format, or a number representing offset in minutes.\n*/\ndeclare function CronDate(d?: CronDate | Date | string, tz?: string | number): void;\ndeclare class CronDate {\n    /**\n     * Converts date to CronDate\n     * @constructor\n     *\n     * @param {CronDate|Date|string} [d] - Input date, if using string representation ISO 8001 (2015-11-24T19:40:00) local timezone is expected\n     * @param {string|number} [tz] - String representation of target timezone in Europe/Stockholm format, or a number representing offset in minutes.\n    */\n    constructor(d?: CronDate | Date | string, tz?: string | number);\n    /**\n     * TimeZone\n     * @type {string|number|undefined}\n     */\n    tz: string | number | undefined;\n    private isNthWeekdayOfMonth;\n    private fromDate;\n    ms: number;\n    second: number;\n    minute: number;\n    hour: number;\n    day: number;\n    month: number;\n    year: number;\n    private fromCronDate;\n    private apply;\n    private fromString;\n    private findNext;\n    private recurse;\n    /**\n     * Increment to next run time\n     * @public\n     *\n     * @param {string} pattern - The pattern used to increment current state\n     * @param {CronOptions} options - Cron options used for incrementing\n     * @param {boolean} [hasPreviousRun] - If this run should adhere to minimum interval\n     * @return {CronDate|null} - Returns itthis for chaining, or null if increment wasnt possible\n     */\n    public increment(pattern: string, options: CronOptions, hasPreviousRun?: boolean): CronDate | null;\n    /**\n     * Convert current state back to a javascript Date()\n     * @public\n     *\n     * @param {boolean} internal - If this is an internal call\n     * @returns {Date}\n     */\n    public getDate(internal: boolean): Date;\n    /**\n     * Convert current state back to a javascript Date() and return UTC milliseconds\n     * @public\n     *\n     * @returns {Date}\n     */\n    public getTime(): Date;\n}\n{ Cron as default };\n","file://node_modules/@takaro/queues/package.json":"{\"name\":\"@takaro/queues\",\"types\":\"dist/main.d.ts\"}","file://node_modules/@takaro/queues/dist/QueueService.d.ts":"declare class QueuesService {\n    private static instance;\n    static getInstance(): QueuesService;\n    disconnect(): Promise<void>;\n    private queuesMap;\n    get queues(): {\n        commands: {\n            queue: TakaroQueue<ICommandJobData>;\n        };\n        cronjobs: {\n            queue: TakaroQueue<import(\"./dataDefinitions.js\").IJobData>;\n        };\n        hooks: {\n            queue: TakaroQueue<IHookJobData>;\n        };\n        events: {\n            queue: TakaroQueue<IEventQueueData>;\n        };\n        connector: {\n            queue: TakaroQueue<IConnectorQueueData>;\n        };\n        itemsSync: {\n            queue: TakaroQueue<IGameServerQueueData>;\n        };\n        bansSync: {\n            queue: TakaroQueue<IGameServerQueueData>;\n        };\n        playerSync: {\n            queue: TakaroQueue<IGameServerQueueData>;\n        };\n        steamSync: {\n            queue: TakaroQueue<IGameServerQueueData>;\n        };\n        csmmImport: {\n            queue: TakaroQueue<ICSMMImportData>;\n        };\n        kpi: {\n            queue: TakaroQueue<Record<string, unknown>>;\n        };\n        system: {\n            queue: TakaroQueue<Record<string, unknown>>;\n        };\n    };\n}\ndeclare const queueService: QueuesService;\n{};\n//# sourceMappingURL=QueueService.d.ts.map","file://node_modules/@takaro/queues/dist/TakaroQueue.d.ts":"declare class TakaroQueue<T extends Record<string, unknown>> {\n    name: string;\n    bullQueue: Queue<T>;\n    private log;\n    constructor(name: string);\n    /**\n     * Generating a job ID like this effectively de-duplicates all jobs with the same data.\n     * @see https://docs.bullmq.io/guide/jobs/job-ids\n     * @param data\n     * @returns\n     */\n    private getJobId;\n    add(data: T, extra?: JobsOptions, name?: string): Promise<import(\"bullmq\").Job<T, any, string>>;\n    getRepeatableJobs(): Promise<import(\"bullmq\").RepeatableJob[]>;\n    removeRepeatableByKey(id: string): Promise<boolean>;\n}\n//# sourceMappingURL=TakaroQueue.d.ts.map","file://node_modules/@takaro/queues/dist/TakaroWorker.d.ts":"type WorkerOptionsWithoutConnectionOptions = Omit<WorkerOptions, 'connection'>;\ndeclare abstract class TakaroWorker<T> {\n    log: import(\"winston\").Logger;\n    bullWorker: Worker<T, unknown>;\n    constructor(name: string, concurrency: number | undefined, fn: Processor<T, unknown>, extraBullOpts?: WorkerOptionsWithoutConnectionOptions);\n}\n{};\n//# sourceMappingURL=TakaroWorker.d.ts.map","file://node_modules/@takaro/queues/dist/bullboard.d.ts":"declare function getBullBoard(): any;\n//# sourceMappingURL=bullboard.d.ts.map","file://node_modules/@takaro/queues/dist/config.d.ts":"interface IQueuesConfig extends IBaseConfig {\n    queues: {\n        commands: {\n            name: string;\n            concurrency: number;\n        };\n        cronjobs: {\n            name: string;\n            concurrency: number;\n        };\n        hooks: {\n            name: string;\n            concurrency: number;\n        };\n        events: {\n            name: string;\n            concurrency: number;\n        };\n        connector: {\n            name: string;\n        };\n        itemsSync: {\n            name: string;\n            interval: number;\n        };\n        bansSync: {\n            name: string;\n            interval: number;\n        };\n        steamSync: {\n            name: string;\n            interval: number;\n        };\n        playerSync: {\n            name: string;\n            interval: number;\n            concurrency: number;\n        };\n        kpi: {\n            name: string;\n            interval: number;\n            concurrency: number;\n        };\n        csmmImport: {\n            name: string;\n        };\n        system: {\n            name: string;\n        };\n    };\n    redis: {\n        host: string;\n        port: number;\n        username: string;\n        password: string;\n    };\n}\ndeclare const queuesConfigSchema: {\n    redis: {\n        host: {\n            doc: string;\n            format: StringConstructor;\n            default: string;\n            env: string;\n        };\n        port: {\n            doc: string;\n            format: NumberConstructor;\n            default: number;\n            env: string;\n        };\n        username: {\n            doc: string;\n            format: StringConstructor;\n            default: string;\n            env: string;\n        };\n        password: {\n            doc: string;\n            format: StringConstructor;\n            default: string;\n            env: string;\n        };\n    };\n    queues: {\n        commands: {\n            name: {\n                doc: string;\n                format: StringConstructor;\n                default: string;\n                env: string;\n            };\n            concurrency: {\n                doc: string;\n                format: NumberConstructor;\n                default: number;\n                env: string;\n            };\n        };\n        cronjobs: {\n            name: {\n                doc: string;\n                format: StringConstructor;\n                default: string;\n                env: string;\n            };\n            concurrency: {\n                doc: string;\n                format: NumberConstructor;\n                default: number;\n                env: string;\n            };\n        };\n        hooks: {\n            name: {\n                doc: string;\n                format: StringConstructor;\n                default: string;\n                env: string;\n            };\n            concurrency: {\n                doc: string;\n                format: NumberConstructor;\n                default: number;\n                env: string;\n            };\n        };\n        events: {\n            name: {\n                doc: string;\n                format: StringConstructor;\n                default: string;\n                env: string;\n            };\n            concurrency: {\n                doc: string;\n                format: NumberConstructor;\n                default: number;\n                env: string;\n            };\n        };\n        connector: {\n            name: {\n                doc: string;\n                format: StringConstructor;\n                default: string;\n                env: string;\n            };\n        };\n        itemsSync: {\n            name: {\n                doc: string;\n                format: StringConstructor;\n                default: string;\n                env: string;\n            };\n            interval: {\n                doc: string;\n                format: NumberConstructor;\n                default: number;\n                env: string;\n            };\n        };\n        bansSync: {\n            name: {\n                doc: string;\n                format: StringConstructor;\n                default: string;\n                env: string;\n            };\n            interval: {\n                doc: string;\n                format: NumberConstructor;\n                default: number;\n                env: string;\n            };\n        };\n        steamSync: {\n            name: {\n                doc: string;\n                format: StringConstructor;\n                default: string;\n                env: string;\n            };\n            interval: {\n                doc: string;\n                format: NumberConstructor;\n                default: number;\n                env: string;\n            };\n        };\n        playerSync: {\n            name: {\n                doc: string;\n                format: StringConstructor;\n                default: string;\n                env: string;\n            };\n            interval: {\n                doc: string;\n                format: NumberConstructor;\n                default: number;\n                env: string;\n            };\n            concurrency: {\n                doc: string;\n                format: NumberConstructor;\n                default: number;\n                env: string;\n            };\n        };\n        kpi: {\n            name: {\n                doc: string;\n                format: StringConstructor;\n                default: string;\n                env: string;\n            };\n            interval: {\n                doc: string;\n                format: NumberConstructor;\n                default: number;\n                env: string;\n            };\n            concurrency: {\n                doc: string;\n                format: NumberConstructor;\n                default: number;\n                env: string;\n            };\n        };\n        csmmImport: {\n            name: {\n                doc: string;\n                format: StringConstructor;\n                default: string;\n                env: string;\n            };\n        };\n        system: {\n            name: {\n                doc: string;\n                format: StringConstructor;\n                default: string;\n                env: string;\n            };\n        };\n    };\n};\ndeclare const config: Config<IQueuesConfig>;\n//# sourceMappingURL=config.d.ts.map","file://node_modules/@takaro/queues/dist/dataDefinitions.d.ts":"interface IParsedCommand {\n    command: string;\n    arguments: Record<string, string | number | boolean | PlayerOnGameserverOutputWithRolesDTO>;\n    [key: string]: string | Record<string, string | number | boolean | PlayerOnGameserverOutputWithRolesDTO>;\n}\ninterface IBaseJobData {\n    [key: string]: unknown;\n    domainId: string;\n}\ninterface IJobData extends IBaseJobData {\n    functionId: string;\n    /**\n     * The id of the item that triggered this job (cronjobId, commandId or hookId)\n     */\n    itemId: string;\n    /**\n     * The id of the gameserver that triggered this job\n     */\n    gameServerId: string;\n    /**\n     * The module installation object, including the configs\n     */\n    module: ModuleInstallationOutputDTO;\n}\ninterface IHookJobData extends IJobData {\n    eventData: EventPayload;\n    player?: PlayerOutputWithRolesDTO;\n    pog?: PlayerOnGameserverOutputWithRolesDTO;\n}\ninterface ICommandJobData extends IJobData {\n    player: PlayerOutputWithRolesDTO;\n    pog: PlayerOnGameserverOutputWithRolesDTO;\n    arguments: IParsedCommand['arguments'];\n    chatMessage: EventChatMessage;\n    trigger: string;\n}\ntype ICronJobData = IJobData;\ndeclare function isCommandData(data: IJobData): data is ICommandJobData;\ndeclare function isHookData(data: IJobData): data is IHookJobData;\ndeclare function isCronData(data: IJobData): data is ICronJobData;\ninterface IEventQueueData extends IBaseJobData {\n    type: ValueOf<typeof GameEvents>;\n    gameServerId: string;\n    event: ValueOf<(typeof GameEventsMapping)[ValueOf<typeof GameEvents>]>;\n}\ninterface IConnectorQueueData extends IBaseJobData {\n    gameServerId: string;\n    operation: 'create' | 'update' | 'delete';\n}\ninterface IGameServerQueueData extends IBaseJobData {\n    gameServerId?: string;\n}\ninterface ICSMMImportData extends IBaseJobData {\n    csmmExport: Record<string, unknown>;\n    options: {\n        currency: boolean;\n        players: boolean;\n        roles: boolean;\n        shop: boolean;\n    };\n}\n//# sourceMappingURL=dataDefinitions.d.ts.map","file://node_modules/@takaro/queues/dist/main.d.ts":"{ queueService } from './QueueService.js';\n{ queuesConfigSchema, IQueuesConfig } from './config.js';\n* from './dataDefinitions.js';\n{ TakaroQueue } from './TakaroQueue.js';\n{ TakaroWorker } from './TakaroWorker.js';\n{ getBullBoard } from './bullboard.js';\n//# sourceMappingURL=main.d.ts.map","file://node_modules/@takaro/queues/dist/util/redisConnectionOptions.d.ts":"declare function getRedisConnectionOptions(): {\n    host: string;\n    port: number;\n    username: string;\n    password: string;\n};\n//# sourceMappingURL=redisConnectionOptions.d.ts.map","file://node_modules/chalk/package.json":"{\"name\":\"chalk\",\"types\":\"./source/index.d.ts\"}","file://node_modules/chalk/./source/index.d.ts":"// TODO: Make it this when TS suports that.\n// import {ModifierName, ForegroundColor, BackgroundColor, ColorName} from '#ansi-styles';\n// import {ColorInfo, ColorSupportLevel} from '#supports-color';\n\tModifierName,\n\tForegroundColorName,\n\tBackgroundColorName,\n\tColorName,\n} from './vendor/ansi-styles/index.js';\n\ninterface Options {\n\t/**\n\tSpecify the color support for Chalk.\n\n\tBy default, color support is automatically detected based on the environment.\n\n\tLevels:\n\t- `0` - All colors disabled.\n\t- `1` - Basic 16 colors support.\n\t- `2` - ANSI 256 colors support.\n\t- `3` - Truecolor 16 million colors support.\n\t*/\n\treadonly level?: ColorSupportLevel;\n}\n\n/**\nReturn a new Chalk instance.\n*/\nconst Chalk: new (options?: Options) => ChalkInstance; // eslint-disable-line @typescript-eslint/naming-convention\n\ninterface ChalkInstance {\n\t(...text: unknown[]): string;\n\n\t/**\n\tThe color support for Chalk.\n\n\tBy default, color support is automatically detected based on the environment.\n\n\tLevels:\n\t- `0` - All colors disabled.\n\t- `1` - Basic 16 colors support.\n\t- `2` - ANSI 256 colors support.\n\t- `3` - Truecolor 16 million colors support.\n\t*/\n\tlevel: ColorSupportLevel;\n\n\t/**\n\tUse RGB values to set text color.\n\n\t@example\n\t```\n\timport chalk from 'chalk';\n\n\tchalk.rgb(222, 173, 237);\n\t```\n\t*/\n\trgb: (red: number, green: number, blue: number) => this;\n\n\t/**\n\tUse HEX value to set text color.\n\n\t@param color - Hexadecimal value representing the desired color.\n\n\t@example\n\t```\n\timport chalk from 'chalk';\n\n\tchalk.hex('#DEADED');\n\t```\n\t*/\n\thex: (color: string) => this;\n\n\t/**\n\tUse an [8-bit unsigned number](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit) to set text color.\n\n\t@example\n\t```\n\timport chalk from 'chalk';\n\n\tchalk.ansi256(201);\n\t```\n\t*/\n\tansi256: (index: number) => this;\n\n\t/**\n\tUse RGB values to set background color.\n\n\t@example\n\t```\n\timport chalk from 'chalk';\n\n\tchalk.bgRgb(222, 173, 237);\n\t```\n\t*/\n\tbgRgb: (red: number, green: number, blue: number) => this;\n\n\t/**\n\tUse HEX value to set background color.\n\n\t@param color - Hexadecimal value representing the desired color.\n\n\t@example\n\t```\n\timport chalk from 'chalk';\n\n\tchalk.bgHex('#DEADED');\n\t```\n\t*/\n\tbgHex: (color: string) => this;\n\n\t/**\n\tUse a [8-bit unsigned number](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit) to set background color.\n\n\t@example\n\t```\n\timport chalk from 'chalk';\n\n\tchalk.bgAnsi256(201);\n\t```\n\t*/\n\tbgAnsi256: (index: number) => this;\n\n\t/**\n\tModifier: Reset the current style.\n\t*/\n\treadonly reset: this;\n\n\t/**\n\tModifier: Make the text bold.\n\t*/\n\treadonly bold: this;\n\n\t/**\n\tModifier: Make the text have lower opacity.\n\t*/\n\treadonly dim: this;\n\n\t/**\n\tModifier: Make the text italic. *(Not widely supported)*\n\t*/\n\treadonly italic: this;\n\n\t/**\n\tModifier: Put a horizontal line below the text. *(Not widely supported)*\n\t*/\n\treadonly underline: this;\n\n\t/**\n\tModifier: Put a horizontal line above the text. *(Not widely supported)*\n\t*/\n\treadonly overline: this;\n\n\t/**\n\tModifier: Invert background and foreground colors.\n\t*/\n\treadonly inverse: this;\n\n\t/**\n\tModifier: Print the text but make it invisible.\n\t*/\n\treadonly hidden: this;\n\n\t/**\n\tModifier: Puts a horizontal line through the center of the text. *(Not widely supported)*\n\t*/\n\treadonly strikethrough: this;\n\n\t/**\n\tModifier: Print the text only when Chalk has a color level above zero.\n\n\tCan be useful for things that are purely cosmetic.\n\t*/\n\treadonly visible: this;\n\n\treadonly black: this;\n\treadonly red: this;\n\treadonly green: this;\n\treadonly yellow: this;\n\treadonly blue: this;\n\treadonly magenta: this;\n\treadonly cyan: this;\n\treadonly white: this;\n\n\t/*\n\tAlias for `blackBright`.\n\t*/\n\treadonly gray: this;\n\n\t/*\n\tAlias for `blackBright`.\n\t*/\n\treadonly grey: this;\n\n\treadonly blackBright: this;\n\treadonly redBright: this;\n\treadonly greenBright: this;\n\treadonly yellowBright: this;\n\treadonly blueBright: this;\n\treadonly magentaBright: this;\n\treadonly cyanBright: this;\n\treadonly whiteBright: this;\n\n\treadonly bgBlack: this;\n\treadonly bgRed: this;\n\treadonly bgGreen: this;\n\treadonly bgYellow: this;\n\treadonly bgBlue: this;\n\treadonly bgMagenta: this;\n\treadonly bgCyan: this;\n\treadonly bgWhite: this;\n\n\t/*\n\tAlias for `bgBlackBright`.\n\t*/\n\treadonly bgGray: this;\n\n\t/*\n\tAlias for `bgBlackBright`.\n\t*/\n\treadonly bgGrey: this;\n\n\treadonly bgBlackBright: this;\n\treadonly bgRedBright: this;\n\treadonly bgGreenBright: this;\n\treadonly bgYellowBright: this;\n\treadonly bgBlueBright: this;\n\treadonly bgMagentaBright: this;\n\treadonly bgCyanBright: this;\n\treadonly bgWhiteBright: this;\n}\n\n/**\nMain Chalk object that allows to chain styles together.\n\nCall the last one as a method with a string argument.\n\nOrder doesn't matter, and later styles take precedent in case of a conflict.\n\nThis simply means that `chalk.red.yellow.green` is equivalent to `chalk.green`.\n*/\ndeclare const chalk: ChalkInstance;\n\nconst supportsColor: ColorInfo;\n\nconst chalkStderr: typeof chalk;\nconst supportsColorStderr: typeof supportsColor;\n\n{\n\tModifierName, ForegroundColorName, BackgroundColorName, ColorName,\n\tmodifierNames, foregroundColorNames, backgroundColorNames, colorNames,\n// } from '#ansi-styles';\n} from './vendor/ansi-styles/index.js';\n\n{\n\tColorInfo,\n\tColorSupport,\n\tColorSupportLevel,\n// } from '#supports-color';\n} from './vendor/supports-color/index.js';\n\n// TODO: Remove these aliases in the next major version\n/**\n@deprecated Use `ModifierName` instead.\n\nBasic modifier names.\n*/\ntype Modifiers = ModifierName;\n\n/**\n@deprecated Use `ForegroundColorName` instead.\n\nBasic foreground color names.\n\n[More colors here.](https://github.com/chalk/chalk/blob/main/readme.md#256-and-truecolor-color-support)\n*/\ntype ForegroundColor = ForegroundColorName;\n\n/**\n@deprecated Use `BackgroundColorName` instead.\n\nBasic background color names.\n\n[More colors here.](https://github.com/chalk/chalk/blob/main/readme.md#256-and-truecolor-color-support)\n*/\ntype BackgroundColor = BackgroundColorName;\n\n/**\n@deprecated Use `ColorName` instead.\n\nBasic color names. The combination of foreground and background color names.\n\n[More colors here.](https://github.com/chalk/chalk/blob/main/readme.md#256-and-truecolor-color-support)\n*/\ntype Color = ColorName;\n\n/**\n@deprecated Use `modifierNames` instead.\n\nBasic modifier names.\n*/\nconst modifiers: readonly Modifiers[];\n\n/**\n@deprecated Use `foregroundColorNames` instead.\n\nBasic foreground color names.\n*/\nconst foregroundColors: readonly ForegroundColor[];\n\n/**\n@deprecated Use `backgroundColorNames` instead.\n\nBasic background color names.\n*/\nconst backgroundColors: readonly BackgroundColor[];\n\n/**\n@deprecated Use `colorNames` instead.\n\nBasic color names. The combination of foreground and background color names.\n*/\nconst colors: readonly Color[];\n\ndefault chalk;\n","file://node_modules/chalk/./source/vendor/ansi-styles/index.d.ts":"interface CSPair { // eslint-disable-line @typescript-eslint/naming-convention\n\t/**\n\tThe ANSI terminal control sequence for starting this style.\n\t*/\n\treadonly open: string;\n\n\t/**\n\tThe ANSI terminal control sequence for ending this style.\n\t*/\n\treadonly close: string;\n}\n\ninterface ColorBase {\n\t/**\n\tThe ANSI terminal control sequence for ending this color.\n\t*/\n\treadonly close: string;\n\n\tansi(code: number): string;\n\n\tansi256(code: number): string;\n\n\tansi16m(red: number, green: number, blue: number): string;\n}\n\ninterface Modifier {\n\t/**\n\tResets the current color chain.\n\t*/\n\treadonly reset: CSPair;\n\n\t/**\n\tMake text bold.\n\t*/\n\treadonly bold: CSPair;\n\n\t/**\n\tEmitting only a small amount of light.\n\t*/\n\treadonly dim: CSPair;\n\n\t/**\n\tMake text italic. (Not widely supported)\n\t*/\n\treadonly italic: CSPair;\n\n\t/**\n\tMake text underline. (Not widely supported)\n\t*/\n\treadonly underline: CSPair;\n\n\t/**\n\tMake text overline.\n\n\tSupported on VTE-based terminals, the GNOME terminal, mintty, and Git Bash.\n\t*/\n\treadonly overline: CSPair;\n\n\t/**\n\tInverse background and foreground colors.\n\t*/\n\treadonly inverse: CSPair;\n\n\t/**\n\tPrints the text, but makes it invisible.\n\t*/\n\treadonly hidden: CSPair;\n\n\t/**\n\tPuts a horizontal line through the center of the text. (Not widely supported)\n\t*/\n\treadonly strikethrough: CSPair;\n}\n\ninterface ForegroundColor {\n\treadonly black: CSPair;\n\treadonly red: CSPair;\n\treadonly green: CSPair;\n\treadonly yellow: CSPair;\n\treadonly blue: CSPair;\n\treadonly cyan: CSPair;\n\treadonly magenta: CSPair;\n\treadonly white: CSPair;\n\n\t/**\n\tAlias for `blackBright`.\n\t*/\n\treadonly gray: CSPair;\n\n\t/**\n\tAlias for `blackBright`.\n\t*/\n\treadonly grey: CSPair;\n\n\treadonly blackBright: CSPair;\n\treadonly redBright: CSPair;\n\treadonly greenBright: CSPair;\n\treadonly yellowBright: CSPair;\n\treadonly blueBright: CSPair;\n\treadonly cyanBright: CSPair;\n\treadonly magentaBright: CSPair;\n\treadonly whiteBright: CSPair;\n}\n\ninterface BackgroundColor {\n\treadonly bgBlack: CSPair;\n\treadonly bgRed: CSPair;\n\treadonly bgGreen: CSPair;\n\treadonly bgYellow: CSPair;\n\treadonly bgBlue: CSPair;\n\treadonly bgCyan: CSPair;\n\treadonly bgMagenta: CSPair;\n\treadonly bgWhite: CSPair;\n\n\t/**\n\tAlias for `bgBlackBright`.\n\t*/\n\treadonly bgGray: CSPair;\n\n\t/**\n\tAlias for `bgBlackBright`.\n\t*/\n\treadonly bgGrey: CSPair;\n\n\treadonly bgBlackBright: CSPair;\n\treadonly bgRedBright: CSPair;\n\treadonly bgGreenBright: CSPair;\n\treadonly bgYellowBright: CSPair;\n\treadonly bgBlueBright: CSPair;\n\treadonly bgCyanBright: CSPair;\n\treadonly bgMagentaBright: CSPair;\n\treadonly bgWhiteBright: CSPair;\n}\n\ninterface ConvertColor {\n\t/**\n\tConvert from the RGB color space to the ANSI 256 color space.\n\n\t@param red - (`0...255`)\n\t@param green - (`0...255`)\n\t@param blue - (`0...255`)\n\t*/\n\trgbToAnsi256(red: number, green: number, blue: number): number;\n\n\t/**\n\tConvert from the RGB HEX color space to the RGB color space.\n\n\t@param hex - A hexadecimal string containing RGB data.\n\t*/\n\thexToRgb(hex: string): [red: number, green: number, blue: number];\n\n\t/**\n\tConvert from the RGB HEX color space to the ANSI 256 color space.\n\n\t@param hex - A hexadecimal string containing RGB data.\n\t*/\n\thexToAnsi256(hex: string): number;\n\n\t/**\n\tConvert from the ANSI 256 color space to the ANSI 16 color space.\n\n\t@param code - A number representing the ANSI 256 color.\n\t*/\n\tansi256ToAnsi(code: number): number;\n\n\t/**\n\tConvert from the RGB color space to the ANSI 16 color space.\n\n\t@param red - (`0...255`)\n\t@param green - (`0...255`)\n\t@param blue - (`0...255`)\n\t*/\n\trgbToAnsi(red: number, green: number, blue: number): number;\n\n\t/**\n\tConvert from the RGB HEX color space to the ANSI 16 color space.\n\n\t@param hex - A hexadecimal string containing RGB data.\n\t*/\n\thexToAnsi(hex: string): number;\n}\n\n/**\nBasic modifier names.\n*/\ntype ModifierName = keyof Modifier;\n\n/**\nBasic foreground color names.\n\n[More colors here.](https://github.com/chalk/chalk/blob/main/readme.md#256-and-truecolor-color-support)\n*/\ntype ForegroundColorName = keyof ForegroundColor;\n\n/**\nBasic background color names.\n\n[More colors here.](https://github.com/chalk/chalk/blob/main/readme.md#256-and-truecolor-color-support)\n*/\ntype BackgroundColorName = keyof BackgroundColor;\n\n/**\nBasic color names. The combination of foreground and background color names.\n\n[More colors here.](https://github.com/chalk/chalk/blob/main/readme.md#256-and-truecolor-color-support)\n*/\ntype ColorName = ForegroundColorName | BackgroundColorName;\n\n/**\nBasic modifier names.\n*/\nconst modifierNames: readonly ModifierName[];\n\n/**\nBasic foreground color names.\n*/\nconst foregroundColorNames: readonly ForegroundColorName[];\n\n/**\nBasic background color names.\n*/\nconst backgroundColorNames: readonly BackgroundColorName[];\n\n/*\nBasic color names. The combination of foreground and background color names.\n*/\nconst colorNames: readonly ColorName[];\n\ndeclare const ansiStyles: {\n\treadonly modifier: Modifier;\n\treadonly color: ColorBase & ForegroundColor;\n\treadonly bgColor: ColorBase & BackgroundColor;\n\treadonly codes: ReadonlyMap<number, number>;\n} & ForegroundColor & BackgroundColor & Modifier & ConvertColor;\n\ndefault ansiStyles;\n","file://node_modules/chalk/./source/vendor/supports-color/browser.d.ts":"{default} from './index.js';\n","file://node_modules/chalk/./source/vendor/supports-color/index.d.ts":"\ntype Options = {\n\t/**\n\tWhether `process.argv` should be sniffed for `--color` and `--no-color` flags.\n\n\t@default true\n\t*/\n\treadonly sniffFlags?: boolean;\n};\n\n/**\nLevels:\n- `0` - All colors disabled.\n- `1` - Basic 16 colors support.\n- `2` - ANSI 256 colors support.\n- `3` - Truecolor 16 million colors support.\n*/\ntype ColorSupportLevel = 0 | 1 | 2 | 3;\n\n/**\nDetect whether the terminal supports color.\n*/\ntype ColorSupport = {\n\t/**\n\tThe color level.\n\t*/\n\tlevel: ColorSupportLevel;\n\n\t/**\n\tWhether basic 16 colors are supported.\n\t*/\n\thasBasic: boolean;\n\n\t/**\n\tWhether ANSI 256 colors are supported.\n\t*/\n\thas256: boolean;\n\n\t/**\n\tWhether Truecolor 16 million colors are supported.\n\t*/\n\thas16m: boolean;\n};\n\ntype ColorInfo = ColorSupport | false;\n\nfunction createSupportsColor(stream?: WriteStream, options?: Options): ColorInfo;\n\ndeclare const supportsColor: {\n\tstdout: ColorInfo;\n\tstderr: ColorInfo;\n};\n\ndefault supportsColor;\n","file://node_modules/filelist/package.json":"{\"name\":\"filelist\",\"types\":\"index.d.ts\"}","file://node_modules/filelist/index.d.ts":"// IncludeOptions definitions copied from minimatch (https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/minimatch/index.d.ts)\ninterface IncludeOptions {\n  /**\n   * Dump a ton of stuff to stderr.\n   *\n   * @default false\n   */\n  debug?: boolean;\n\n  /**\n   * Do not expand {a,b} and {1..3} brace sets.\n   *\n   * @default false\n   */\n  nobrace?: boolean;\n\n  /**\n   * Disable ** matching against multiple folder names.\n   *\n   * @default false\n   */\n  noglobstar?: boolean;\n\n  /**\n   * Allow patterns to match filenames starting with a period,\n   * even if the pattern does not explicitly have a period in that spot.\n   *\n   * @default false\n   */\n  dot?: boolean;\n\n  /**\n   * Disable \"extglob\" style patterns like +(a|b).\n   *\n   * @default false\n   */\n  noext?: boolean;\n\n  /**\n   * Perform a case-insensitive match.\n   *\n   * @default false\n   */\n  nocase?: boolean;\n\n  /**\n   * When a match is not found by minimatch.match,\n   * return a list containing the pattern itself if this option is set.\n   * Otherwise, an empty list is returned if there are no matches.\n   *\n   * @default false\n   */\n  nonull?: boolean;\n\n  /**\n   * If set, then patterns without slashes will be matched against\n   * the basename of the path if it contains slashes.\n   *\n   * @default false\n   */\n  matchBase?: boolean;\n\n  /**\n   * Suppress the behavior of treating #\n   * at the start of a pattern as a comment.\n   *\n   * @default false\n   */\n  nocomment?: boolean;\n\n  /**\n   * Suppress the behavior of treating a leading ! character as negation.\n   *\n   * @default false\n   */\n  nonegate?: boolean;\n\n  /**\n   * Returns from negate expressions the same as if they were not negated.\n   * (Ie, true on a hit, false on a miss.)\n   *\n   * @default false\n   */\n  flipNegate?: boolean;\n}\n\nclass FileList {\n  static clone(): FileList\n  static verbose: boolean\n}\n\ninterface FileList extends Omit<Array<string>, \"length\"> {\n  pendingAdd: string[]\n  pending: boolean\n  excludes: {\n    pats: RegExp[],\n    funcs: Function[],\n    regex: null | RegExp\n  }\n  items: string[]\n  toArray(): string[]\n  include(...items: string[]): this\n  include(...items: (IncludeOptions | string)[]): this\n  exclude(...items: string[]): this\n  shouldExclude(item: string): boolean\n  resolve(): this\n  clearInclusions(): this\n  clearExclusions(): this\n  length(): number\n}","file://node_modules/setprototypeof/package.json":"{\"name\":\"setprototypeof\",\"types\":\"index.d.ts\"}","file://node_modules/setprototypeof/index.d.ts":"declare function setPrototypeOf(o: any, proto: object | null): any;\n= setPrototypeOf;\n","file://node_modules/iconv-lite/package.json":"{\"name\":\"iconv-lite\",\"types\":\"./lib/index.d.ts\"}","file://node_modules/iconv-lite/./lib/index.d.ts":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License.\n *  REQUIREMENT: This definition is dependent on the @types/node definition.\n *  Install with `npm install @types/node --save-dev`\n *--------------------------------------------------------------------------------------------*/\n\ndeclare module 'iconv-lite' {\n\texport function decode(buffer: Buffer, encoding: string, options?: Options): string;\n\n\texport function encode(content: string, encoding: string, options?: Options): Buffer;\n\n\texport function encodingExists(encoding: string): boolean;\n\n\texport function decodeStream(encoding: string, options?: Options): NodeJS.ReadWriteStream;\n\n\texport function encodeStream(encoding: string, options?: Options): NodeJS.ReadWriteStream;\n}\n\ninterface Options {\n    stripBOM?: boolean;\n    addBOM?: boolean;\n    defaultEncoding?: string;\n}\n","file://node_modules/side-channel/package.json":"{\"name\":\"side-channel\",\"types\":\"./index.d.ts\"}","file://node_modules/side-channel/index.d.ts":"declare namespace getSideChannel {\n\ttype Key = unknown;\n\ttype ListNode<T> = {\n\t\tkey: Key;\n\t\tnext: ListNode<T>;\n\t\tvalue: T;\n\t};\n\ttype RootNode<T> = {\n\t\tkey: object;\n\t\tnext: null | ListNode<T>;\n\t};\n\tfunction listGetNode<T>(list: RootNode<T>, key: ListNode<T>['key']): ListNode<T> | void;\n\tfunction listGet<T>(objects: RootNode<T>, key: ListNode<T>['key']): T | void;\n\tfunction listSet<T>(objects: RootNode<T>, key: ListNode<T>['key'], value: T): void;\n\tfunction listHas<T>(objects: RootNode<T>, key: ListNode<T>['key']): boolean;\n\n\ttype Channel = {\n\t\tassert: (key: Key) => void;\n\t\thas: (key: Key) => boolean;\n\t\tget: <T>(key: Key) => T;\n\t\tset: <T>(key: Key, value: T) => void;\n\t}\n}\n\ndeclare function getSideChannel(): getSideChannel.Channel;\n\n= getSideChannel;\n","file://node_modules/es-define-property/package.json":"{\"name\":\"es-define-property\",\"types\":\"./index.d.ts\"}","file://node_modules/es-define-property/index.d.ts":"declare const defineProperty: false | typeof Object.defineProperty;\n\n= defineProperty;","file://node_modules/hasown/package.json":"{\"name\":\"hasown\",\"types\":\"index.d.ts\"}","file://node_modules/hasown/index.d.ts":"declare function hasOwn<O, K extends PropertyKey, V = unknown>(o: O, p: K): o is O & Record<K, V>;\n\n= hasOwn;\n","file://node_modules/define-data-property/package.json":"{\"name\":\"define-data-property\",\"types\":\"./index.d.ts\"}","file://node_modules/define-data-property/index.d.ts":"\ndeclare function defineDataProperty(\n    obj: Record<PropertyKey, unknown>,\n    property: keyof typeof obj,\n    value: typeof obj[typeof property],\n    nonEnumerable?: boolean | null,\n    nonWritable?: boolean | null,\n    nonConfigurable?: boolean | null,\n    loose?: boolean\n): void;\n\n= defineDataProperty;","file://node_modules/safe-buffer/package.json":"{\"name\":\"safe-buffer\",\"types\":\"index.d.ts\"}","file://node_modules/safe-buffer/index.d.ts":"declare module \"safe-buffer\" {\n  export class Buffer {\n    length: number\n    write(string: string, offset?: number, length?: number, encoding?: string): number;\n    toString(encoding?: string, start?: number, end?: number): string;\n    toJSON(): { type: 'Buffer', data: any[] };\n    equals(otherBuffer: Buffer): boolean;\n    compare(otherBuffer: Buffer, targetStart?: number, targetEnd?: number, sourceStart?: number, sourceEnd?: number): number;\n    copy(targetBuffer: Buffer, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;\n    slice(start?: number, end?: number): Buffer;\n    writeUIntLE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;\n    writeUIntBE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;\n    writeIntLE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;\n    writeIntBE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;\n    readUIntLE(offset: number, byteLength: number, noAssert?: boolean): number;\n    readUIntBE(offset: number, byteLength: number, noAssert?: boolean): number;\n    readIntLE(offset: number, byteLength: number, noAssert?: boolean): number;\n    readIntBE(offset: number, byteLength: number, noAssert?: boolean): number;\n    readUInt8(offset: number, noAssert?: boolean): number;\n    readUInt16LE(offset: number, noAssert?: boolean): number;\n    readUInt16BE(offset: number, noAssert?: boolean): number;\n    readUInt32LE(offset: number, noAssert?: boolean): number;\n    readUInt32BE(offset: number, noAssert?: boolean): number;\n    readInt8(offset: number, noAssert?: boolean): number;\n    readInt16LE(offset: number, noAssert?: boolean): number;\n    readInt16BE(offset: number, noAssert?: boolean): number;\n    readInt32LE(offset: number, noAssert?: boolean): number;\n    readInt32BE(offset: number, noAssert?: boolean): number;\n    readFloatLE(offset: number, noAssert?: boolean): number;\n    readFloatBE(offset: number, noAssert?: boolean): number;\n    readDoubleLE(offset: number, noAssert?: boolean): number;\n    readDoubleBE(offset: number, noAssert?: boolean): number;\n    swap16(): Buffer;\n    swap32(): Buffer;\n    swap64(): Buffer;\n    writeUInt8(value: number, offset: number, noAssert?: boolean): number;\n    writeUInt16LE(value: number, offset: number, noAssert?: boolean): number;\n    writeUInt16BE(value: number, offset: number, noAssert?: boolean): number;\n    writeUInt32LE(value: number, offset: number, noAssert?: boolean): number;\n    writeUInt32BE(value: number, offset: number, noAssert?: boolean): number;\n    writeInt8(value: number, offset: number, noAssert?: boolean): number;\n    writeInt16LE(value: number, offset: number, noAssert?: boolean): number;\n    writeInt16BE(value: number, offset: number, noAssert?: boolean): number;\n    writeInt32LE(value: number, offset: number, noAssert?: boolean): number;\n    writeInt32BE(value: number, offset: number, noAssert?: boolean): number;\n    writeFloatLE(value: number, offset: number, noAssert?: boolean): number;\n    writeFloatBE(value: number, offset: number, noAssert?: boolean): number;\n    writeDoubleLE(value: number, offset: number, noAssert?: boolean): number;\n    writeDoubleBE(value: number, offset: number, noAssert?: boolean): number;\n    fill(value: any, offset?: number, end?: number): this;\n    indexOf(value: string | number | Buffer, byteOffset?: number, encoding?: string): number;\n    lastIndexOf(value: string | number | Buffer, byteOffset?: number, encoding?: string): number;\n    includes(value: string | number | Buffer, byteOffset?: number, encoding?: string): boolean;\n\n    /**\n     * Allocates a new buffer containing the given {str}.\n     *\n     * @param str String to store in buffer.\n     * @param encoding encoding to use, optional.  Default is 'utf8'\n     */\n     constructor (str: string, encoding?: string);\n    /**\n     * Allocates a new buffer of {size} octets.\n     *\n     * @param size count of octets to allocate.\n     */\n    constructor (size: number);\n    /**\n     * Allocates a new buffer containing the given {array} of octets.\n     *\n     * @param array The octets to store.\n     */\n    constructor (array: Uint8Array);\n    /**\n     * Produces a Buffer backed by the same allocated memory as\n     * the given {ArrayBuffer}.\n     *\n     *\n     * @param arrayBuffer The ArrayBuffer with which to share memory.\n     */\n    constructor (arrayBuffer: ArrayBuffer);\n    /**\n     * Allocates a new buffer containing the given {array} of octets.\n     *\n     * @param array The octets to store.\n     */\n    constructor (array: any[]);\n    /**\n     * Copies the passed {buffer} data onto a new {Buffer} instance.\n     *\n     * @param buffer The buffer to copy.\n     */\n    constructor (buffer: Buffer);\n    prototype: Buffer;\n    /**\n     * Allocates a new Buffer using an {array} of octets.\n     *\n     * @param array\n     */\n    static from(array: any[]): Buffer;\n    /**\n     * When passed a reference to the .buffer property of a TypedArray instance,\n     * the newly created Buffer will share the same allocated memory as the TypedArray.\n     * The optional {byteOffset} and {length} arguments specify a memory range\n     * within the {arrayBuffer} that will be shared by the Buffer.\n     *\n     * @param arrayBuffer The .buffer property of a TypedArray or a new ArrayBuffer()\n     * @param byteOffset\n     * @param length\n     */\n    static from(arrayBuffer: ArrayBuffer, byteOffset?: number, length?: number): Buffer;\n    /**\n     * Copies the passed {buffer} data onto a new Buffer instance.\n     *\n     * @param buffer\n     */\n    static from(buffer: Buffer): Buffer;\n    /**\n     * Creates a new Buffer containing the given JavaScript string {str}.\n     * If provided, the {encoding} parameter identifies the character encoding.\n     * If not provided, {encoding} defaults to 'utf8'.\n     *\n     * @param str\n     */\n    static from(str: string, encoding?: string): Buffer;\n    /**\n     * Returns true if {obj} is a Buffer\n     *\n     * @param obj object to test.\n     */\n    static isBuffer(obj: any): obj is Buffer;\n    /**\n     * Returns true if {encoding} is a valid encoding argument.\n     * Valid string encodings in Node 0.12: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'\n     *\n     * @param encoding string to test.\n     */\n    static isEncoding(encoding: string): boolean;\n    /**\n     * Gives the actual byte length of a string. encoding defaults to 'utf8'.\n     * This is not the same as String.prototype.length since that returns the number of characters in a string.\n     *\n     * @param string string to test.\n     * @param encoding encoding used to evaluate (defaults to 'utf8')\n     */\n    static byteLength(string: string, encoding?: string): number;\n    /**\n     * Returns a buffer which is the result of concatenating all the buffers in the list together.\n     *\n     * If the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.\n     * If the list has exactly one item, then the first item of the list is returned.\n     * If the list has more than one item, then a new Buffer is created.\n     *\n     * @param list An array of Buffer objects to concatenate\n     * @param totalLength Total length of the buffers when concatenated.\n     *   If totalLength is not provided, it is read from the buffers in the list. However, this adds an additional loop to the function, so it is faster to provide the length explicitly.\n     */\n    static concat(list: Buffer[], totalLength?: number): Buffer;\n    /**\n     * The same as buf1.compare(buf2).\n     */\n    static compare(buf1: Buffer, buf2: Buffer): number;\n    /**\n     * Allocates a new buffer of {size} octets.\n     *\n     * @param size count of octets to allocate.\n     * @param fill if specified, buffer will be initialized by calling buf.fill(fill).\n     *    If parameter is omitted, buffer will be filled with zeros.\n     * @param encoding encoding used for call to buf.fill while initalizing\n     */\n    static alloc(size: number, fill?: string | Buffer | number, encoding?: string): Buffer;\n    /**\n     * Allocates a new buffer of {size} octets, leaving memory not initialized, so the contents\n     * of the newly created Buffer are unknown and may contain sensitive data.\n     *\n     * @param size count of octets to allocate\n     */\n    static allocUnsafe(size: number): Buffer;\n    /**\n     * Allocates a new non-pooled buffer of {size} octets, leaving memory not initialized, so the contents\n     * of the newly created Buffer are unknown and may contain sensitive data.\n     *\n     * @param size count of octets to allocate\n     */\n    static allocUnsafeSlow(size: number): Buffer;\n  }\n}","file://node_modules/ipaddr.js/package.json":"{\"name\":\"ipaddr.js\",\"types\":\"./lib/ipaddr.js.d.ts\"}","file://node_modules/ipaddr.js/./lib/ipaddr.js.d.ts":"declare module \"ipaddr.js\" {\n    type IPv4Range = 'unicast' | 'unspecified' | 'broadcast' | 'multicast' | 'linkLocal' | 'loopback' | 'carrierGradeNat' | 'private' | 'reserved';\n    type IPv6Range = 'unicast' | 'unspecified' | 'linkLocal' | 'multicast' | 'loopback' | 'uniqueLocal' | 'ipv4Mapped' | 'rfc6145' | 'rfc6052' | '6to4' | 'teredo' | 'reserved';\n\n    interface RangeList<T> {\n        [name: string]: [T, number] | [T, number][];\n    }\n\n    // Common methods/properties for IPv4 and IPv6 classes.\n    class IP {\n        prefixLengthFromSubnetMask(): number | null;\n        toByteArray(): number[];\n        toNormalizedString(): string;\n        toString(): string;\n    }\n\n    namespace Address {\n        export function isValid(addr: string): boolean;\n        export function fromByteArray(bytes: number[]): IPv4 | IPv6;\n        export function parse(addr: string): IPv4 | IPv6;\n        export function parseCIDR(mask: string): [IPv4 | IPv6, number];\n        export function process(addr: string): IPv4 | IPv6;\n        export function subnetMatch(addr: IPv4, rangeList: RangeList<IPv4>, defaultName?: string): string;\n        export function subnetMatch(addr: IPv6, rangeList: RangeList<IPv6>, defaultName?: string): string;\n\n        export class IPv4 extends IP {\n            static broadcastAddressFromCIDR(addr: string): IPv4;\n            static isIPv4(addr: string): boolean;\n            static isValidFourPartDecimal(addr: string): boolean;\n            static isValid(addr: string): boolean;\n            static networkAddressFromCIDR(addr: string): IPv4;\n            static parse(addr: string): IPv4;\n            static parseCIDR(addr: string): [IPv4, number];\n            static subnetMaskFromPrefixLength(prefix: number): IPv4;\n            constructor(octets: number[]);\n            octets: number[]\n\n            kind(): 'ipv4';\n            match(addr: IPv4, bits: number): boolean;\n            match(mask: [IPv4, number]): boolean;\n            range(): IPv4Range;\n            subnetMatch(rangeList: RangeList<IPv4>, defaultName?: string): string;\n            toIPv4MappedAddress(): IPv6;\n        }\n\n        export class IPv6 extends IP {\n            static broadcastAddressFromCIDR(addr: string): IPv6;\n            static isIPv6(addr: string): boolean;\n            static isValid(addr: string): boolean;\n            static parse(addr: string): IPv6;\n            static parseCIDR(addr: string): [IPv6, number];\n            static subnetMaskFromPrefixLength(prefix: number): IPv6;\n            constructor(parts: number[]);\n            parts: number[]\n            zoneId?: string\n\n            isIPv4MappedAddress(): boolean;\n            kind(): 'ipv6';\n            match(addr: IPv6, bits: number): boolean;\n            match(mask: [IPv6, number]): boolean;\n            range(): IPv6Range;\n            subnetMatch(rangeList: RangeList<IPv6>, defaultName?: string): string;\n            toIPv4Address(): IPv4;\n        }\n    }\n\n    export = Address;\n}\n","file://node_modules/@takaro/apiclient/package.json":"{\"name\":\"@takaro/apiclient\",\"types\":\"dist/main.d.ts\"}","file://node_modules/@takaro/apiclient/dist/generated/api.d.ts":"/**\n * Takaro app-api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: development - 7592ea1df1cd1407afe997f0c239d3a9e195235f\n * Contact: support@takaro.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/**\n *\n * @export\n * @interface APIOutput\n */\ninterface APIOutput {\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof APIOutput\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ActivityInputDTO\n */\ninterface ActivityInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ActivityInputDTO\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ActivityInputDTO\n     */\n    timeType: ActivityInputDTOTimeTypeEnum;\n    /**\n     *\n     * @type {string}\n     * @memberof ActivityInputDTO\n     */\n    dataType: ActivityInputDTODataTypeEnum;\n    /**\n     *\n     * @type {string}\n     * @memberof ActivityInputDTO\n     */\n    startDate?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ActivityInputDTO\n     */\n    endDate?: string;\n}\ndeclare const ActivityInputDTOTimeTypeEnum: {\n    readonly Daily: \"daily\";\n    readonly Weekly: \"weekly\";\n    readonly Monthly: \"monthly\";\n};\ntype ActivityInputDTOTimeTypeEnum = (typeof ActivityInputDTOTimeTypeEnum)[keyof typeof ActivityInputDTOTimeTypeEnum];\ndeclare const ActivityInputDTODataTypeEnum: {\n    readonly Users: \"users\";\n    readonly Players: \"players\";\n};\ntype ActivityInputDTODataTypeEnum = (typeof ActivityInputDTODataTypeEnum)[keyof typeof ActivityInputDTODataTypeEnum];\n/**\n *\n * @export\n * @interface AllowedFilters\n */\ninterface AllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof AllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface BanCreateDTO\n */\ninterface BanCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof BanCreateDTO\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof BanCreateDTO\n     */\n    playerId: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof BanCreateDTO\n     */\n    takaroManaged?: boolean;\n    /**\n     *\n     * @type {boolean}\n     * @memberof BanCreateDTO\n     */\n    isGlobal?: boolean;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BanCreateDTO\n     */\n    until?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof BanCreateDTO\n     */\n    reason?: string;\n}\n/**\n *\n * @export\n * @interface BanDTO\n */\ninterface BanDTO {\n    /**\n     *\n     * @type {IGamePlayer}\n     * @memberof BanDTO\n     */\n    player: IGamePlayer;\n    /**\n     *\n     * @type {string}\n     * @memberof BanDTO\n     */\n    reason: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BanDTO\n     */\n    expiresAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface BanOutputArrayDTOAPI\n */\ninterface BanOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<BanOutputDTO>}\n     * @memberof BanOutputArrayDTOAPI\n     */\n    data: Array<BanOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof BanOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface BanOutputDTO\n */\ninterface BanOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof BanOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof BanOutputDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof BanOutputDTO\n     */\n    playerId: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof BanOutputDTO\n     */\n    takaroManaged: boolean;\n    /**\n     *\n     * @type {boolean}\n     * @memberof BanOutputDTO\n     */\n    isGlobal: boolean;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BanOutputDTO\n     */\n    until?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof BanOutputDTO\n     */\n    reason?: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BanOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BanOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface BanOutputDTOAPI\n */\ninterface BanOutputDTOAPI {\n    /**\n     *\n     * @type {BanOutputDTO}\n     * @memberof BanOutputDTOAPI\n     */\n    data: BanOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof BanOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface BanPlayerInputDTO\n */\ninterface BanPlayerInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof BanPlayerInputDTO\n     */\n    reason?: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BanPlayerInputDTO\n     */\n    expiresAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface BanPlayerOutputDTO\n */\ninterface BanPlayerOutputDTO {\n    /**\n     *\n     * @type {Array<BanDTO>}\n     * @memberof BanPlayerOutputDTO\n     */\n    data: Array<BanDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof BanPlayerOutputDTO\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface BanSearchInputAllowedFilters\n */\ninterface BanSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof BanSearchInputAllowedFilters\n     */\n    gameServerId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof BanSearchInputAllowedFilters\n     */\n    playerId?: Array<string>;\n    /**\n     *\n     * @type {Array<boolean>}\n     * @memberof BanSearchInputAllowedFilters\n     */\n    takaroManaged?: Array<boolean>;\n    /**\n     *\n     * @type {Array<boolean>}\n     * @memberof BanSearchInputAllowedFilters\n     */\n    isGlobal?: Array<boolean>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof BanSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface BanSearchInputAllowedRangeFilter\n */\ninterface BanSearchInputAllowedRangeFilter {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BanSearchInputAllowedRangeFilter\n     */\n    until?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BanSearchInputAllowedRangeFilter\n     */\n    createdAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BanSearchInputAllowedRangeFilter\n     */\n    updatedAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface BanSearchInputDTO\n */\ninterface BanSearchInputDTO {\n    /**\n     *\n     * @type {BanSearchInputAllowedFilters}\n     * @memberof BanSearchInputDTO\n     */\n    filters?: BanSearchInputAllowedFilters;\n    /**\n     *\n     * @type {BanSearchInputAllowedRangeFilter}\n     * @memberof BanSearchInputDTO\n     */\n    greaterThan?: BanSearchInputAllowedRangeFilter;\n    /**\n     *\n     * @type {BanSearchInputAllowedRangeFilter}\n     * @memberof BanSearchInputDTO\n     */\n    lessThan?: BanSearchInputAllowedRangeFilter;\n    /**\n     *\n     * @type {any}\n     * @memberof BanSearchInputDTO\n     */\n    search?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof BanSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof BanSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof BanSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof BanSearchInputDTO\n     */\n    sortDirection?: BanSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof BanSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const BanSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype BanSearchInputDTOSortDirectionEnum = (typeof BanSearchInputDTOSortDirectionEnum)[keyof typeof BanSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface BanUpdateDTO\n */\ninterface BanUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof BanUpdateDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof BanUpdateDTO\n     */\n    playerId: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof BanUpdateDTO\n     */\n    takaroManaged?: boolean;\n    /**\n     *\n     * @type {boolean}\n     * @memberof BanUpdateDTO\n     */\n    isGlobal?: boolean;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BanUpdateDTO\n     */\n    until?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof BanUpdateDTO\n     */\n    reason?: string;\n}\n/**\n *\n * @export\n * @interface BaseDiscordEvent\n */\ninterface BaseDiscordEvent {\n    /**\n     *\n     * @type {string}\n     * @memberof BaseDiscordEvent\n     */\n    msg: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BaseDiscordEvent\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface BaseEvent\n */\ninterface BaseEvent {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BaseEvent\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface BaseGameEvent\n */\ninterface BaseGameEvent {\n    /**\n     *\n     * @type {string}\n     * @memberof BaseGameEvent\n     */\n    msg?: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BaseGameEvent\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface BaseStatsInputDTO\n */\ninterface BaseStatsInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof BaseStatsInputDTO\n     */\n    startDate?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof BaseStatsInputDTO\n     */\n    endDate?: string;\n}\n/**\n *\n * @export\n * @interface BaseTakaroEvent\n */\ninterface BaseTakaroEvent {\n    /**\n     *\n     * @type {string}\n     * @memberof BaseTakaroEvent\n     */\n    msg: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof BaseTakaroEvent\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface CommandArgumentCreateDTO\n */\ninterface CommandArgumentCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentCreateDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentCreateDTO\n     */\n    type: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentCreateDTO\n     */\n    helpText?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentCreateDTO\n     */\n    defaultValue?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof CommandArgumentCreateDTO\n     */\n    position: number;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentCreateDTO\n     */\n    commandId?: string;\n}\n/**\n *\n * @export\n * @interface CommandArgumentDTOAPI\n */\ninterface CommandArgumentDTOAPI {\n    /**\n     *\n     * @type {CommandArgumentOutputDTO}\n     * @memberof CommandArgumentDTOAPI\n     */\n    data: CommandArgumentOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof CommandArgumentDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface CommandArgumentOutputDTO\n */\ninterface CommandArgumentOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentOutputDTO\n     */\n    type: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentOutputDTO\n     */\n    helpText: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentOutputDTO\n     */\n    defaultValue?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof CommandArgumentOutputDTO\n     */\n    position: number;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof CommandArgumentOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof CommandArgumentOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface CommandArgumentUpdateDTO\n */\ninterface CommandArgumentUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentUpdateDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentUpdateDTO\n     */\n    type?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentUpdateDTO\n     */\n    helpText?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandArgumentUpdateDTO\n     */\n    defaultValue?: string;\n}\n/**\n *\n * @export\n * @interface CommandCreateDTO\n */\ninterface CommandCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof CommandCreateDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandCreateDTO\n     */\n    trigger: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandCreateDTO\n     */\n    helpText?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandCreateDTO\n     */\n    versionId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandCreateDTO\n     */\n    function?: string;\n    /**\n     *\n     * @type {Array<CommandArgumentCreateDTO>}\n     * @memberof CommandCreateDTO\n     */\n    arguments?: Array<CommandArgumentCreateDTO>;\n}\n/**\n *\n * @export\n * @interface CommandExecuteDTOAPI\n */\ninterface CommandExecuteDTOAPI {\n    /**\n     *\n     * @type {CommandOutput}\n     * @memberof CommandExecuteDTOAPI\n     */\n    data: CommandOutput;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof CommandExecuteDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface CommandExecuteInputDTO\n */\ninterface CommandExecuteInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof CommandExecuteInputDTO\n     */\n    command: string;\n}\n/**\n *\n * @export\n * @interface CommandOutput\n */\ninterface CommandOutput {\n    /**\n     *\n     * @type {string}\n     * @memberof CommandOutput\n     */\n    rawResult: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof CommandOutput\n     */\n    success: boolean;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandOutput\n     */\n    errorMessage?: string;\n}\n/**\n *\n * @export\n * @interface CommandOutputArrayDTOAPI\n */\ninterface CommandOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<CommandOutputDTO>}\n     * @memberof CommandOutputArrayDTOAPI\n     */\n    data: Array<CommandOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof CommandOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface CommandOutputDTO\n */\ninterface CommandOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof CommandOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandOutputDTO\n     */\n    trigger: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandOutputDTO\n     */\n    helpText: string;\n    /**\n     *\n     * @type {FunctionOutputDTO}\n     * @memberof CommandOutputDTO\n     */\n    function: FunctionOutputDTO;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandOutputDTO\n     */\n    functionId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandOutputDTO\n     */\n    versionId: string;\n    /**\n     *\n     * @type {Array<CommandArgumentOutputDTO>}\n     * @memberof CommandOutputDTO\n     */\n    arguments: Array<CommandArgumentOutputDTO>;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof CommandOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof CommandOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface CommandOutputDTOAPI\n */\ninterface CommandOutputDTOAPI {\n    /**\n     *\n     * @type {CommandOutputDTO}\n     * @memberof CommandOutputDTOAPI\n     */\n    data: CommandOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof CommandOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface CommandSearchInputAllowedFilters\n */\ninterface CommandSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof CommandSearchInputAllowedFilters\n     */\n    moduleId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof CommandSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<boolean>}\n     * @memberof CommandSearchInputAllowedFilters\n     */\n    enabled?: Array<boolean>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof CommandSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface CommandSearchInputAllowedSearch\n */\ninterface CommandSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof CommandSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n}\n/**\n *\n * @export\n * @interface CommandSearchInputDTO\n */\ninterface CommandSearchInputDTO {\n    /**\n     *\n     * @type {CommandSearchInputAllowedFilters}\n     * @memberof CommandSearchInputDTO\n     */\n    filters?: CommandSearchInputAllowedFilters;\n    /**\n     *\n     * @type {CommandSearchInputAllowedSearch}\n     * @memberof CommandSearchInputDTO\n     */\n    search?: CommandSearchInputAllowedSearch;\n    /**\n     *\n     * @type {any}\n     * @memberof CommandSearchInputDTO\n     */\n    greaterThan?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof CommandSearchInputDTO\n     */\n    lessThan?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof CommandSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof CommandSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandSearchInputDTO\n     */\n    sortDirection?: CommandSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof CommandSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const CommandSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype CommandSearchInputDTOSortDirectionEnum = (typeof CommandSearchInputDTOSortDirectionEnum)[keyof typeof CommandSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface CommandTriggerDTO\n */\ninterface CommandTriggerDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof CommandTriggerDTO\n     */\n    playerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandTriggerDTO\n     */\n    msg: string;\n}\n/**\n *\n * @export\n * @interface CommandUpdateDTO\n */\ninterface CommandUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof CommandUpdateDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandUpdateDTO\n     */\n    trigger?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandUpdateDTO\n     */\n    helpText?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CommandUpdateDTO\n     */\n    function?: string;\n    /**\n     *\n     * @type {Array<CommandArgumentCreateDTO>}\n     * @memberof CommandUpdateDTO\n     */\n    arguments?: Array<CommandArgumentCreateDTO>;\n}\n/**\n *\n * @export\n * @interface CountryStatsInputDTO\n */\ninterface CountryStatsInputDTO {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof CountryStatsInputDTO\n     */\n    gameServerId?: Array<string>;\n}\n/**\n *\n * @export\n * @interface CronJobCreateDTO\n */\ninterface CronJobCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobCreateDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobCreateDTO\n     */\n    temporalValue: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobCreateDTO\n     */\n    versionId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobCreateDTO\n     */\n    function?: string;\n}\n/**\n *\n * @export\n * @interface CronJobOutputArrayDTOAPI\n */\ninterface CronJobOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<CronJobOutputDTO>}\n     * @memberof CronJobOutputArrayDTOAPI\n     */\n    data: Array<CronJobOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof CronJobOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface CronJobOutputDTO\n */\ninterface CronJobOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobOutputDTO\n     */\n    temporalValue: string;\n    /**\n     *\n     * @type {FunctionOutputDTO}\n     * @memberof CronJobOutputDTO\n     */\n    function: FunctionOutputDTO;\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobOutputDTO\n     */\n    versionId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof CronJobOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof CronJobOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface CronJobOutputDTOAPI\n */\ninterface CronJobOutputDTOAPI {\n    /**\n     *\n     * @type {CronJobOutputDTO}\n     * @memberof CronJobOutputDTOAPI\n     */\n    data: CronJobOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof CronJobOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface CronJobSearchInputAllowedFilters\n */\ninterface CronJobSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof CronJobSearchInputAllowedFilters\n     */\n    moduleId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof CronJobSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof CronJobSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface CronJobSearchInputAllowedSearch\n */\ninterface CronJobSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof CronJobSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n}\n/**\n *\n * @export\n * @interface CronJobSearchInputDTO\n */\ninterface CronJobSearchInputDTO {\n    /**\n     *\n     * @type {CronJobSearchInputAllowedFilters}\n     * @memberof CronJobSearchInputDTO\n     */\n    filters?: CronJobSearchInputAllowedFilters;\n    /**\n     *\n     * @type {CronJobSearchInputAllowedSearch}\n     * @memberof CronJobSearchInputDTO\n     */\n    search?: CronJobSearchInputAllowedSearch;\n    /**\n     *\n     * @type {any}\n     * @memberof CronJobSearchInputDTO\n     */\n    greaterThan?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof CronJobSearchInputDTO\n     */\n    lessThan?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof CronJobSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof CronJobSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobSearchInputDTO\n     */\n    sortDirection?: CronJobSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof CronJobSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const CronJobSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype CronJobSearchInputDTOSortDirectionEnum = (typeof CronJobSearchInputDTOSortDirectionEnum)[keyof typeof CronJobSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface CronJobTriggerDTO\n */\ninterface CronJobTriggerDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobTriggerDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobTriggerDTO\n     */\n    cronjobId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobTriggerDTO\n     */\n    moduleId: string;\n}\n/**\n *\n * @export\n * @interface CronJobUpdateDTO\n */\ninterface CronJobUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobUpdateDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobUpdateDTO\n     */\n    temporalValue?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof CronJobUpdateDTO\n     */\n    function?: string;\n}\n/**\n *\n * @export\n * @interface DiscordInviteOutputDTO\n */\ninterface DiscordInviteOutputDTO {\n    /**\n     *\n     * @type {InviteOutputDTO}\n     * @memberof DiscordInviteOutputDTO\n     */\n    data: InviteOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof DiscordInviteOutputDTO\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface DiscordParamId\n */\ninterface DiscordParamId {\n    /**\n     *\n     * @type {string}\n     * @memberof DiscordParamId\n     */\n    id: string;\n}\n/**\n *\n * @export\n * @interface DomainCreateInputDTO\n */\ninterface DomainCreateInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof DomainCreateInputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof DomainCreateInputDTO\n     */\n    id?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof DomainCreateInputDTO\n     */\n    state?: DomainCreateInputDTOStateEnum;\n    /**\n     *\n     * @type {string}\n     * @memberof DomainCreateInputDTO\n     */\n    externalReference?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainCreateInputDTO\n     */\n    maxGameservers?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainCreateInputDTO\n     */\n    maxUsers?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainCreateInputDTO\n     */\n    eventRetentionDays?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainCreateInputDTO\n     */\n    maxVariables?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainCreateInputDTO\n     */\n    maxModules?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainCreateInputDTO\n     */\n    maxFunctionsInModule?: number;\n}\ndeclare const DomainCreateInputDTOStateEnum: {\n    readonly Active: \"ACTIVE\";\n    readonly Disabled: \"DISABLED\";\n    readonly Maintenance: \"MAINTENANCE\";\n};\ntype DomainCreateInputDTOStateEnum = (typeof DomainCreateInputDTOStateEnum)[keyof typeof DomainCreateInputDTOStateEnum];\n/**\n *\n * @export\n * @interface DomainCreateOutputDTO\n */\ninterface DomainCreateOutputDTO {\n    /**\n     *\n     * @type {DomainOutputDTO}\n     * @memberof DomainCreateOutputDTO\n     */\n    createdDomain: DomainOutputDTO;\n    /**\n     *\n     * @type {UserOutputDTO}\n     * @memberof DomainCreateOutputDTO\n     */\n    rootUser: UserOutputDTO;\n    /**\n     *\n     * @type {RoleOutputDTO}\n     * @memberof DomainCreateOutputDTO\n     */\n    rootRole: RoleOutputDTO;\n    /**\n     *\n     * @type {string}\n     * @memberof DomainCreateOutputDTO\n     */\n    password: string;\n}\n/**\n *\n * @export\n * @interface DomainCreateOutputDTOAPI\n */\ninterface DomainCreateOutputDTOAPI {\n    /**\n     *\n     * @type {DomainCreateOutputDTO}\n     * @memberof DomainCreateOutputDTOAPI\n     */\n    data: DomainCreateOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof DomainCreateOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface DomainOutputArrayDTOAPI\n */\ninterface DomainOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<DomainOutputDTO>}\n     * @memberof DomainOutputArrayDTOAPI\n     */\n    data: Array<DomainOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof DomainOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface DomainOutputDTO\n */\ninterface DomainOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof DomainOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof DomainOutputDTO\n     */\n    externalReference: string;\n    /**\n     *\n     * @type {string}\n     * @memberof DomainOutputDTO\n     */\n    state: DomainOutputDTOStateEnum;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainOutputDTO\n     */\n    rateLimitPoints: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainOutputDTO\n     */\n    rateLimitDuration: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainOutputDTO\n     */\n    maxGameservers: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainOutputDTO\n     */\n    maxUsers: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainOutputDTO\n     */\n    eventRetentionDays: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainOutputDTO\n     */\n    maxVariables: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainOutputDTO\n     */\n    maxModules: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainOutputDTO\n     */\n    maxFunctionsInModule: number;\n    /**\n     *\n     * @type {string}\n     * @memberof DomainOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof DomainOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof DomainOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\ndeclare const DomainOutputDTOStateEnum: {\n    readonly Active: \"ACTIVE\";\n    readonly Disabled: \"DISABLED\";\n    readonly Maintenance: \"MAINTENANCE\";\n};\ntype DomainOutputDTOStateEnum = (typeof DomainOutputDTOStateEnum)[keyof typeof DomainOutputDTOStateEnum];\n/**\n *\n * @export\n * @interface DomainOutputDTOAPI\n */\ninterface DomainOutputDTOAPI {\n    /**\n     *\n     * @type {DomainOutputDTO}\n     * @memberof DomainOutputDTOAPI\n     */\n    data: DomainOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof DomainOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface DomainSearchInputAllowedFilters\n */\ninterface DomainSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof DomainSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof DomainSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof DomainSearchInputAllowedFilters\n     */\n    state?: Array<DomainSearchInputAllowedFiltersStateEnum>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof DomainSearchInputAllowedFilters\n     */\n    externalReference?: Array<string>;\n}\ndeclare const DomainSearchInputAllowedFiltersStateEnum: {\n    readonly Active: \"ACTIVE\";\n    readonly Disabled: \"DISABLED\";\n    readonly Maintenance: \"MAINTENANCE\";\n};\ntype DomainSearchInputAllowedFiltersStateEnum = (typeof DomainSearchInputAllowedFiltersStateEnum)[keyof typeof DomainSearchInputAllowedFiltersStateEnum];\n/**\n *\n * @export\n * @interface DomainSearchInputAllowedSearch\n */\ninterface DomainSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof DomainSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof DomainSearchInputAllowedSearch\n     */\n    externalReference?: Array<string>;\n}\n/**\n *\n * @export\n * @interface DomainSearchInputDTO\n */\ninterface DomainSearchInputDTO {\n    /**\n     *\n     * @type {DomainSearchInputAllowedFilters}\n     * @memberof DomainSearchInputDTO\n     */\n    filters?: DomainSearchInputAllowedFilters;\n    /**\n     *\n     * @type {DomainSearchInputAllowedSearch}\n     * @memberof DomainSearchInputDTO\n     */\n    search?: DomainSearchInputAllowedSearch;\n    /**\n     *\n     * @type {any}\n     * @memberof DomainSearchInputDTO\n     */\n    greaterThan?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof DomainSearchInputDTO\n     */\n    lessThan?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof DomainSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof DomainSearchInputDTO\n     */\n    sortDirection?: DomainSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof DomainSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const DomainSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype DomainSearchInputDTOSortDirectionEnum = (typeof DomainSearchInputDTOSortDirectionEnum)[keyof typeof DomainSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface DomainUpdateInputDTO\n */\ninterface DomainUpdateInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof DomainUpdateInputDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof DomainUpdateInputDTO\n     */\n    externalReference?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof DomainUpdateInputDTO\n     */\n    state?: DomainUpdateInputDTOStateEnum;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainUpdateInputDTO\n     */\n    maxGameservers?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainUpdateInputDTO\n     */\n    maxUsers?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainUpdateInputDTO\n     */\n    eventRetentionDays?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainUpdateInputDTO\n     */\n    maxVariables?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainUpdateInputDTO\n     */\n    maxModules?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof DomainUpdateInputDTO\n     */\n    maxFunctionsInModule?: number;\n}\ndeclare const DomainUpdateInputDTOStateEnum: {\n    readonly Active: \"ACTIVE\";\n    readonly Disabled: \"DISABLED\";\n    readonly Maintenance: \"MAINTENANCE\";\n};\ntype DomainUpdateInputDTOStateEnum = (typeof DomainUpdateInputDTOStateEnum)[keyof typeof DomainUpdateInputDTOStateEnum];\n/**\n *\n * @export\n * @interface ErrorOutput\n */\ninterface ErrorOutput {\n    /**\n     *\n     * @type {string}\n     * @memberof ErrorOutput\n     */\n    code: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ErrorOutput\n     */\n    message: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ErrorOutput\n     */\n    details: string;\n}\n/**\n *\n * @export\n * @interface EventChatMessage\n */\ninterface EventChatMessage {\n    /**\n     *\n     * @type {IGamePlayer}\n     * @memberof EventChatMessage\n     */\n    player: IGamePlayer;\n    /**\n     *\n     * @type {string}\n     * @memberof EventChatMessage\n     */\n    channel: EventChatMessageChannelEnum;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof EventChatMessage\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof EventChatMessage\n     */\n    msg?: string;\n}\ndeclare const EventChatMessageChannelEnum: {\n    readonly Global: \"global\";\n    readonly Team: \"team\";\n    readonly Friends: \"friends\";\n    readonly Whisper: \"whisper\";\n};\ntype EventChatMessageChannelEnum = (typeof EventChatMessageChannelEnum)[keyof typeof EventChatMessageChannelEnum];\n/**\n *\n * @export\n * @interface EventCreateDTO\n */\ninterface EventCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof EventCreateDTO\n     */\n    eventName: EventCreateDTOEventNameEnum;\n    /**\n     *\n     * @type {string}\n     * @memberof EventCreateDTO\n     */\n    moduleId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventCreateDTO\n     */\n    playerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventCreateDTO\n     */\n    userId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventCreateDTO\n     */\n    gameserverId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventCreateDTO\n     */\n    actingUserId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventCreateDTO\n     */\n    actingModuleId?: string;\n    /**\n     *\n     * @type {object}\n     * @memberof EventCreateDTO\n     */\n    meta?: object;\n}\ndeclare const EventCreateDTOEventNameEnum: {\n    readonly RoleAssigned: \"role-assigned\";\n    readonly RoleRemoved: \"role-removed\";\n    readonly RoleCreated: \"role-created\";\n    readonly RoleUpdated: \"role-updated\";\n    readonly RoleDeleted: \"role-deleted\";\n    readonly CommandExecuted: \"command-executed\";\n    readonly HookExecuted: \"hook-executed\";\n    readonly CronjobExecuted: \"cronjob-executed\";\n    readonly CurrencyAdded: \"currency-added\";\n    readonly CurrencyDeducted: \"currency-deducted\";\n    readonly SettingsSet: \"settings-set\";\n    readonly PlayerNewIpDetected: \"player-new-ip-detected\";\n    readonly ServerStatusChanged: \"server-status-changed\";\n    readonly ModuleCreated: \"module-created\";\n    readonly ModuleUpdated: \"module-updated\";\n    readonly ModuleDeleted: \"module-deleted\";\n    readonly ModuleInstalled: \"module-installed\";\n    readonly ModuleUninstalled: \"module-uninstalled\";\n    readonly PlayerCreated: \"player-created\";\n    readonly ShopListingCreated: \"shop-listing-created\";\n    readonly ShopListingUpdated: \"shop-listing-updated\";\n    readonly ShopListingDeleted: \"shop-listing-deleted\";\n    readonly ShopOrderCreated: \"shop-order-created\";\n    readonly ShopOrderStatusChanged: \"shop-order-status-changed\";\n    readonly PlayerLinked: \"player-linked\";\n    readonly GameserverCreated: \"gameserver-created\";\n    readonly GameserverUpdated: \"gameserver-updated\";\n    readonly GameserverDeleted: \"gameserver-deleted\";\n    readonly PlayerConnected: \"player-connected\";\n    readonly PlayerDisconnected: \"player-disconnected\";\n    readonly ChatMessage: \"chat-message\";\n    readonly PlayerDeath: \"player-death\";\n    readonly EntityKilled: \"entity-killed\";\n};\ntype EventCreateDTOEventNameEnum = (typeof EventCreateDTOEventNameEnum)[keyof typeof EventCreateDTOEventNameEnum];\n/**\n *\n * @export\n * @interface EventDiscordChannel\n */\ninterface EventDiscordChannel {\n    /**\n     *\n     * @type {string}\n     * @memberof EventDiscordChannel\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventDiscordChannel\n     */\n    name: string;\n}\n/**\n *\n * @export\n * @interface EventDiscordUser\n */\ninterface EventDiscordUser {\n    /**\n     *\n     * @type {string}\n     * @memberof EventDiscordUser\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventDiscordUser\n     */\n    username: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventDiscordUser\n     */\n    displayName: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof EventDiscordUser\n     */\n    isBot: boolean;\n    /**\n     *\n     * @type {boolean}\n     * @memberof EventDiscordUser\n     */\n    isTakaroBot: boolean;\n}\n/**\n *\n * @export\n * @interface EventEntityKilled\n */\ninterface EventEntityKilled {\n    /**\n     *\n     * @type {IGamePlayer}\n     * @memberof EventEntityKilled\n     */\n    player: IGamePlayer;\n    /**\n     *\n     * @type {string}\n     * @memberof EventEntityKilled\n     */\n    entity: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventEntityKilled\n     */\n    weapon: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof EventEntityKilled\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof EventEntityKilled\n     */\n    msg?: string;\n}\n/**\n *\n * @export\n * @interface EventLogLine\n */\ninterface EventLogLine {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof EventLogLine\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof EventLogLine\n     */\n    msg?: string;\n}\n/**\n *\n * @export\n * @interface EventOutputArrayDTOAPI\n */\ninterface EventOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<EventOutputDTO>}\n     * @memberof EventOutputArrayDTOAPI\n     */\n    data: Array<EventOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof EventOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface EventOutputDTO\n */\ninterface EventOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof EventOutputDTO\n     */\n    eventName: EventOutputDTOEventNameEnum;\n    /**\n     *\n     * @type {string}\n     * @memberof EventOutputDTO\n     */\n    moduleId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventOutputDTO\n     */\n    playerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventOutputDTO\n     */\n    userId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventOutputDTO\n     */\n    gameserverId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventOutputDTO\n     */\n    actingUserId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventOutputDTO\n     */\n    actingModuleId?: string;\n    /**\n     *\n     * @type {EventOutputDTOMeta}\n     * @memberof EventOutputDTO\n     */\n    meta?: EventOutputDTOMeta;\n    /**\n     *\n     * @type {PlayerOutputDTO}\n     * @memberof EventOutputDTO\n     */\n    player?: PlayerOutputDTO;\n    /**\n     *\n     * @type {GameServerOutputDTO}\n     * @memberof EventOutputDTO\n     */\n    gameServer?: GameServerOutputDTO;\n    /**\n     *\n     * @type {ModuleOutputDTO}\n     * @memberof EventOutputDTO\n     */\n    module?: ModuleOutputDTO;\n    /**\n     *\n     * @type {UserOutputDTO}\n     * @memberof EventOutputDTO\n     */\n    user?: UserOutputDTO;\n    /**\n     *\n     * @type {string}\n     * @memberof EventOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof EventOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof EventOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\ndeclare const EventOutputDTOEventNameEnum: {\n    readonly RoleAssigned: \"role-assigned\";\n    readonly RoleRemoved: \"role-removed\";\n    readonly RoleCreated: \"role-created\";\n    readonly RoleUpdated: \"role-updated\";\n    readonly RoleDeleted: \"role-deleted\";\n    readonly CommandExecuted: \"command-executed\";\n    readonly HookExecuted: \"hook-executed\";\n    readonly CronjobExecuted: \"cronjob-executed\";\n    readonly CurrencyAdded: \"currency-added\";\n    readonly CurrencyDeducted: \"currency-deducted\";\n    readonly SettingsSet: \"settings-set\";\n    readonly PlayerNewIpDetected: \"player-new-ip-detected\";\n    readonly ServerStatusChanged: \"server-status-changed\";\n    readonly ModuleCreated: \"module-created\";\n    readonly ModuleUpdated: \"module-updated\";\n    readonly ModuleDeleted: \"module-deleted\";\n    readonly ModuleInstalled: \"module-installed\";\n    readonly ModuleUninstalled: \"module-uninstalled\";\n    readonly PlayerCreated: \"player-created\";\n    readonly ShopListingCreated: \"shop-listing-created\";\n    readonly ShopListingUpdated: \"shop-listing-updated\";\n    readonly ShopListingDeleted: \"shop-listing-deleted\";\n    readonly ShopOrderCreated: \"shop-order-created\";\n    readonly ShopOrderStatusChanged: \"shop-order-status-changed\";\n    readonly PlayerLinked: \"player-linked\";\n    readonly GameserverCreated: \"gameserver-created\";\n    readonly GameserverUpdated: \"gameserver-updated\";\n    readonly GameserverDeleted: \"gameserver-deleted\";\n    readonly PlayerConnected: \"player-connected\";\n    readonly PlayerDisconnected: \"player-disconnected\";\n    readonly ChatMessage: \"chat-message\";\n    readonly PlayerDeath: \"player-death\";\n    readonly EntityKilled: \"entity-killed\";\n};\ntype EventOutputDTOEventNameEnum = (typeof EventOutputDTOEventNameEnum)[keyof typeof EventOutputDTOEventNameEnum];\n/**\n * @type EventOutputDTOMeta\n * @export\n */\ntype EventOutputDTOMeta = EventChatMessage | EventEntityKilled | EventLogLine | EventPlayerConnected | EventPlayerDeath | EventPlayerDisconnected | HookEventDiscordMessage | TakaroEventCommandExecuted | TakaroEventCronjobExecuted | TakaroEventCurrencyAdded | TakaroEventCurrencyDeducted | TakaroEventGameserverCreated | TakaroEventGameserverDeleted | TakaroEventGameserverUpdated | TakaroEventHookExecuted | TakaroEventModuleCreated | TakaroEventModuleDeleted | TakaroEventModuleInstalled | TakaroEventModuleUninstalled | TakaroEventModuleUpdated | TakaroEventPlayerCreated | TakaroEventPlayerLinked | TakaroEventPlayerNewIpDetected | TakaroEventRoleAssigned | TakaroEventRoleCreated | TakaroEventRoleDeleted | TakaroEventRoleRemoved | TakaroEventRoleUpdated | TakaroEventServerStatusChanged | TakaroEventSettingsSet | TakaroEventShopListingCreated | TakaroEventShopListingDeleted | TakaroEventShopListingUpdated | TakaroEventShopOrderCreated | TakaroEventShopOrderStatusChanged;\n/**\n *\n * @export\n * @interface EventPlayerConnected\n */\ninterface EventPlayerConnected {\n    /**\n     *\n     * @type {IGamePlayer}\n     * @memberof EventPlayerConnected\n     */\n    player: IGamePlayer;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof EventPlayerConnected\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof EventPlayerConnected\n     */\n    msg?: string;\n}\n/**\n *\n * @export\n * @interface EventPlayerDeath\n */\ninterface EventPlayerDeath {\n    /**\n     *\n     * @type {IGamePlayer}\n     * @memberof EventPlayerDeath\n     */\n    player: IGamePlayer;\n    /**\n     *\n     * @type {IGamePlayer}\n     * @memberof EventPlayerDeath\n     */\n    attacker?: IGamePlayer;\n    /**\n     *\n     * @type {IPosition}\n     * @memberof EventPlayerDeath\n     */\n    position?: IPosition;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof EventPlayerDeath\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof EventPlayerDeath\n     */\n    msg?: string;\n}\n/**\n *\n * @export\n * @interface EventPlayerDisconnected\n */\ninterface EventPlayerDisconnected {\n    /**\n     *\n     * @type {IGamePlayer}\n     * @memberof EventPlayerDisconnected\n     */\n    player: IGamePlayer;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof EventPlayerDisconnected\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof EventPlayerDisconnected\n     */\n    msg?: string;\n}\n/**\n *\n * @export\n * @interface EventSearchInputAllowedFilters\n */\ninterface EventSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof EventSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof EventSearchInputAllowedFilters\n     */\n    eventName?: Array<EventSearchInputAllowedFiltersEventNameEnum>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof EventSearchInputAllowedFilters\n     */\n    moduleId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof EventSearchInputAllowedFilters\n     */\n    playerId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof EventSearchInputAllowedFilters\n     */\n    gameserverId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof EventSearchInputAllowedFilters\n     */\n    actingUserId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof EventSearchInputAllowedFilters\n     */\n    actingModuleId?: Array<string>;\n}\ndeclare const EventSearchInputAllowedFiltersEventNameEnum: {\n    readonly RoleAssigned: \"role-assigned\";\n    readonly RoleRemoved: \"role-removed\";\n    readonly RoleCreated: \"role-created\";\n    readonly RoleUpdated: \"role-updated\";\n    readonly RoleDeleted: \"role-deleted\";\n    readonly CommandExecuted: \"command-executed\";\n    readonly HookExecuted: \"hook-executed\";\n    readonly CronjobExecuted: \"cronjob-executed\";\n    readonly CurrencyAdded: \"currency-added\";\n    readonly CurrencyDeducted: \"currency-deducted\";\n    readonly SettingsSet: \"settings-set\";\n    readonly PlayerNewIpDetected: \"player-new-ip-detected\";\n    readonly ServerStatusChanged: \"server-status-changed\";\n    readonly ModuleCreated: \"module-created\";\n    readonly ModuleUpdated: \"module-updated\";\n    readonly ModuleDeleted: \"module-deleted\";\n    readonly ModuleInstalled: \"module-installed\";\n    readonly ModuleUninstalled: \"module-uninstalled\";\n    readonly PlayerCreated: \"player-created\";\n    readonly ShopListingCreated: \"shop-listing-created\";\n    readonly ShopListingUpdated: \"shop-listing-updated\";\n    readonly ShopListingDeleted: \"shop-listing-deleted\";\n    readonly ShopOrderCreated: \"shop-order-created\";\n    readonly ShopOrderStatusChanged: \"shop-order-status-changed\";\n    readonly PlayerLinked: \"player-linked\";\n    readonly GameserverCreated: \"gameserver-created\";\n    readonly GameserverUpdated: \"gameserver-updated\";\n    readonly GameserverDeleted: \"gameserver-deleted\";\n    readonly PlayerConnected: \"player-connected\";\n    readonly PlayerDisconnected: \"player-disconnected\";\n    readonly ChatMessage: \"chat-message\";\n    readonly PlayerDeath: \"player-death\";\n    readonly EntityKilled: \"entity-killed\";\n};\ntype EventSearchInputAllowedFiltersEventNameEnum = (typeof EventSearchInputAllowedFiltersEventNameEnum)[keyof typeof EventSearchInputAllowedFiltersEventNameEnum];\n/**\n *\n * @export\n * @interface EventSearchInputDTO\n */\ninterface EventSearchInputDTO {\n    /**\n     *\n     * @type {EventSearchInputAllowedFilters}\n     * @memberof EventSearchInputDTO\n     */\n    filters?: EventSearchInputAllowedFilters;\n    /**\n     *\n     * @type {RangeFilterCreatedAndUpdatedAt}\n     * @memberof EventSearchInputDTO\n     */\n    greaterThan?: RangeFilterCreatedAndUpdatedAt;\n    /**\n     *\n     * @type {RangeFilterCreatedAndUpdatedAt}\n     * @memberof EventSearchInputDTO\n     */\n    lessThan?: RangeFilterCreatedAndUpdatedAt;\n    /**\n     *\n     * @type {any}\n     * @memberof EventSearchInputDTO\n     */\n    search?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof EventSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof EventSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof EventSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventSearchInputDTO\n     */\n    sortDirection?: EventSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof EventSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const EventSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype EventSearchInputDTOSortDirectionEnum = (typeof EventSearchInputDTOSortDirectionEnum)[keyof typeof EventSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface EventsCountInputDTO\n */\ninterface EventsCountInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof EventsCountInputDTO\n     */\n    eventName: EventsCountInputDTOEventNameEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof EventsCountInputDTO\n     */\n    sumBy?: Array<EventsCountInputDTOSumByEnum>;\n    /**\n     *\n     * @type {string}\n     * @memberof EventsCountInputDTO\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventsCountInputDTO\n     */\n    moduleId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventsCountInputDTO\n     */\n    playerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventsCountInputDTO\n     */\n    userId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventsCountInputDTO\n     */\n    bucketStep: EventsCountInputDTOBucketStepEnum;\n    /**\n     *\n     * @type {string}\n     * @memberof EventsCountInputDTO\n     */\n    startDate?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof EventsCountInputDTO\n     */\n    endDate?: string;\n}\ndeclare const EventsCountInputDTOEventNameEnum: {\n    readonly RoleAssigned: \"role-assigned\";\n    readonly RoleRemoved: \"role-removed\";\n    readonly RoleCreated: \"role-created\";\n    readonly RoleUpdated: \"role-updated\";\n    readonly RoleDeleted: \"role-deleted\";\n    readonly CommandExecuted: \"command-executed\";\n    readonly HookExecuted: \"hook-executed\";\n    readonly CronjobExecuted: \"cronjob-executed\";\n    readonly CurrencyAdded: \"currency-added\";\n    readonly CurrencyDeducted: \"currency-deducted\";\n    readonly SettingsSet: \"settings-set\";\n    readonly PlayerNewIpDetected: \"player-new-ip-detected\";\n    readonly ServerStatusChanged: \"server-status-changed\";\n    readonly ModuleCreated: \"module-created\";\n    readonly ModuleUpdated: \"module-updated\";\n    readonly ModuleDeleted: \"module-deleted\";\n    readonly ModuleInstalled: \"module-installed\";\n    readonly ModuleUninstalled: \"module-uninstalled\";\n    readonly PlayerCreated: \"player-created\";\n    readonly ShopListingCreated: \"shop-listing-created\";\n    readonly ShopListingUpdated: \"shop-listing-updated\";\n    readonly ShopListingDeleted: \"shop-listing-deleted\";\n    readonly ShopOrderCreated: \"shop-order-created\";\n    readonly ShopOrderStatusChanged: \"shop-order-status-changed\";\n    readonly PlayerLinked: \"player-linked\";\n    readonly GameserverCreated: \"gameserver-created\";\n    readonly GameserverUpdated: \"gameserver-updated\";\n    readonly GameserverDeleted: \"gameserver-deleted\";\n    readonly PlayerConnected: \"player-connected\";\n    readonly PlayerDisconnected: \"player-disconnected\";\n    readonly ChatMessage: \"chat-message\";\n    readonly PlayerDeath: \"player-death\";\n    readonly EntityKilled: \"entity-killed\";\n};\ntype EventsCountInputDTOEventNameEnum = (typeof EventsCountInputDTOEventNameEnum)[keyof typeof EventsCountInputDTOEventNameEnum];\ndeclare const EventsCountInputDTOSumByEnum: {\n    readonly Player: \"player\";\n    readonly Module: \"module\";\n    readonly User: \"user\";\n    readonly Gameserver: \"gameserver\";\n};\ntype EventsCountInputDTOSumByEnum = (typeof EventsCountInputDTOSumByEnum)[keyof typeof EventsCountInputDTOSumByEnum];\ndeclare const EventsCountInputDTOBucketStepEnum: {\n    readonly _5m: \"5m\";\n    readonly _30m: \"30m\";\n    readonly _1h: \"1h\";\n    readonly _6h: \"6h\";\n    readonly _12h: \"12h\";\n    readonly _24h: \"24h\";\n};\ntype EventsCountInputDTOBucketStepEnum = (typeof EventsCountInputDTOBucketStepEnum)[keyof typeof EventsCountInputDTOBucketStepEnum];\n/**\n *\n * @export\n * @interface FunctionCreateDTO\n */\ninterface FunctionCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof FunctionCreateDTO\n     */\n    code?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof FunctionCreateDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof FunctionCreateDTO\n     */\n    versionId?: string;\n}\n/**\n *\n * @export\n * @interface FunctionOutputArrayDTOAPI\n */\ninterface FunctionOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<FunctionOutputDTO>}\n     * @memberof FunctionOutputArrayDTOAPI\n     */\n    data: Array<FunctionOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof FunctionOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface FunctionOutputDTO\n */\ninterface FunctionOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof FunctionOutputDTO\n     */\n    code: string;\n    /**\n     *\n     * @type {string}\n     * @memberof FunctionOutputDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof FunctionOutputDTO\n     */\n    versionId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof FunctionOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof FunctionOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof FunctionOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface FunctionOutputDTOAPI\n */\ninterface FunctionOutputDTOAPI {\n    /**\n     *\n     * @type {FunctionOutputDTO}\n     * @memberof FunctionOutputDTOAPI\n     */\n    data: FunctionOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof FunctionOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface FunctionSearchInputAllowedFilters\n */\ninterface FunctionSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof FunctionSearchInputAllowedFilters\n     */\n    moduleId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof FunctionSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof FunctionSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface FunctionSearchInputAllowedSearch\n */\ninterface FunctionSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof FunctionSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n}\n/**\n *\n * @export\n * @interface FunctionSearchInputDTO\n */\ninterface FunctionSearchInputDTO {\n    /**\n     *\n     * @type {FunctionSearchInputAllowedFilters}\n     * @memberof FunctionSearchInputDTO\n     */\n    filters?: FunctionSearchInputAllowedFilters;\n    /**\n     *\n     * @type {FunctionSearchInputAllowedSearch}\n     * @memberof FunctionSearchInputDTO\n     */\n    search?: FunctionSearchInputAllowedSearch;\n    /**\n     *\n     * @type {any}\n     * @memberof FunctionSearchInputDTO\n     */\n    greaterThan?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof FunctionSearchInputDTO\n     */\n    lessThan?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof FunctionSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof FunctionSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof FunctionSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof FunctionSearchInputDTO\n     */\n    sortDirection?: FunctionSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof FunctionSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const FunctionSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype FunctionSearchInputDTOSortDirectionEnum = (typeof FunctionSearchInputDTOSortDirectionEnum)[keyof typeof FunctionSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface FunctionUpdateDTO\n */\ninterface FunctionUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof FunctionUpdateDTO\n     */\n    code?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof FunctionUpdateDTO\n     */\n    name?: string;\n}\n/**\n *\n * @export\n * @interface GameServerCreateDTO\n */\ninterface GameServerCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerCreateDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerCreateDTO\n     */\n    connectionInfo: string;\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerCreateDTO\n     */\n    type: GameServerCreateDTOTypeEnum;\n}\ndeclare const GameServerCreateDTOTypeEnum: {\n    readonly Mock: \"MOCK\";\n    readonly Sevendaystodie: \"SEVENDAYSTODIE\";\n    readonly Rust: \"RUST\";\n};\ntype GameServerCreateDTOTypeEnum = (typeof GameServerCreateDTOTypeEnum)[keyof typeof GameServerCreateDTOTypeEnum];\n/**\n *\n * @export\n * @interface GameServerOutputArrayDTOAPI\n */\ninterface GameServerOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<GameServerOutputDTO>}\n     * @memberof GameServerOutputArrayDTOAPI\n     */\n    data: Array<GameServerOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof GameServerOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface GameServerOutputDTO\n */\ninterface GameServerOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {object}\n     * @memberof GameServerOutputDTO\n     */\n    connectionInfo: object;\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerOutputDTO\n     */\n    type: GameServerOutputDTOTypeEnum;\n    /**\n     *\n     * @type {boolean}\n     * @memberof GameServerOutputDTO\n     */\n    reachable: boolean;\n    /**\n     *\n     * @type {boolean}\n     * @memberof GameServerOutputDTO\n     */\n    enabled: boolean;\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof GameServerOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof GameServerOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\ndeclare const GameServerOutputDTOTypeEnum: {\n    readonly Mock: \"MOCK\";\n    readonly Sevendaystodie: \"SEVENDAYSTODIE\";\n    readonly Rust: \"RUST\";\n};\ntype GameServerOutputDTOTypeEnum = (typeof GameServerOutputDTOTypeEnum)[keyof typeof GameServerOutputDTOTypeEnum];\n/**\n *\n * @export\n * @interface GameServerOutputDTOAPI\n */\ninterface GameServerOutputDTOAPI {\n    /**\n     *\n     * @type {GameServerOutputDTO}\n     * @memberof GameServerOutputDTOAPI\n     */\n    data: GameServerOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof GameServerOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface GameServerSearchInputAllowedFilters\n */\ninterface GameServerSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof GameServerSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof GameServerSearchInputAllowedFilters\n     */\n    type?: Array<GameServerSearchInputAllowedFiltersTypeEnum>;\n    /**\n     *\n     * @type {Array<boolean>}\n     * @memberof GameServerSearchInputAllowedFilters\n     */\n    reachable?: Array<boolean>;\n    /**\n     *\n     * @type {Array<boolean>}\n     * @memberof GameServerSearchInputAllowedFilters\n     */\n    enabled?: Array<boolean>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof GameServerSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\ndeclare const GameServerSearchInputAllowedFiltersTypeEnum: {\n    readonly Mock: \"MOCK\";\n    readonly Sevendaystodie: \"SEVENDAYSTODIE\";\n    readonly Rust: \"RUST\";\n};\ntype GameServerSearchInputAllowedFiltersTypeEnum = (typeof GameServerSearchInputAllowedFiltersTypeEnum)[keyof typeof GameServerSearchInputAllowedFiltersTypeEnum];\n/**\n *\n * @export\n * @interface GameServerSearchInputAllowedSearch\n */\ninterface GameServerSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof GameServerSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n}\n/**\n *\n * @export\n * @interface GameServerSearchInputDTO\n */\ninterface GameServerSearchInputDTO {\n    /**\n     *\n     * @type {GameServerSearchInputAllowedFilters}\n     * @memberof GameServerSearchInputDTO\n     */\n    filters?: GameServerSearchInputAllowedFilters;\n    /**\n     *\n     * @type {GameServerSearchInputAllowedSearch}\n     * @memberof GameServerSearchInputDTO\n     */\n    search?: GameServerSearchInputAllowedSearch;\n    /**\n     *\n     * @type {any}\n     * @memberof GameServerSearchInputDTO\n     */\n    greaterThan?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof GameServerSearchInputDTO\n     */\n    lessThan?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof GameServerSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof GameServerSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerSearchInputDTO\n     */\n    sortDirection?: GameServerSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof GameServerSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const GameServerSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype GameServerSearchInputDTOSortDirectionEnum = (typeof GameServerSearchInputDTOSortDirectionEnum)[keyof typeof GameServerSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface GameServerTestReachabilityDTOAPI\n */\ninterface GameServerTestReachabilityDTOAPI {\n    /**\n     *\n     * @type {TestReachabilityOutputDTO}\n     * @memberof GameServerTestReachabilityDTOAPI\n     */\n    data: TestReachabilityOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof GameServerTestReachabilityDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface GameServerTestReachabilityInputDTO\n */\ninterface GameServerTestReachabilityInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerTestReachabilityInputDTO\n     */\n    connectionInfo: string;\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerTestReachabilityInputDTO\n     */\n    type: GameServerTestReachabilityInputDTOTypeEnum;\n}\ndeclare const GameServerTestReachabilityInputDTOTypeEnum: {\n    readonly Mock: \"MOCK\";\n    readonly Sevendaystodie: \"SEVENDAYSTODIE\";\n    readonly Rust: \"RUST\";\n};\ntype GameServerTestReachabilityInputDTOTypeEnum = (typeof GameServerTestReachabilityInputDTOTypeEnum)[keyof typeof GameServerTestReachabilityInputDTOTypeEnum];\n/**\n *\n * @export\n * @interface GameServerTypesOutputDTO\n */\ninterface GameServerTypesOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerTypesOutputDTO\n     */\n    type: GameServerTypesOutputDTOTypeEnum;\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerTypesOutputDTO\n     */\n    connectionInfoSchema: string;\n}\ndeclare const GameServerTypesOutputDTOTypeEnum: {\n    readonly Mock: \"MOCK\";\n    readonly Sevendaystodie: \"SEVENDAYSTODIE\";\n    readonly Rust: \"RUST\";\n};\ntype GameServerTypesOutputDTOTypeEnum = (typeof GameServerTypesOutputDTOTypeEnum)[keyof typeof GameServerTypesOutputDTOTypeEnum];\n/**\n *\n * @export\n * @interface GameServerTypesOutputDTOAPI\n */\ninterface GameServerTypesOutputDTOAPI {\n    /**\n     *\n     * @type {Array<GameServerOutputDTO>}\n     * @memberof GameServerTypesOutputDTOAPI\n     */\n    data: Array<GameServerOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof GameServerTypesOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface GameServerUpdateDTO\n */\ninterface GameServerUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerUpdateDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerUpdateDTO\n     */\n    connectionInfo: string;\n    /**\n     *\n     * @type {string}\n     * @memberof GameServerUpdateDTO\n     */\n    type: GameServerUpdateDTOTypeEnum;\n    /**\n     *\n     * @type {boolean}\n     * @memberof GameServerUpdateDTO\n     */\n    reachable?: boolean;\n    /**\n     *\n     * @type {boolean}\n     * @memberof GameServerUpdateDTO\n     */\n    enabled?: boolean;\n}\ndeclare const GameServerUpdateDTOTypeEnum: {\n    readonly Mock: \"MOCK\";\n    readonly Sevendaystodie: \"SEVENDAYSTODIE\";\n    readonly Rust: \"RUST\";\n};\ntype GameServerUpdateDTOTypeEnum = (typeof GameServerUpdateDTOTypeEnum)[keyof typeof GameServerUpdateDTOTypeEnum];\n/**\n *\n * @export\n * @interface GetSettingsInput\n */\ninterface GetSettingsInput {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof GetSettingsInput\n     */\n    keys?: Array<GetSettingsInputKeysEnum>;\n    /**\n     *\n     * @type {string}\n     * @memberof GetSettingsInput\n     */\n    gameServerId?: string;\n}\ndeclare const GetSettingsInputKeysEnum: {\n    readonly CommandPrefix: \"commandPrefix\";\n    readonly ServerChatName: \"serverChatName\";\n    readonly EconomyEnabled: \"economyEnabled\";\n    readonly CurrencyName: \"currencyName\";\n    readonly DeveloperMode: \"developerMode\";\n};\ntype GetSettingsInputKeysEnum = (typeof GetSettingsInputKeysEnum)[keyof typeof GetSettingsInputKeysEnum];\n/**\n *\n * @export\n * @interface GetSettingsOneInput\n */\ninterface GetSettingsOneInput {\n    /**\n     *\n     * @type {string}\n     * @memberof GetSettingsOneInput\n     */\n    gameServerId?: string;\n}\n/**\n *\n * @export\n * @interface GetUserDTO\n */\ninterface GetUserDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof GetUserDTO\n     */\n    name: string;\n}\n/**\n *\n * @export\n * @interface GiveItemInputDTO\n */\ninterface GiveItemInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof GiveItemInputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {number}\n     * @memberof GiveItemInputDTO\n     */\n    amount: number;\n    /**\n     *\n     * @type {string}\n     * @memberof GiveItemInputDTO\n     */\n    quality: string;\n}\n/**\n *\n * @export\n * @interface GuildApiUpdateDTO\n */\ninterface GuildApiUpdateDTO {\n    /**\n     *\n     * @type {boolean}\n     * @memberof GuildApiUpdateDTO\n     */\n    takaroEnabled?: boolean;\n}\n/**\n *\n * @export\n * @interface GuildCreateInputDTO\n */\ninterface GuildCreateInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof GuildCreateInputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof GuildCreateInputDTO\n     */\n    discordId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof GuildCreateInputDTO\n     */\n    icon?: string;\n}\n/**\n *\n * @export\n * @interface GuildOutputArrayDTOAPI\n */\ninterface GuildOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<GuildOutputDTO>}\n     * @memberof GuildOutputArrayDTOAPI\n     */\n    data: Array<GuildOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof GuildOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface GuildOutputDTO\n */\ninterface GuildOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof GuildOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof GuildOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof GuildOutputDTO\n     */\n    discordId: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof GuildOutputDTO\n     */\n    takaroEnabled: boolean;\n    /**\n     *\n     * @type {string}\n     * @memberof GuildOutputDTO\n     */\n    icon?: string;\n}\n/**\n *\n * @export\n * @interface GuildOutputDTOAPI\n */\ninterface GuildOutputDTOAPI {\n    /**\n     *\n     * @type {GuildOutputDTO}\n     * @memberof GuildOutputDTOAPI\n     */\n    data: GuildOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof GuildOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface GuildSearchInputAllowedFilters\n */\ninterface GuildSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof GuildSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof GuildSearchInputAllowedFilters\n     */\n    discordId?: Array<string>;\n    /**\n     *\n     * @type {Array<boolean>}\n     * @memberof GuildSearchInputAllowedFilters\n     */\n    takaroEnabled?: Array<boolean>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof GuildSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface GuildSearchInputAllowedSearch\n */\ninterface GuildSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof GuildSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n}\n/**\n *\n * @export\n * @interface GuildSearchInputDTO\n */\ninterface GuildSearchInputDTO {\n    /**\n     *\n     * @type {GuildSearchInputAllowedFilters}\n     * @memberof GuildSearchInputDTO\n     */\n    filters?: GuildSearchInputAllowedFilters;\n    /**\n     *\n     * @type {GuildSearchInputAllowedSearch}\n     * @memberof GuildSearchInputDTO\n     */\n    search?: GuildSearchInputAllowedSearch;\n    /**\n     *\n     * @type {any}\n     * @memberof GuildSearchInputDTO\n     */\n    greaterThan?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof GuildSearchInputDTO\n     */\n    lessThan?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof GuildSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof GuildSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof GuildSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof GuildSearchInputDTO\n     */\n    sortDirection?: GuildSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof GuildSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const GuildSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype GuildSearchInputDTOSortDirectionEnum = (typeof GuildSearchInputDTOSortDirectionEnum)[keyof typeof GuildSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface GuildUpdateDTO\n */\ninterface GuildUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof GuildUpdateDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof GuildUpdateDTO\n     */\n    icon?: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof GuildUpdateDTO\n     */\n    takaroEnabled?: boolean;\n}\n/**\n *\n * @export\n * @interface HealthOutputDTO\n */\ninterface HealthOutputDTO {\n    /**\n     *\n     * @type {boolean}\n     * @memberof HealthOutputDTO\n     */\n    healthy: boolean;\n}\n/**\n *\n * @export\n * @interface HookCreateDTO\n */\ninterface HookCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof HookCreateDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof HookCreateDTO\n     */\n    regex: string;\n    /**\n     *\n     * @type {string}\n     * @memberof HookCreateDTO\n     */\n    versionId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof HookCreateDTO\n     */\n    eventType: HookCreateDTOEventTypeEnum;\n    /**\n     *\n     * @type {string}\n     * @memberof HookCreateDTO\n     */\n    function?: string;\n}\ndeclare const HookCreateDTOEventTypeEnum: {\n    readonly Log: \"log\";\n    readonly PlayerConnected: \"player-connected\";\n    readonly PlayerDisconnected: \"player-disconnected\";\n    readonly ChatMessage: \"chat-message\";\n    readonly PlayerDeath: \"player-death\";\n    readonly EntityKilled: \"entity-killed\";\n    readonly DiscordMessage: \"discord-message\";\n    readonly RoleAssigned: \"role-assigned\";\n    readonly RoleRemoved: \"role-removed\";\n    readonly RoleCreated: \"role-created\";\n    readonly RoleUpdated: \"role-updated\";\n    readonly RoleDeleted: \"role-deleted\";\n    readonly CommandExecuted: \"command-executed\";\n    readonly HookExecuted: \"hook-executed\";\n    readonly CronjobExecuted: \"cronjob-executed\";\n    readonly CurrencyAdded: \"currency-added\";\n    readonly CurrencyDeducted: \"currency-deducted\";\n    readonly SettingsSet: \"settings-set\";\n    readonly PlayerNewIpDetected: \"player-new-ip-detected\";\n    readonly ServerStatusChanged: \"server-status-changed\";\n    readonly ModuleCreated: \"module-created\";\n    readonly ModuleUpdated: \"module-updated\";\n    readonly ModuleDeleted: \"module-deleted\";\n    readonly ModuleInstalled: \"module-installed\";\n    readonly ModuleUninstalled: \"module-uninstalled\";\n    readonly PlayerCreated: \"player-created\";\n    readonly ShopListingCreated: \"shop-listing-created\";\n    readonly ShopListingUpdated: \"shop-listing-updated\";\n    readonly ShopListingDeleted: \"shop-listing-deleted\";\n    readonly ShopOrderCreated: \"shop-order-created\";\n    readonly ShopOrderStatusChanged: \"shop-order-status-changed\";\n    readonly PlayerLinked: \"player-linked\";\n    readonly GameserverCreated: \"gameserver-created\";\n    readonly GameserverUpdated: \"gameserver-updated\";\n    readonly GameserverDeleted: \"gameserver-deleted\";\n};\ntype HookCreateDTOEventTypeEnum = (typeof HookCreateDTOEventTypeEnum)[keyof typeof HookCreateDTOEventTypeEnum];\n/**\n *\n * @export\n * @interface HookEventDiscordMessage\n */\ninterface HookEventDiscordMessage {\n    /**\n     *\n     * @type {string}\n     * @memberof HookEventDiscordMessage\n     */\n    msg: string;\n    /**\n     *\n     * @type {EventDiscordUser}\n     * @memberof HookEventDiscordMessage\n     */\n    author: EventDiscordUser;\n    /**\n     *\n     * @type {EventDiscordChannel}\n     * @memberof HookEventDiscordMessage\n     */\n    channel: EventDiscordChannel;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof HookEventDiscordMessage\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface HookOutputArrayDTOAPI\n */\ninterface HookOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<HookOutputDTO>}\n     * @memberof HookOutputArrayDTOAPI\n     */\n    data: Array<HookOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof HookOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface HookOutputDTO\n */\ninterface HookOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof HookOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof HookOutputDTO\n     */\n    regex: string;\n    /**\n     *\n     * @type {FunctionOutputDTO}\n     * @memberof HookOutputDTO\n     */\n    function: FunctionOutputDTO;\n    /**\n     *\n     * @type {string}\n     * @memberof HookOutputDTO\n     */\n    eventType: HookOutputDTOEventTypeEnum;\n    /**\n     *\n     * @type {string}\n     * @memberof HookOutputDTO\n     */\n    versionId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof HookOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof HookOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof HookOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\ndeclare const HookOutputDTOEventTypeEnum: {\n    readonly Log: \"log\";\n    readonly PlayerConnected: \"player-connected\";\n    readonly PlayerDisconnected: \"player-disconnected\";\n    readonly ChatMessage: \"chat-message\";\n    readonly PlayerDeath: \"player-death\";\n    readonly EntityKilled: \"entity-killed\";\n    readonly DiscordMessage: \"discord-message\";\n    readonly RoleAssigned: \"role-assigned\";\n    readonly RoleRemoved: \"role-removed\";\n    readonly RoleCreated: \"role-created\";\n    readonly RoleUpdated: \"role-updated\";\n    readonly RoleDeleted: \"role-deleted\";\n    readonly CommandExecuted: \"command-executed\";\n    readonly HookExecuted: \"hook-executed\";\n    readonly CronjobExecuted: \"cronjob-executed\";\n    readonly CurrencyAdded: \"currency-added\";\n    readonly CurrencyDeducted: \"currency-deducted\";\n    readonly SettingsSet: \"settings-set\";\n    readonly PlayerNewIpDetected: \"player-new-ip-detected\";\n    readonly ServerStatusChanged: \"server-status-changed\";\n    readonly ModuleCreated: \"module-created\";\n    readonly ModuleUpdated: \"module-updated\";\n    readonly ModuleDeleted: \"module-deleted\";\n    readonly ModuleInstalled: \"module-installed\";\n    readonly ModuleUninstalled: \"module-uninstalled\";\n    readonly PlayerCreated: \"player-created\";\n    readonly ShopListingCreated: \"shop-listing-created\";\n    readonly ShopListingUpdated: \"shop-listing-updated\";\n    readonly ShopListingDeleted: \"shop-listing-deleted\";\n    readonly ShopOrderCreated: \"shop-order-created\";\n    readonly ShopOrderStatusChanged: \"shop-order-status-changed\";\n    readonly PlayerLinked: \"player-linked\";\n    readonly GameserverCreated: \"gameserver-created\";\n    readonly GameserverUpdated: \"gameserver-updated\";\n    readonly GameserverDeleted: \"gameserver-deleted\";\n};\ntype HookOutputDTOEventTypeEnum = (typeof HookOutputDTOEventTypeEnum)[keyof typeof HookOutputDTOEventTypeEnum];\n/**\n *\n * @export\n * @interface HookOutputDTOAPI\n */\ninterface HookOutputDTOAPI {\n    /**\n     *\n     * @type {HookOutputDTO}\n     * @memberof HookOutputDTOAPI\n     */\n    data: HookOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof HookOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface HookSearchInputAllowedFilters\n */\ninterface HookSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof HookSearchInputAllowedFilters\n     */\n    moduleId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof HookSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof HookSearchInputAllowedFilters\n     */\n    eventType?: Array<HookSearchInputAllowedFiltersEventTypeEnum>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof HookSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\ndeclare const HookSearchInputAllowedFiltersEventTypeEnum: {\n    readonly Log: \"log\";\n    readonly PlayerConnected: \"player-connected\";\n    readonly PlayerDisconnected: \"player-disconnected\";\n    readonly ChatMessage: \"chat-message\";\n    readonly PlayerDeath: \"player-death\";\n    readonly EntityKilled: \"entity-killed\";\n    readonly DiscordMessage: \"discord-message\";\n    readonly RoleAssigned: \"role-assigned\";\n    readonly RoleRemoved: \"role-removed\";\n    readonly RoleCreated: \"role-created\";\n    readonly RoleUpdated: \"role-updated\";\n    readonly RoleDeleted: \"role-deleted\";\n    readonly CommandExecuted: \"command-executed\";\n    readonly HookExecuted: \"hook-executed\";\n    readonly CronjobExecuted: \"cronjob-executed\";\n    readonly CurrencyAdded: \"currency-added\";\n    readonly CurrencyDeducted: \"currency-deducted\";\n    readonly SettingsSet: \"settings-set\";\n    readonly PlayerNewIpDetected: \"player-new-ip-detected\";\n    readonly ServerStatusChanged: \"server-status-changed\";\n    readonly ModuleCreated: \"module-created\";\n    readonly ModuleUpdated: \"module-updated\";\n    readonly ModuleDeleted: \"module-deleted\";\n    readonly ModuleInstalled: \"module-installed\";\n    readonly ModuleUninstalled: \"module-uninstalled\";\n    readonly PlayerCreated: \"player-created\";\n    readonly ShopListingCreated: \"shop-listing-created\";\n    readonly ShopListingUpdated: \"shop-listing-updated\";\n    readonly ShopListingDeleted: \"shop-listing-deleted\";\n    readonly ShopOrderCreated: \"shop-order-created\";\n    readonly ShopOrderStatusChanged: \"shop-order-status-changed\";\n    readonly PlayerLinked: \"player-linked\";\n    readonly GameserverCreated: \"gameserver-created\";\n    readonly GameserverUpdated: \"gameserver-updated\";\n    readonly GameserverDeleted: \"gameserver-deleted\";\n};\ntype HookSearchInputAllowedFiltersEventTypeEnum = (typeof HookSearchInputAllowedFiltersEventTypeEnum)[keyof typeof HookSearchInputAllowedFiltersEventTypeEnum];\n/**\n *\n * @export\n * @interface HookSearchInputAllowedSearch\n */\ninterface HookSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof HookSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n}\n/**\n *\n * @export\n * @interface HookSearchInputDTO\n */\ninterface HookSearchInputDTO {\n    /**\n     *\n     * @type {HookSearchInputAllowedFilters}\n     * @memberof HookSearchInputDTO\n     */\n    filters?: HookSearchInputAllowedFilters;\n    /**\n     *\n     * @type {HookSearchInputAllowedSearch}\n     * @memberof HookSearchInputDTO\n     */\n    search?: HookSearchInputAllowedSearch;\n    /**\n     *\n     * @type {any}\n     * @memberof HookSearchInputDTO\n     */\n    greaterThan?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof HookSearchInputDTO\n     */\n    lessThan?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof HookSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof HookSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof HookSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof HookSearchInputDTO\n     */\n    sortDirection?: HookSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof HookSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const HookSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype HookSearchInputDTOSortDirectionEnum = (typeof HookSearchInputDTOSortDirectionEnum)[keyof typeof HookSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface HookTriggerDTO\n */\ninterface HookTriggerDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof HookTriggerDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof HookTriggerDTO\n     */\n    playerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof HookTriggerDTO\n     */\n    moduleId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof HookTriggerDTO\n     */\n    eventType: HookTriggerDTOEventTypeEnum;\n    /**\n     *\n     * @type {object}\n     * @memberof HookTriggerDTO\n     */\n    eventMeta: object;\n}\ndeclare const HookTriggerDTOEventTypeEnum: {\n    readonly Log: \"log\";\n    readonly PlayerConnected: \"player-connected\";\n    readonly PlayerDisconnected: \"player-disconnected\";\n    readonly ChatMessage: \"chat-message\";\n    readonly PlayerDeath: \"player-death\";\n    readonly EntityKilled: \"entity-killed\";\n    readonly DiscordMessage: \"discord-message\";\n    readonly RoleAssigned: \"role-assigned\";\n    readonly RoleRemoved: \"role-removed\";\n    readonly RoleCreated: \"role-created\";\n    readonly RoleUpdated: \"role-updated\";\n    readonly RoleDeleted: \"role-deleted\";\n    readonly CommandExecuted: \"command-executed\";\n    readonly HookExecuted: \"hook-executed\";\n    readonly CronjobExecuted: \"cronjob-executed\";\n    readonly CurrencyAdded: \"currency-added\";\n    readonly CurrencyDeducted: \"currency-deducted\";\n    readonly SettingsSet: \"settings-set\";\n    readonly PlayerNewIpDetected: \"player-new-ip-detected\";\n    readonly ServerStatusChanged: \"server-status-changed\";\n    readonly ModuleCreated: \"module-created\";\n    readonly ModuleUpdated: \"module-updated\";\n    readonly ModuleDeleted: \"module-deleted\";\n    readonly ModuleInstalled: \"module-installed\";\n    readonly ModuleUninstalled: \"module-uninstalled\";\n    readonly PlayerCreated: \"player-created\";\n    readonly ShopListingCreated: \"shop-listing-created\";\n    readonly ShopListingUpdated: \"shop-listing-updated\";\n    readonly ShopListingDeleted: \"shop-listing-deleted\";\n    readonly ShopOrderCreated: \"shop-order-created\";\n    readonly ShopOrderStatusChanged: \"shop-order-status-changed\";\n    readonly PlayerLinked: \"player-linked\";\n    readonly GameserverCreated: \"gameserver-created\";\n    readonly GameserverUpdated: \"gameserver-updated\";\n    readonly GameserverDeleted: \"gameserver-deleted\";\n};\ntype HookTriggerDTOEventTypeEnum = (typeof HookTriggerDTOEventTypeEnum)[keyof typeof HookTriggerDTOEventTypeEnum];\n/**\n *\n * @export\n * @interface HookUpdateDTO\n */\ninterface HookUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof HookUpdateDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof HookUpdateDTO\n     */\n    regex?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof HookUpdateDTO\n     */\n    eventType?: HookUpdateDTOEventTypeEnum;\n    /**\n     *\n     * @type {string}\n     * @memberof HookUpdateDTO\n     */\n    function?: string;\n}\ndeclare const HookUpdateDTOEventTypeEnum: {\n    readonly Log: \"log\";\n    readonly PlayerConnected: \"player-connected\";\n    readonly PlayerDisconnected: \"player-disconnected\";\n    readonly ChatMessage: \"chat-message\";\n    readonly PlayerDeath: \"player-death\";\n    readonly EntityKilled: \"entity-killed\";\n    readonly DiscordMessage: \"discord-message\";\n    readonly RoleAssigned: \"role-assigned\";\n    readonly RoleRemoved: \"role-removed\";\n    readonly RoleCreated: \"role-created\";\n    readonly RoleUpdated: \"role-updated\";\n    readonly RoleDeleted: \"role-deleted\";\n    readonly CommandExecuted: \"command-executed\";\n    readonly HookExecuted: \"hook-executed\";\n    readonly CronjobExecuted: \"cronjob-executed\";\n    readonly CurrencyAdded: \"currency-added\";\n    readonly CurrencyDeducted: \"currency-deducted\";\n    readonly SettingsSet: \"settings-set\";\n    readonly PlayerNewIpDetected: \"player-new-ip-detected\";\n    readonly ServerStatusChanged: \"server-status-changed\";\n    readonly ModuleCreated: \"module-created\";\n    readonly ModuleUpdated: \"module-updated\";\n    readonly ModuleDeleted: \"module-deleted\";\n    readonly ModuleInstalled: \"module-installed\";\n    readonly ModuleUninstalled: \"module-uninstalled\";\n    readonly PlayerCreated: \"player-created\";\n    readonly ShopListingCreated: \"shop-listing-created\";\n    readonly ShopListingUpdated: \"shop-listing-updated\";\n    readonly ShopListingDeleted: \"shop-listing-deleted\";\n    readonly ShopOrderCreated: \"shop-order-created\";\n    readonly ShopOrderStatusChanged: \"shop-order-status-changed\";\n    readonly PlayerLinked: \"player-linked\";\n    readonly GameserverCreated: \"gameserver-created\";\n    readonly GameserverUpdated: \"gameserver-updated\";\n    readonly GameserverDeleted: \"gameserver-deleted\";\n};\ntype HookUpdateDTOEventTypeEnum = (typeof HookUpdateDTOEventTypeEnum)[keyof typeof HookUpdateDTOEventTypeEnum];\n/**\n *\n * @export\n * @interface ICommand\n */\ninterface ICommand {\n    /**\n     *\n     * @type {string}\n     * @memberof ICommand\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ICommand\n     */\n    function: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ICommand\n     */\n    trigger: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ICommand\n     */\n    helpText?: string;\n    /**\n     *\n     * @type {Array<ICommandArgument>}\n     * @memberof ICommand\n     */\n    arguments?: Array<ICommandArgument>;\n}\n/**\n *\n * @export\n * @interface ICommandArgument\n */\ninterface ICommandArgument {\n    /**\n     *\n     * @type {string}\n     * @memberof ICommandArgument\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ICommandArgument\n     */\n    type: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ICommandArgument\n     */\n    helpText?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ICommandArgument\n     */\n    defaultValue?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof ICommandArgument\n     */\n    position?: number;\n}\n/**\n *\n * @export\n * @interface ICronJob\n */\ninterface ICronJob {\n    /**\n     *\n     * @type {string}\n     * @memberof ICronJob\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ICronJob\n     */\n    function: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ICronJob\n     */\n    temporalValue: string;\n}\n/**\n *\n * @export\n * @interface IFunction\n */\ninterface IFunction {\n    /**\n     *\n     * @type {string}\n     * @memberof IFunction\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IFunction\n     */\n    function: string;\n}\n/**\n *\n * @export\n * @interface IGamePlayer\n */\ninterface IGamePlayer {\n    /**\n     *\n     * @type {string}\n     * @memberof IGamePlayer\n     */\n    gameId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IGamePlayer\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IGamePlayer\n     */\n    steamId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IGamePlayer\n     */\n    epicOnlineServicesId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IGamePlayer\n     */\n    xboxLiveId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IGamePlayer\n     */\n    platformId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IGamePlayer\n     */\n    ip?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof IGamePlayer\n     */\n    ping?: number;\n}\n/**\n *\n * @export\n * @interface IHook\n */\ninterface IHook {\n    /**\n     *\n     * @type {string}\n     * @memberof IHook\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IHook\n     */\n    function: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IHook\n     */\n    eventType: IHookEventTypeEnum;\n}\ndeclare const IHookEventTypeEnum: {\n    readonly Log: \"log\";\n    readonly PlayerConnected: \"player-connected\";\n    readonly PlayerDisconnected: \"player-disconnected\";\n    readonly ChatMessage: \"chat-message\";\n    readonly PlayerDeath: \"player-death\";\n    readonly EntityKilled: \"entity-killed\";\n    readonly DiscordMessage: \"discord-message\";\n    readonly RoleAssigned: \"role-assigned\";\n    readonly RoleRemoved: \"role-removed\";\n    readonly RoleCreated: \"role-created\";\n    readonly RoleUpdated: \"role-updated\";\n    readonly RoleDeleted: \"role-deleted\";\n    readonly CommandExecuted: \"command-executed\";\n    readonly HookExecuted: \"hook-executed\";\n    readonly CronjobExecuted: \"cronjob-executed\";\n    readonly CurrencyAdded: \"currency-added\";\n    readonly CurrencyDeducted: \"currency-deducted\";\n    readonly SettingsSet: \"settings-set\";\n    readonly PlayerNewIpDetected: \"player-new-ip-detected\";\n    readonly ServerStatusChanged: \"server-status-changed\";\n    readonly ModuleCreated: \"module-created\";\n    readonly ModuleUpdated: \"module-updated\";\n    readonly ModuleDeleted: \"module-deleted\";\n    readonly ModuleInstalled: \"module-installed\";\n    readonly ModuleUninstalled: \"module-uninstalled\";\n    readonly PlayerCreated: \"player-created\";\n    readonly ShopListingCreated: \"shop-listing-created\";\n    readonly ShopListingUpdated: \"shop-listing-updated\";\n    readonly ShopListingDeleted: \"shop-listing-deleted\";\n    readonly ShopOrderCreated: \"shop-order-created\";\n    readonly ShopOrderStatusChanged: \"shop-order-status-changed\";\n    readonly PlayerLinked: \"player-linked\";\n    readonly GameserverCreated: \"gameserver-created\";\n    readonly GameserverUpdated: \"gameserver-updated\";\n    readonly GameserverDeleted: \"gameserver-deleted\";\n};\ntype IHookEventTypeEnum = (typeof IHookEventTypeEnum)[keyof typeof IHookEventTypeEnum];\n/**\n *\n * @export\n * @interface IItemDTO\n */\ninterface IItemDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof IItemDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IItemDTO\n     */\n    code: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IItemDTO\n     */\n    description?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof IItemDTO\n     */\n    amount?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof IItemDTO\n     */\n    quality?: string;\n}\n/**\n *\n * @export\n * @interface IMessageOptsDTO\n */\ninterface IMessageOptsDTO {\n    /**\n     *\n     * @type {IPlayerReferenceDTO}\n     * @memberof IMessageOptsDTO\n     */\n    recipient: IPlayerReferenceDTO;\n}\n/**\n *\n * @export\n * @interface IPermission\n */\ninterface IPermission {\n    /**\n     *\n     * @type {string}\n     * @memberof IPermission\n     */\n    permission: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IPermission\n     */\n    description: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IPermission\n     */\n    friendlyName: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof IPermission\n     */\n    canHaveCount?: boolean;\n}\n/**\n *\n * @export\n * @interface IPlayerReferenceDTO\n */\ninterface IPlayerReferenceDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof IPlayerReferenceDTO\n     */\n    gameId: string;\n}\n/**\n *\n * @export\n * @interface IPosition\n */\ninterface IPosition {\n    /**\n     *\n     * @type {number}\n     * @memberof IPosition\n     */\n    x: number;\n    /**\n     *\n     * @type {number}\n     * @memberof IPosition\n     */\n    y: number;\n    /**\n     *\n     * @type {number}\n     * @memberof IPosition\n     */\n    z: number;\n}\n/**\n *\n * @export\n * @interface ITakaroQuery\n */\ninterface ITakaroQuery {\n    /**\n     *\n     * @type {any}\n     * @memberof ITakaroQuery\n     */\n    filters?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof ITakaroQuery\n     */\n    search?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof ITakaroQuery\n     */\n    greaterThan?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof ITakaroQuery\n     */\n    lessThan?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof ITakaroQuery\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof ITakaroQuery\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ITakaroQuery\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ITakaroQuery\n     */\n    sortDirection?: ITakaroQuerySortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ITakaroQuery\n     */\n    extend?: Array<string>;\n}\ndeclare const ITakaroQuerySortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype ITakaroQuerySortDirectionEnum = (typeof ITakaroQuerySortDirectionEnum)[keyof typeof ITakaroQuerySortDirectionEnum];\n/**\n *\n * @export\n * @interface ImportInputDTO\n */\ninterface ImportInputDTO {\n    /**\n     *\n     * @type {boolean}\n     * @memberof ImportInputDTO\n     */\n    roles: boolean;\n    /**\n     *\n     * @type {boolean}\n     * @memberof ImportInputDTO\n     */\n    players: boolean;\n    /**\n     *\n     * @type {boolean}\n     * @memberof ImportInputDTO\n     */\n    currency: boolean;\n    /**\n     *\n     * @type {boolean}\n     * @memberof ImportInputDTO\n     */\n    shop: boolean;\n}\n/**\n *\n * @export\n * @interface ImportOutputDTO\n */\ninterface ImportOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ImportOutputDTO\n     */\n    id: string;\n}\n/**\n *\n * @export\n * @interface ImportOutputDTOAPI\n */\ninterface ImportOutputDTOAPI {\n    /**\n     *\n     * @type {ImportOutputDTO}\n     * @memberof ImportOutputDTOAPI\n     */\n    data: ImportOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ImportOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ImportStatusOutputDTO\n */\ninterface ImportStatusOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ImportStatusOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ImportStatusOutputDTO\n     */\n    status: ImportStatusOutputDTOStatusEnum;\n    /**\n     *\n     * @type {string}\n     * @memberof ImportStatusOutputDTO\n     */\n    failedReason?: string;\n}\ndeclare const ImportStatusOutputDTOStatusEnum: {\n    readonly Pending: \"pending\";\n    readonly Completed: \"completed\";\n    readonly Failed: \"failed\";\n};\ntype ImportStatusOutputDTOStatusEnum = (typeof ImportStatusOutputDTOStatusEnum)[keyof typeof ImportStatusOutputDTOStatusEnum];\n/**\n *\n * @export\n * @interface ImportStatusOutputDTOAPI\n */\ninterface ImportStatusOutputDTOAPI {\n    /**\n     *\n     * @type {ImportStatusOutputDTO}\n     * @memberof ImportStatusOutputDTOAPI\n     */\n    data: ImportStatusOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ImportStatusOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface InstallModuleDTO\n */\ninterface InstallModuleDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof InstallModuleDTO\n     */\n    versionId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof InstallModuleDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof InstallModuleDTO\n     */\n    userConfig?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof InstallModuleDTO\n     */\n    systemConfig?: string;\n}\n/**\n *\n * @export\n * @interface InviteCreateDTO\n */\ninterface InviteCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof InviteCreateDTO\n     */\n    email: string;\n}\n/**\n *\n * @export\n * @interface InviteOutputDTO\n */\ninterface InviteOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof InviteOutputDTO\n     */\n    botInvite: string;\n    /**\n     *\n     * @type {string}\n     * @memberof InviteOutputDTO\n     */\n    devServer: string;\n}\n/**\n *\n * @export\n * @interface IpHistoryOutputDTO\n */\ninterface IpHistoryOutputDTO {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof IpHistoryOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof IpHistoryOutputDTO\n     */\n    ip: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IpHistoryOutputDTO\n     */\n    country?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IpHistoryOutputDTO\n     */\n    city?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IpHistoryOutputDTO\n     */\n    latitude?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof IpHistoryOutputDTO\n     */\n    longitude?: string;\n}\n/**\n *\n * @export\n * @interface ItemCreateDTO\n */\ninterface ItemCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ItemCreateDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemCreateDTO\n     */\n    code: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemCreateDTO\n     */\n    description?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemCreateDTO\n     */\n    icon?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemCreateDTO\n     */\n    gameserverId: string;\n}\n/**\n *\n * @export\n * @interface ItemOutputArrayDTOAPI\n */\ninterface ItemOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<ItemsOutputDTO>}\n     * @memberof ItemOutputArrayDTOAPI\n     */\n    data: Array<ItemsOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ItemOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ItemOutputDTOAPI\n */\ninterface ItemOutputDTOAPI {\n    /**\n     *\n     * @type {ItemsOutputDTO}\n     * @memberof ItemOutputDTOAPI\n     */\n    data: ItemsOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ItemOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ItemSearchInputAllowedFilters\n */\ninterface ItemSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ItemSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ItemSearchInputAllowedFilters\n     */\n    code?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ItemSearchInputAllowedFilters\n     */\n    gameserverId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ItemSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface ItemSearchInputAllowedSearch\n */\ninterface ItemSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ItemSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ItemSearchInputAllowedSearch\n     */\n    code?: Array<string>;\n}\n/**\n *\n * @export\n * @interface ItemSearchInputDTO\n */\ninterface ItemSearchInputDTO {\n    /**\n     *\n     * @type {ItemSearchInputAllowedFilters}\n     * @memberof ItemSearchInputDTO\n     */\n    filters?: ItemSearchInputAllowedFilters;\n    /**\n     *\n     * @type {ItemSearchInputAllowedSearch}\n     * @memberof ItemSearchInputDTO\n     */\n    search?: ItemSearchInputAllowedSearch;\n    /**\n     *\n     * @type {any}\n     * @memberof ItemSearchInputDTO\n     */\n    greaterThan?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof ItemSearchInputDTO\n     */\n    lessThan?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof ItemSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof ItemSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemSearchInputDTO\n     */\n    sortDirection?: ItemSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ItemSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const ItemSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype ItemSearchInputDTOSortDirectionEnum = (typeof ItemSearchInputDTOSortDirectionEnum)[keyof typeof ItemSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface ItemUpdateDTO\n */\ninterface ItemUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ItemUpdateDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemUpdateDTO\n     */\n    code?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemUpdateDTO\n     */\n    description?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemUpdateDTO\n     */\n    icon?: string;\n}\n/**\n *\n * @export\n * @interface ItemsOutputDTO\n */\ninterface ItemsOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ItemsOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemsOutputDTO\n     */\n    code: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemsOutputDTO\n     */\n    description?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemsOutputDTO\n     */\n    icon?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemsOutputDTO\n     */\n    gameserverId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ItemsOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ItemsOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ItemsOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface KickPlayerInputDTO\n */\ninterface KickPlayerInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof KickPlayerInputDTO\n     */\n    reason: string;\n}\n/**\n *\n * @export\n * @interface LatencyInputDTO\n */\ninterface LatencyInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof LatencyInputDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof LatencyInputDTO\n     */\n    startDate?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof LatencyInputDTO\n     */\n    endDate?: string;\n}\n/**\n *\n * @export\n * @interface LinkPlayerUnauthedInputDTO\n */\ninterface LinkPlayerUnauthedInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof LinkPlayerUnauthedInputDTO\n     */\n    email: string;\n    /**\n     *\n     * @type {string}\n     * @memberof LinkPlayerUnauthedInputDTO\n     */\n    code: string;\n}\n/**\n *\n * @export\n * @interface LoginDTO\n */\ninterface LoginDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof LoginDTO\n     */\n    username: string;\n    /**\n     *\n     * @type {string}\n     * @memberof LoginDTO\n     */\n    password: string;\n}\n/**\n *\n * @export\n * @interface LoginOutputDTO\n */\ninterface LoginOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof LoginOutputDTO\n     */\n    token: string;\n}\n/**\n *\n * @export\n * @interface LoginOutputDTOAPI\n */\ninterface LoginOutputDTOAPI {\n    /**\n     *\n     * @type {LoginOutputDTO}\n     * @memberof LoginOutputDTOAPI\n     */\n    data: LoginOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof LoginOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface MapInfoDTO\n */\ninterface MapInfoDTO {\n    /**\n     *\n     * @type {boolean}\n     * @memberof MapInfoDTO\n     */\n    enabled: boolean;\n    /**\n     *\n     * @type {number}\n     * @memberof MapInfoDTO\n     */\n    mapBlockSize: number;\n    /**\n     *\n     * @type {number}\n     * @memberof MapInfoDTO\n     */\n    maxZoom: number;\n    /**\n     *\n     * @type {number}\n     * @memberof MapInfoDTO\n     */\n    mapSizeX: number;\n    /**\n     *\n     * @type {number}\n     * @memberof MapInfoDTO\n     */\n    mapSizeY: number;\n    /**\n     *\n     * @type {number}\n     * @memberof MapInfoDTO\n     */\n    mapSizeZ: number;\n}\n/**\n *\n * @export\n * @interface MapTileInputDTO\n */\ninterface MapTileInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof MapTileInputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {number}\n     * @memberof MapTileInputDTO\n     */\n    z: number;\n    /**\n     *\n     * @type {number}\n     * @memberof MapTileInputDTO\n     */\n    x: number;\n    /**\n     *\n     * @type {number}\n     * @memberof MapTileInputDTO\n     */\n    y: number;\n}\n/**\n *\n * @export\n * @interface MeOutoutDTOAPI\n */\ninterface MeOutoutDTOAPI {\n    /**\n     *\n     * @type {MeOutputDTO}\n     * @memberof MeOutoutDTOAPI\n     */\n    data: MeOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof MeOutoutDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface MeOutputDTO\n */\ninterface MeOutputDTO {\n    /**\n     *\n     * @type {UserOutputWithRolesDTO}\n     * @memberof MeOutputDTO\n     */\n    user: UserOutputWithRolesDTO;\n    /**\n     *\n     * @type {Array<DomainOutputDTO>}\n     * @memberof MeOutputDTO\n     */\n    domains: Array<DomainOutputDTO>;\n    /**\n     *\n     * @type {string}\n     * @memberof MeOutputDTO\n     */\n    domain: string;\n    /**\n     *\n     * @type {PlayerOutputWithRolesDTO}\n     * @memberof MeOutputDTO\n     */\n    player?: PlayerOutputWithRolesDTO;\n    /**\n     *\n     * @type {Array<PlayerOnGameserverOutputDTO>}\n     * @memberof MeOutputDTO\n     */\n    pogs: Array<PlayerOnGameserverOutputDTO>;\n}\n/**\n *\n * @export\n * @interface MessageSendInputDTO\n */\ninterface MessageSendInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof MessageSendInputDTO\n     */\n    message: string;\n    /**\n     *\n     * @type {IMessageOptsDTO}\n     * @memberof MessageSendInputDTO\n     */\n    opts?: IMessageOptsDTO;\n}\n/**\n *\n * @export\n * @interface MetadataOutput\n */\ninterface MetadataOutput {\n    /**\n     *\n     * @type {string}\n     * @memberof MetadataOutput\n     */\n    serverTime: string;\n    /**\n     *\n     * @type {ErrorOutput}\n     * @memberof MetadataOutput\n     */\n    error: ErrorOutput;\n    /**\n     *\n     * @type {number}\n     * @memberof MetadataOutput\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof MetadataOutput\n     */\n    limit?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof MetadataOutput\n     */\n    total?: number;\n}\n/**\n *\n * @export\n * @interface MockConnectionInfo\n */\ninterface MockConnectionInfo {\n    /**\n     *\n     * @type {string}\n     * @memberof MockConnectionInfo\n     */\n    host: string;\n    /**\n     *\n     * @type {string}\n     * @memberof MockConnectionInfo\n     */\n    name: string;\n}\n/**\n *\n * @export\n * @interface ModuleCreateAPIDTO\n */\ninterface ModuleCreateAPIDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleCreateAPIDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {ModuleCreateVersionInputDTO}\n     * @memberof ModuleCreateAPIDTO\n     */\n    latestVersion?: ModuleCreateVersionInputDTO;\n}\n/**\n *\n * @export\n * @interface ModuleCreateDTO\n */\ninterface ModuleCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleCreateDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleCreateDTO\n     */\n    builtin?: string;\n}\n/**\n *\n * @export\n * @interface ModuleCreateInternalDTO\n */\ninterface ModuleCreateInternalDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleCreateInternalDTO\n     */\n    builtin?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleCreateInternalDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {ModuleCreateVersionInputDTO}\n     * @memberof ModuleCreateInternalDTO\n     */\n    latestVersion: ModuleCreateVersionInputDTO;\n}\n/**\n *\n * @export\n * @interface ModuleCreateVersionInputDTO\n */\ninterface ModuleCreateVersionInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleCreateVersionInputDTO\n     */\n    description?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleCreateVersionInputDTO\n     */\n    configSchema?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleCreateVersionInputDTO\n     */\n    uiSchema?: string;\n    /**\n     *\n     * @type {Array<PermissionCreateDTO>}\n     * @memberof ModuleCreateVersionInputDTO\n     */\n    permissions?: Array<PermissionCreateDTO>;\n}\n/**\n *\n * @export\n * @interface ModuleExportDTOAPI\n */\ninterface ModuleExportDTOAPI {\n    /**\n     *\n     * @type {ModuleTransferDTO}\n     * @memberof ModuleExportDTOAPI\n     */\n    data: ModuleTransferDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ModuleExportDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ModuleExportOptionsDTO\n */\ninterface ModuleExportOptionsDTO {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleExportOptionsDTO\n     */\n    versionIds?: Array<string>;\n}\n/**\n *\n * @export\n * @interface ModuleInstallParamId\n */\ninterface ModuleInstallParamId {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleInstallParamId\n     */\n    moduleId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleInstallParamId\n     */\n    gameServerId: string;\n}\n/**\n *\n * @export\n * @interface ModuleInstallationOutputArrayDTOAPI\n */\ninterface ModuleInstallationOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<ModuleInstallationOutputDTO>}\n     * @memberof ModuleInstallationOutputArrayDTOAPI\n     */\n    data: Array<ModuleInstallationOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ModuleInstallationOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ModuleInstallationOutputDTO\n */\ninterface ModuleInstallationOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleInstallationOutputDTO\n     */\n    gameserverId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleInstallationOutputDTO\n     */\n    versionId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleInstallationOutputDTO\n     */\n    moduleId: string;\n    /**\n     *\n     * @type {ModuleVersionOutputDTO}\n     * @memberof ModuleInstallationOutputDTO\n     */\n    version: ModuleVersionOutputDTO;\n    /**\n     *\n     * @type {ModuleOutputDTO}\n     * @memberof ModuleInstallationOutputDTO\n     */\n    module: ModuleOutputDTO;\n    /**\n     *\n     * @type {object}\n     * @memberof ModuleInstallationOutputDTO\n     */\n    userConfig: object;\n    /**\n     *\n     * @type {object}\n     * @memberof ModuleInstallationOutputDTO\n     */\n    systemConfig: object;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleInstallationOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ModuleInstallationOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ModuleInstallationOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface ModuleInstallationOutputDTOAPI\n */\ninterface ModuleInstallationOutputDTOAPI {\n    /**\n     *\n     * @type {ModuleInstallationOutputDTO}\n     * @memberof ModuleInstallationOutputDTOAPI\n     */\n    data: ModuleInstallationOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ModuleInstallationOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ModuleInstallationSearchInputAllowedFilters\n */\ninterface ModuleInstallationSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleInstallationSearchInputAllowedFilters\n     */\n    versionId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleInstallationSearchInputAllowedFilters\n     */\n    moduleId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleInstallationSearchInputAllowedFilters\n     */\n    gameserverId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleInstallationSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface ModuleInstallationSearchInputDTO\n */\ninterface ModuleInstallationSearchInputDTO {\n    /**\n     *\n     * @type {ModuleInstallationSearchInputAllowedFilters}\n     * @memberof ModuleInstallationSearchInputDTO\n     */\n    filters?: ModuleInstallationSearchInputAllowedFilters;\n    /**\n     *\n     * @type {any}\n     * @memberof ModuleInstallationSearchInputDTO\n     */\n    search?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof ModuleInstallationSearchInputDTO\n     */\n    greaterThan?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof ModuleInstallationSearchInputDTO\n     */\n    lessThan?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof ModuleInstallationSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof ModuleInstallationSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleInstallationSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleInstallationSearchInputDTO\n     */\n    sortDirection?: ModuleInstallationSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleInstallationSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const ModuleInstallationSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype ModuleInstallationSearchInputDTOSortDirectionEnum = (typeof ModuleInstallationSearchInputDTOSortDirectionEnum)[keyof typeof ModuleInstallationSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface ModuleOutputArrayDTOAPI\n */\ninterface ModuleOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<ModuleOutputDTO>}\n     * @memberof ModuleOutputArrayDTOAPI\n     */\n    data: Array<ModuleOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ModuleOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ModuleOutputDTO\n */\ninterface ModuleOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleOutputDTO\n     */\n    builtin?: string;\n    /**\n     *\n     * @type {ModuleVersionOutputDTO}\n     * @memberof ModuleOutputDTO\n     */\n    latestVersion: ModuleVersionOutputDTO;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ModuleOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ModuleOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface ModuleOutputDTOAPI\n */\ninterface ModuleOutputDTOAPI {\n    /**\n     *\n     * @type {ModuleOutputDTO}\n     * @memberof ModuleOutputDTOAPI\n     */\n    data: ModuleOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ModuleOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ModuleSearchInputAllowedFilters\n */\ninterface ModuleSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleSearchInputAllowedFilters\n     */\n    builtin?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface ModuleSearchInputAllowedSearch\n */\ninterface ModuleSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n}\n/**\n *\n * @export\n * @interface ModuleSearchInputDTO\n */\ninterface ModuleSearchInputDTO {\n    /**\n     *\n     * @type {ModuleSearchInputAllowedFilters}\n     * @memberof ModuleSearchInputDTO\n     */\n    filters?: ModuleSearchInputAllowedFilters;\n    /**\n     *\n     * @type {ModuleSearchInputAllowedSearch}\n     * @memberof ModuleSearchInputDTO\n     */\n    search?: ModuleSearchInputAllowedSearch;\n    /**\n     *\n     * @type {RangeFilterCreatedAndUpdatedAt}\n     * @memberof ModuleSearchInputDTO\n     */\n    greaterThan?: RangeFilterCreatedAndUpdatedAt;\n    /**\n     *\n     * @type {RangeFilterCreatedAndUpdatedAt}\n     * @memberof ModuleSearchInputDTO\n     */\n    lessThan?: RangeFilterCreatedAndUpdatedAt;\n    /**\n     *\n     * @type {number}\n     * @memberof ModuleSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof ModuleSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleSearchInputDTO\n     */\n    sortDirection?: ModuleSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const ModuleSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype ModuleSearchInputDTOSortDirectionEnum = (typeof ModuleSearchInputDTOSortDirectionEnum)[keyof typeof ModuleSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface ModuleTransferDTO\n */\ninterface ModuleTransferDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleTransferDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleTransferDTO\n     */\n    takaroVersion?: string;\n    /**\n     *\n     * @type {Array<ModuleTransferVersionDTO>}\n     * @memberof ModuleTransferDTO\n     */\n    versions: Array<ModuleTransferVersionDTO>;\n}\n/**\n *\n * @export\n * @interface ModuleTransferVersionDTO\n */\ninterface ModuleTransferVersionDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleTransferVersionDTO\n     */\n    tag: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleTransferVersionDTO\n     */\n    description: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleTransferVersionDTO\n     */\n    configSchema: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleTransferVersionDTO\n     */\n    uiSchema: string;\n    /**\n     *\n     * @type {Array<ICommand>}\n     * @memberof ModuleTransferVersionDTO\n     */\n    commands?: Array<ICommand>;\n    /**\n     *\n     * @type {Array<IHook>}\n     * @memberof ModuleTransferVersionDTO\n     */\n    hooks?: Array<IHook>;\n    /**\n     *\n     * @type {Array<ICronJob>}\n     * @memberof ModuleTransferVersionDTO\n     */\n    cronJobs?: Array<ICronJob>;\n    /**\n     *\n     * @type {Array<IFunction>}\n     * @memberof ModuleTransferVersionDTO\n     */\n    functions?: Array<IFunction>;\n    /**\n     *\n     * @type {Array<IPermission>}\n     * @memberof ModuleTransferVersionDTO\n     */\n    permissions?: Array<IPermission>;\n}\n/**\n *\n * @export\n * @interface ModuleUpdateDTO\n */\ninterface ModuleUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleUpdateDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {ModuleVersionUpdateDTO}\n     * @memberof ModuleUpdateDTO\n     */\n    latestVersion?: ModuleVersionUpdateDTO;\n}\n/**\n *\n * @export\n * @interface ModuleVersionCreateAPIDTO\n */\ninterface ModuleVersionCreateAPIDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionCreateAPIDTO\n     */\n    tag: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionCreateAPIDTO\n     */\n    moduleId: string;\n}\n/**\n *\n * @export\n * @interface ModuleVersionOutputArrayDTOAPI\n */\ninterface ModuleVersionOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<ModuleVersionOutputDTO>}\n     * @memberof ModuleVersionOutputArrayDTOAPI\n     */\n    data: Array<ModuleVersionOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ModuleVersionOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ModuleVersionOutputDTO\n */\ninterface ModuleVersionOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionOutputDTO\n     */\n    tag: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionOutputDTO\n     */\n    description: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionOutputDTO\n     */\n    configSchema: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionOutputDTO\n     */\n    uiSchema: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionOutputDTO\n     */\n    systemConfigSchema: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionOutputDTO\n     */\n    moduleId: string;\n    /**\n     *\n     * @type {Array<CronJobOutputDTO>}\n     * @memberof ModuleVersionOutputDTO\n     */\n    cronJobs: Array<CronJobOutputDTO>;\n    /**\n     *\n     * @type {Array<HookOutputDTO>}\n     * @memberof ModuleVersionOutputDTO\n     */\n    hooks: Array<HookOutputDTO>;\n    /**\n     *\n     * @type {Array<CommandOutputDTO>}\n     * @memberof ModuleVersionOutputDTO\n     */\n    commands: Array<CommandOutputDTO>;\n    /**\n     *\n     * @type {Array<FunctionOutputDTO>}\n     * @memberof ModuleVersionOutputDTO\n     */\n    functions: Array<FunctionOutputDTO>;\n    /**\n     *\n     * @type {Array<PermissionOutputDTO>}\n     * @memberof ModuleVersionOutputDTO\n     */\n    permissions: Array<PermissionOutputDTO>;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ModuleVersionOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ModuleVersionOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface ModuleVersionOutputDTOAPI\n */\ninterface ModuleVersionOutputDTOAPI {\n    /**\n     *\n     * @type {ModuleVersionOutputDTO}\n     * @memberof ModuleVersionOutputDTOAPI\n     */\n    data: ModuleVersionOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ModuleVersionOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ModuleVersionSearchInputAllowedFilters\n */\ninterface ModuleVersionSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleVersionSearchInputAllowedFilters\n     */\n    version?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleVersionSearchInputAllowedFilters\n     */\n    moduleId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleVersionSearchInputAllowedFilters\n     */\n    tag?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleVersionSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface ModuleVersionSearchInputAllowedSearch\n */\ninterface ModuleVersionSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleVersionSearchInputAllowedSearch\n     */\n    tag?: Array<string>;\n}\n/**\n *\n * @export\n * @interface ModuleVersionSearchInputDTO\n */\ninterface ModuleVersionSearchInputDTO {\n    /**\n     *\n     * @type {ModuleVersionSearchInputAllowedFilters}\n     * @memberof ModuleVersionSearchInputDTO\n     */\n    filters?: ModuleVersionSearchInputAllowedFilters;\n    /**\n     *\n     * @type {ModuleVersionSearchInputAllowedSearch}\n     * @memberof ModuleVersionSearchInputDTO\n     */\n    search?: ModuleVersionSearchInputAllowedSearch;\n    /**\n     *\n     * @type {RangeFilterCreatedAndUpdatedAt}\n     * @memberof ModuleVersionSearchInputDTO\n     */\n    greaterThan?: RangeFilterCreatedAndUpdatedAt;\n    /**\n     *\n     * @type {RangeFilterCreatedAndUpdatedAt}\n     * @memberof ModuleVersionSearchInputDTO\n     */\n    lessThan?: RangeFilterCreatedAndUpdatedAt;\n    /**\n     *\n     * @type {number}\n     * @memberof ModuleVersionSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof ModuleVersionSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionSearchInputDTO\n     */\n    sortDirection?: ModuleVersionSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ModuleVersionSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const ModuleVersionSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype ModuleVersionSearchInputDTOSortDirectionEnum = (typeof ModuleVersionSearchInputDTOSortDirectionEnum)[keyof typeof ModuleVersionSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface ModuleVersionUpdateDTO\n */\ninterface ModuleVersionUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionUpdateDTO\n     */\n    description?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionUpdateDTO\n     */\n    configSchema?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ModuleVersionUpdateDTO\n     */\n    uiSchema?: string;\n    /**\n     *\n     * @type {Array<PermissionCreateDTO>}\n     * @memberof ModuleVersionUpdateDTO\n     */\n    permissions?: Array<PermissionCreateDTO>;\n}\n/**\n *\n * @export\n * @interface NOTDOMAINSCOPEDTakaroModelDTO\n */\ninterface NOTDOMAINSCOPEDTakaroModelDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof NOTDOMAINSCOPEDTakaroModelDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof NOTDOMAINSCOPEDTakaroModelDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof NOTDOMAINSCOPEDTakaroModelDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n * @type NOTDOMAINSCOPEDTakaroModelDTOCreatedAt\n * @export\n */\ntype NOTDOMAINSCOPEDTakaroModelDTOCreatedAt = string;\n/**\n *\n * @export\n * @interface OptionalPogStatsInputDTO\n */\ninterface OptionalPogStatsInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof OptionalPogStatsInputDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof OptionalPogStatsInputDTO\n     */\n    playerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof OptionalPogStatsInputDTO\n     */\n    startDate?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof OptionalPogStatsInputDTO\n     */\n    endDate?: string;\n}\n/**\n *\n * @export\n * @enum {string}\n */\ndeclare const PERMISSIONS: {\n    readonly Root: \"ROOT\";\n    readonly ManageUsers: \"MANAGE_USERS\";\n    readonly ReadUsers: \"READ_USERS\";\n    readonly ManageRoles: \"MANAGE_ROLES\";\n    readonly ReadRoles: \"READ_ROLES\";\n    readonly ManageGameservers: \"MANAGE_GAMESERVERS\";\n    readonly ReadModules: \"READ_MODULES\";\n    readonly ManageModules: \"MANAGE_MODULES\";\n    readonly ReadPlayers: \"READ_PLAYERS\";\n    readonly ManagePlayers: \"MANAGE_PLAYERS\";\n    readonly ManageSettings: \"MANAGE_SETTINGS\";\n    readonly ReadSettings: \"READ_SETTINGS\";\n    readonly ReadVariables: \"READ_VARIABLES\";\n    readonly ManageVariables: \"MANAGE_VARIABLES\";\n    readonly ReadEvents: \"READ_EVENTS\";\n    readonly ManageEvents: \"MANAGE_EVENTS\";\n    readonly ReadItems: \"READ_ITEMS\";\n    readonly ManageItems: \"MANAGE_ITEMS\";\n    readonly ManageShopListings: \"MANAGE_SHOP_LISTINGS\";\n    readonly ManageShopOrders: \"MANAGE_SHOP_ORDERS\";\n};\ntype PERMISSIONS = (typeof PERMISSIONS)[keyof typeof PERMISSIONS];\n/**\n *\n * @export\n * @interface PaginationParams\n */\ninterface PaginationParams {\n    /**\n     *\n     * @type {number}\n     * @memberof PaginationParams\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PaginationParams\n     */\n    limit?: number;\n}\n/**\n *\n * @export\n * @interface PaginationParamsWithGameServer\n */\ninterface PaginationParamsWithGameServer {\n    /**\n     *\n     * @type {string}\n     * @memberof PaginationParamsWithGameServer\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof PaginationParamsWithGameServer\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PaginationParamsWithGameServer\n     */\n    limit?: number;\n}\n/**\n *\n * @export\n * @interface ParamId\n */\ninterface ParamId {\n    /**\n     *\n     * @type {string}\n     * @memberof ParamId\n     */\n    id: string;\n}\n/**\n *\n * @export\n * @interface ParamIdAndRoleId\n */\ninterface ParamIdAndRoleId {\n    /**\n     *\n     * @type {string}\n     * @memberof ParamIdAndRoleId\n     */\n    roleId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ParamIdAndRoleId\n     */\n    id: string;\n}\n/**\n *\n * @export\n * @interface ParamKey\n */\ninterface ParamKey {\n    /**\n     *\n     * @type {string}\n     * @memberof ParamKey\n     */\n    key: ParamKeyKeyEnum;\n}\ndeclare const ParamKeyKeyEnum: {\n    readonly CommandPrefix: \"commandPrefix\";\n    readonly ServerChatName: \"serverChatName\";\n    readonly EconomyEnabled: \"economyEnabled\";\n    readonly CurrencyName: \"currencyName\";\n    readonly DeveloperMode: \"developerMode\";\n};\ntype ParamKeyKeyEnum = (typeof ParamKeyKeyEnum)[keyof typeof ParamKeyKeyEnum];\n/**\n *\n * @export\n * @interface ParamSenderReceiver\n */\ninterface ParamSenderReceiver {\n    /**\n     *\n     * @type {string}\n     * @memberof ParamSenderReceiver\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ParamSenderReceiver\n     */\n    sender: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ParamSenderReceiver\n     */\n    receiver: string;\n}\n/**\n *\n * @export\n * @interface PermissionCreateDTO\n */\ninterface PermissionCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionCreateDTO\n     */\n    permission: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionCreateDTO\n     */\n    friendlyName: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionCreateDTO\n     */\n    description: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof PermissionCreateDTO\n     */\n    canHaveCount?: boolean;\n}\n/**\n *\n * @export\n * @interface PermissionInputDTO\n */\ninterface PermissionInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionInputDTO\n     */\n    permissionId: string;\n    /**\n     *\n     * @type {number}\n     * @memberof PermissionInputDTO\n     */\n    count?: number;\n}\n/**\n *\n * @export\n * @interface PermissionModuleDTO\n */\ninterface PermissionModuleDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionModuleDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionModuleDTO\n     */\n    name: string;\n}\n/**\n *\n * @export\n * @interface PermissionOnRoleDTO\n */\ninterface PermissionOnRoleDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionOnRoleDTO\n     */\n    permissionId: string;\n    /**\n     *\n     * @type {PermissionOutputDTO}\n     * @memberof PermissionOnRoleDTO\n     */\n    permission: PermissionOutputDTO;\n    /**\n     *\n     * @type {number}\n     * @memberof PermissionOnRoleDTO\n     */\n    count: number;\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionOnRoleDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PermissionOnRoleDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PermissionOnRoleDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface PermissionOutputDTO\n */\ninterface PermissionOutputDTO {\n    /**\n     *\n     * @type {PermissionModuleDTO}\n     * @memberof PermissionOutputDTO\n     */\n    module?: PermissionModuleDTO;\n    /**\n     *\n     * @type {PermissionVersionDTO}\n     * @memberof PermissionOutputDTO\n     */\n    version?: PermissionVersionDTO;\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionOutputDTO\n     */\n    moduleVersionId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionOutputDTO\n     */\n    permission: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionOutputDTO\n     */\n    friendlyName: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionOutputDTO\n     */\n    description: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof PermissionOutputDTO\n     */\n    canHaveCount?: boolean;\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PermissionOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PermissionOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface PermissionOutputDTOAPI\n */\ninterface PermissionOutputDTOAPI {\n    /**\n     *\n     * @type {Array<PermissionOutputDTO>}\n     * @memberof PermissionOutputDTOAPI\n     */\n    data: Array<PermissionOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof PermissionOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface PermissionVersionDTO\n */\ninterface PermissionVersionDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionVersionDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PermissionVersionDTO\n     */\n    tag: string;\n}\n/**\n *\n * @export\n * @interface PlayerCreateDTO\n */\ninterface PlayerCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerCreateDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerCreateDTO\n     */\n    steamId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerCreateDTO\n     */\n    xboxLiveId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerCreateDTO\n     */\n    epicOnlineServicesId?: string;\n}\n/**\n *\n * @export\n * @interface PlayerMeOutputDTO\n */\ninterface PlayerMeOutputDTO {\n    /**\n     *\n     * @type {PlayerOutputWithRolesDTO}\n     * @memberof PlayerMeOutputDTO\n     */\n    player: PlayerOutputWithRolesDTO;\n    /**\n     *\n     * @type {Array<PlayerOnGameserverOutputArrayDTOAPI>}\n     * @memberof PlayerMeOutputDTO\n     */\n    pogs: Array<PlayerOnGameserverOutputArrayDTOAPI>;\n}\n/**\n *\n * @export\n * @interface PlayerOnGameServerCreateDTO\n */\ninterface PlayerOnGameServerCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameServerCreateDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameServerCreateDTO\n     */\n    playerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameServerCreateDTO\n     */\n    gameId: string;\n}\n/**\n *\n * @export\n * @interface PlayerOnGameServerSearchInputAllowedFilters\n */\ninterface PlayerOnGameServerSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerOnGameServerSearchInputAllowedFilters\n     */\n    gameId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerOnGameServerSearchInputAllowedFilters\n     */\n    gameServerId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerOnGameServerSearchInputAllowedFilters\n     */\n    playerId?: Array<string>;\n    /**\n     *\n     * @type {Array<boolean>}\n     * @memberof PlayerOnGameServerSearchInputAllowedFilters\n     */\n    online?: Array<boolean>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerOnGameServerSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface PlayerOnGameServerSearchInputAllowedRangeFilter\n */\ninterface PlayerOnGameServerSearchInputAllowedRangeFilter {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOnGameServerSearchInputAllowedRangeFilter\n     */\n    lastSeen?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameServerSearchInputAllowedRangeFilter\n     */\n    playtimeSeconds?: number;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOnGameServerSearchInputAllowedRangeFilter\n     */\n    createdAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOnGameServerSearchInputAllowedRangeFilter\n     */\n    updatedAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface PlayerOnGameServerSearchInputDTO\n */\ninterface PlayerOnGameServerSearchInputDTO {\n    /**\n     *\n     * @type {PlayerOnGameServerSearchInputAllowedFilters}\n     * @memberof PlayerOnGameServerSearchInputDTO\n     */\n    filters?: PlayerOnGameServerSearchInputAllowedFilters;\n    /**\n     *\n     * @type {PlayerOnGameServerSearchInputAllowedRangeFilter}\n     * @memberof PlayerOnGameServerSearchInputDTO\n     */\n    greaterThan?: PlayerOnGameServerSearchInputAllowedRangeFilter;\n    /**\n     *\n     * @type {PlayerOnGameServerSearchInputAllowedRangeFilter}\n     * @memberof PlayerOnGameServerSearchInputDTO\n     */\n    lessThan?: PlayerOnGameServerSearchInputAllowedRangeFilter;\n    /**\n     *\n     * @type {any}\n     * @memberof PlayerOnGameServerSearchInputDTO\n     */\n    search?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameServerSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameServerSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameServerSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameServerSearchInputDTO\n     */\n    sortDirection?: PlayerOnGameServerSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerOnGameServerSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const PlayerOnGameServerSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype PlayerOnGameServerSearchInputDTOSortDirectionEnum = (typeof PlayerOnGameServerSearchInputDTOSortDirectionEnum)[keyof typeof PlayerOnGameServerSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface PlayerOnGameServerSetCurrencyInputDTO\n */\ninterface PlayerOnGameServerSetCurrencyInputDTO {\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameServerSetCurrencyInputDTO\n     */\n    currency: number;\n}\n/**\n *\n * @export\n * @interface PlayerOnGameServerUpdateDTO\n */\ninterface PlayerOnGameServerUpdateDTO {\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameServerUpdateDTO\n     */\n    positionX?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameServerUpdateDTO\n     */\n    positionY?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameServerUpdateDTO\n     */\n    positionZ?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameServerUpdateDTO\n     */\n    ip?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameServerUpdateDTO\n     */\n    ping?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameServerUpdateDTO\n     */\n    currency?: number;\n    /**\n     *\n     * @type {boolean}\n     * @memberof PlayerOnGameServerUpdateDTO\n     */\n    online: boolean;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameServerUpdateDTO\n     */\n    playtimeSeconds?: number;\n}\n/**\n *\n * @export\n * @interface PlayerOnGameserverOutputArrayDTOAPI\n */\ninterface PlayerOnGameserverOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<PlayerOnGameserverOutputWithRolesDTO>}\n     * @memberof PlayerOnGameserverOutputArrayDTOAPI\n     */\n    data: Array<PlayerOnGameserverOutputWithRolesDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof PlayerOnGameserverOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface PlayerOnGameserverOutputDTO\n */\ninterface PlayerOnGameserverOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    playerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    gameId: string;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    positionX?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    positionY?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    positionZ?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    ip?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    ping?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    currency: number;\n    /**\n     *\n     * @type {boolean}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    online: boolean;\n    /**\n     *\n     * @type {Array<IItemDTO>}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    inventory: Array<IItemDTO>;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    lastSeen: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    playtimeSeconds: number;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOnGameserverOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface PlayerOnGameserverOutputDTOAPI\n */\ninterface PlayerOnGameserverOutputDTOAPI {\n    /**\n     *\n     * @type {PlayerOnGameserverOutputWithRolesDTO}\n     * @memberof PlayerOnGameserverOutputDTOAPI\n     */\n    data: PlayerOnGameserverOutputWithRolesDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof PlayerOnGameserverOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface PlayerOnGameserverOutputWithRolesDTO\n */\ninterface PlayerOnGameserverOutputWithRolesDTO {\n    /**\n     *\n     * @type {Array<PlayerRoleAssignmentOutputDTO>}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    roles: Array<PlayerRoleAssignmentOutputDTO>;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    playerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    gameId: string;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    positionX?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    positionY?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    positionZ?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    ip?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    ping?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    currency: number;\n    /**\n     *\n     * @type {boolean}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    online: boolean;\n    /**\n     *\n     * @type {Array<IItemDTO>}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    inventory: Array<IItemDTO>;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    lastSeen: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOnGameserverOutputWithRolesDTO\n     */\n    playtimeSeconds: number;\n}\n/**\n *\n * @export\n * @interface PlayerOutputArrayDTOAPI\n */\ninterface PlayerOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<PlayerOutputDTO>}\n     * @memberof PlayerOutputArrayDTOAPI\n     */\n    data: Array<PlayerOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof PlayerOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface PlayerOutputDTO\n */\ninterface PlayerOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputDTO\n     */\n    steamId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputDTO\n     */\n    xboxLiveId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputDTO\n     */\n    epicOnlineServicesId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputDTO\n     */\n    steamAvatar?: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOutputDTO\n     */\n    steamAccountCreated?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {boolean}\n     * @memberof PlayerOutputDTO\n     */\n    steamCommunityBanned?: boolean;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputDTO\n     */\n    steamEconomyBan?: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof PlayerOutputDTO\n     */\n    steamVacBanned?: boolean;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOutputDTO\n     */\n    steamsDaysSinceLastBan?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOutputDTO\n     */\n    steamNumberOfVACBans?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOutputDTO\n     */\n    steamLevel?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOutputDTO\n     */\n    playtimeSeconds: number;\n    /**\n     *\n     * @type {Array<PlayerOnGameserverOutputDTO>}\n     * @memberof PlayerOutputDTO\n     */\n    playerOnGameServers?: Array<PlayerOnGameserverOutputDTO>;\n    /**\n     *\n     * @type {Array<IpHistoryOutputDTO>}\n     * @memberof PlayerOutputDTO\n     */\n    ipHistory: Array<IpHistoryOutputDTO>;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface PlayerOutputDTOAPI\n */\ninterface PlayerOutputDTOAPI {\n    /**\n     *\n     * @type {PlayerOutputWithRolesDTO}\n     * @memberof PlayerOutputDTOAPI\n     */\n    data: PlayerOutputWithRolesDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof PlayerOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface PlayerOutputWithRolesDTO\n */\ninterface PlayerOutputWithRolesDTO {\n    /**\n     *\n     * @type {Array<PlayerRoleAssignmentOutputDTO>}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    roleAssignments: Array<PlayerRoleAssignmentOutputDTO>;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    steamId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    xboxLiveId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    epicOnlineServicesId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    steamAvatar?: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    steamAccountCreated?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {boolean}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    steamCommunityBanned?: boolean;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    steamEconomyBan?: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    steamVacBanned?: boolean;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    steamsDaysSinceLastBan?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    steamNumberOfVACBans?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    steamLevel?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    playtimeSeconds: number;\n    /**\n     *\n     * @type {Array<PlayerOnGameserverOutputDTO>}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    playerOnGameServers?: Array<PlayerOnGameserverOutputDTO>;\n    /**\n     *\n     * @type {Array<IpHistoryOutputDTO>}\n     * @memberof PlayerOutputWithRolesDTO\n     */\n    ipHistory: Array<IpHistoryOutputDTO>;\n}\n/**\n *\n * @export\n * @interface PlayerOutputWithRolesDTOAPI\n */\ninterface PlayerOutputWithRolesDTOAPI {\n    /**\n     *\n     * @type {PlayerOutputWithRolesDTO}\n     * @memberof PlayerOutputWithRolesDTOAPI\n     */\n    data: PlayerOutputWithRolesDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof PlayerOutputWithRolesDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface PlayerRoleAssignChangeDTO\n */\ninterface PlayerRoleAssignChangeDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerRoleAssignChangeDTO\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerRoleAssignChangeDTO\n     */\n    expiresAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface PlayerRoleAssignmentOutputDTO\n */\ninterface PlayerRoleAssignmentOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerRoleAssignmentOutputDTO\n     */\n    playerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerRoleAssignmentOutputDTO\n     */\n    roleId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerRoleAssignmentOutputDTO\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {RoleOutputDTO}\n     * @memberof PlayerRoleAssignmentOutputDTO\n     */\n    role: RoleOutputDTO;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerRoleAssignmentOutputDTO\n     */\n    expiresAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerRoleAssignmentOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerRoleAssignmentOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerRoleAssignmentOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface PlayerSearchInputAllowedFilters\n */\ninterface PlayerSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerSearchInputAllowedFilters\n     */\n    steamId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerSearchInputAllowedFilters\n     */\n    epicOnlineServicesId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerSearchInputAllowedFilters\n     */\n    xboxLiveId?: Array<string>;\n    /**\n     *\n     * @type {Array<boolean>}\n     * @memberof PlayerSearchInputAllowedFilters\n     */\n    steamCommunityBanned?: Array<boolean>;\n    /**\n     *\n     * @type {Array<boolean>}\n     * @memberof PlayerSearchInputAllowedFilters\n     */\n    steamVacBanned?: Array<boolean>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerSearchInputAllowedFilters\n     */\n    roleId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface PlayerSearchInputAllowedRangeFilter\n */\ninterface PlayerSearchInputAllowedRangeFilter {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerSearchInputAllowedRangeFilter\n     */\n    steamAccountCreated?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerSearchInputAllowedRangeFilter\n     */\n    steamsDaysSinceLastBan?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerSearchInputAllowedRangeFilter\n     */\n    steamNumberOfVACBans?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerSearchInputAllowedRangeFilter\n     */\n    steamLevel?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerSearchInputAllowedRangeFilter\n     */\n    playtimeSeconds?: number;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerSearchInputAllowedRangeFilter\n     */\n    createdAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof PlayerSearchInputAllowedRangeFilter\n     */\n    updatedAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface PlayerSearchInputAllowedSearch\n */\ninterface PlayerSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerSearchInputAllowedSearch\n     */\n    steamId?: Array<string>;\n}\n/**\n *\n * @export\n * @interface PlayerSearchInputDTO\n */\ninterface PlayerSearchInputDTO {\n    /**\n     *\n     * @type {PlayerSearchInputAllowedFilters}\n     * @memberof PlayerSearchInputDTO\n     */\n    filters?: PlayerSearchInputAllowedFilters;\n    /**\n     *\n     * @type {PlayerSearchInputAllowedSearch}\n     * @memberof PlayerSearchInputDTO\n     */\n    search?: PlayerSearchInputAllowedSearch;\n    /**\n     *\n     * @type {PlayerSearchInputAllowedRangeFilter}\n     * @memberof PlayerSearchInputDTO\n     */\n    greaterThan?: PlayerSearchInputAllowedRangeFilter;\n    /**\n     *\n     * @type {PlayerSearchInputAllowedRangeFilter}\n     * @memberof PlayerSearchInputDTO\n     */\n    lessThan?: PlayerSearchInputAllowedRangeFilter;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerSearchInputDTO\n     */\n    sortDirection?: PlayerSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof PlayerSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const PlayerSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype PlayerSearchInputDTOSortDirectionEnum = (typeof PlayerSearchInputDTOSortDirectionEnum)[keyof typeof PlayerSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface PlayerUpdateDTO\n */\ninterface PlayerUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerUpdateDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerUpdateDTO\n     */\n    steamId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerUpdateDTO\n     */\n    xboxLiveId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayerUpdateDTO\n     */\n    epicOnlineServicesId?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof PlayerUpdateDTO\n     */\n    playtimeSeconds?: number;\n}\n/**\n *\n * @export\n * @interface PlayersOnlineInputDTO\n */\ninterface PlayersOnlineInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PlayersOnlineInputDTO\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayersOnlineInputDTO\n     */\n    startDate?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PlayersOnlineInputDTO\n     */\n    endDate?: string;\n}\n/**\n *\n * @export\n * @interface PogParam\n */\ninterface PogParam {\n    /**\n     *\n     * @type {string}\n     * @memberof PogParam\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PogParam\n     */\n    playerId: string;\n}\n/**\n *\n * @export\n * @interface PogStatsInputDTO\n */\ninterface PogStatsInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof PogStatsInputDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PogStatsInputDTO\n     */\n    playerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PogStatsInputDTO\n     */\n    startDate?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof PogStatsInputDTO\n     */\n    endDate?: string;\n}\n/**\n *\n * @export\n * @interface RangeFilterCreatedAndUpdatedAt\n */\ninterface RangeFilterCreatedAndUpdatedAt {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof RangeFilterCreatedAndUpdatedAt\n     */\n    createdAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof RangeFilterCreatedAndUpdatedAt\n     */\n    updatedAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface RedirectQs\n */\ninterface RedirectQs {\n    /**\n     *\n     * @type {string}\n     * @memberof RedirectQs\n     */\n    redirect: string;\n}\n/**\n *\n * @export\n * @interface RoleCreateInputDTO\n */\ninterface RoleCreateInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof RoleCreateInputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {Array<PermissionInputDTO>}\n     * @memberof RoleCreateInputDTO\n     */\n    permissions: Array<PermissionInputDTO>;\n}\n/**\n *\n * @export\n * @interface RoleMembersOutputDTO\n */\ninterface RoleMembersOutputDTO {\n    /**\n     *\n     * @type {RoleMembersPlayersOutputDTO}\n     * @memberof RoleMembersOutputDTO\n     */\n    players: RoleMembersPlayersOutputDTO;\n    /**\n     *\n     * @type {RoleMembersUsersOutputDTO}\n     * @memberof RoleMembersOutputDTO\n     */\n    users: RoleMembersUsersOutputDTO;\n}\n/**\n *\n * @export\n * @interface RoleMembersOutputDTOAPI\n */\ninterface RoleMembersOutputDTOAPI {\n    /**\n     *\n     * @type {RoleMembersOutputDTO}\n     * @memberof RoleMembersOutputDTOAPI\n     */\n    data: RoleMembersOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof RoleMembersOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface RoleMembersPlayersOutputDTO\n */\ninterface RoleMembersPlayersOutputDTO {\n    /**\n     *\n     * @type {number}\n     * @memberof RoleMembersPlayersOutputDTO\n     */\n    total: number;\n    /**\n     *\n     * @type {Array<PlayerOutputWithRolesDTO>}\n     * @memberof RoleMembersPlayersOutputDTO\n     */\n    results: Array<PlayerOutputWithRolesDTO>;\n}\n/**\n *\n * @export\n * @interface RoleMembersUsersOutputDTO\n */\ninterface RoleMembersUsersOutputDTO {\n    /**\n     *\n     * @type {number}\n     * @memberof RoleMembersUsersOutputDTO\n     */\n    total: number;\n    /**\n     *\n     * @type {Array<UserOutputWithRolesDTO>}\n     * @memberof RoleMembersUsersOutputDTO\n     */\n    results: Array<UserOutputWithRolesDTO>;\n}\n/**\n *\n * @export\n * @interface RoleOutputArrayDTOAPI\n */\ninterface RoleOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<RoleOutputDTO>}\n     * @memberof RoleOutputArrayDTOAPI\n     */\n    data: Array<RoleOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof RoleOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface RoleOutputDTO\n */\ninterface RoleOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof RoleOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {Array<PermissionOnRoleDTO>}\n     * @memberof RoleOutputDTO\n     */\n    permissions: Array<PermissionOnRoleDTO>;\n    /**\n     *\n     * @type {boolean}\n     * @memberof RoleOutputDTO\n     */\n    system: boolean;\n    /**\n     *\n     * @type {string}\n     * @memberof RoleOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof RoleOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof RoleOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface RoleOutputDTOAPI\n */\ninterface RoleOutputDTOAPI {\n    /**\n     *\n     * @type {RoleOutputDTO}\n     * @memberof RoleOutputDTOAPI\n     */\n    data: RoleOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof RoleOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface RoleSearchInputAllowedFilters\n */\ninterface RoleSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof RoleSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof RoleSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface RoleSearchInputAllowedSearch\n */\ninterface RoleSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof RoleSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n}\n/**\n *\n * @export\n * @interface RoleSearchInputDTO\n */\ninterface RoleSearchInputDTO {\n    /**\n     *\n     * @type {RoleSearchInputAllowedFilters}\n     * @memberof RoleSearchInputDTO\n     */\n    filters?: RoleSearchInputAllowedFilters;\n    /**\n     *\n     * @type {RoleSearchInputAllowedSearch}\n     * @memberof RoleSearchInputDTO\n     */\n    search?: RoleSearchInputAllowedSearch;\n    /**\n     *\n     * @type {any}\n     * @memberof RoleSearchInputDTO\n     */\n    greaterThan?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof RoleSearchInputDTO\n     */\n    lessThan?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof RoleSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof RoleSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof RoleSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof RoleSearchInputDTO\n     */\n    sortDirection?: RoleSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof RoleSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const RoleSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype RoleSearchInputDTOSortDirectionEnum = (typeof RoleSearchInputDTOSortDirectionEnum)[keyof typeof RoleSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface RoleUpdateInputDTO\n */\ninterface RoleUpdateInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof RoleUpdateInputDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {Array<PermissionInputDTO>}\n     * @memberof RoleUpdateInputDTO\n     */\n    permissions?: Array<PermissionInputDTO>;\n}\n/**\n *\n * @export\n * @interface RustConnectionInfo\n */\ninterface RustConnectionInfo {\n    /**\n     *\n     * @type {string}\n     * @memberof RustConnectionInfo\n     */\n    host: string;\n    /**\n     *\n     * @type {number}\n     * @memberof RustConnectionInfo\n     */\n    rconPort: number;\n    /**\n     *\n     * @type {string}\n     * @memberof RustConnectionInfo\n     */\n    rconPassword: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof RustConnectionInfo\n     */\n    useTls: boolean;\n}\n/**\n *\n * @export\n * @interface SdtdConnectionInfo\n */\ninterface SdtdConnectionInfo {\n    /**\n     *\n     * @type {string}\n     * @memberof SdtdConnectionInfo\n     */\n    host: string;\n    /**\n     *\n     * @type {string}\n     * @memberof SdtdConnectionInfo\n     */\n    adminUser: string;\n    /**\n     *\n     * @type {string}\n     * @memberof SdtdConnectionInfo\n     */\n    adminToken: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof SdtdConnectionInfo\n     */\n    useTls: boolean;\n    /**\n     *\n     * @type {boolean}\n     * @memberof SdtdConnectionInfo\n     */\n    useCPM: boolean;\n    /**\n     *\n     * @type {boolean}\n     * @memberof SdtdConnectionInfo\n     */\n    useLegacy: boolean;\n}\n/**\n *\n * @export\n * @interface SearchRoleInputDTO\n */\ninterface SearchRoleInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof SearchRoleInputDTO\n     */\n    name: string;\n}\n/**\n *\n * @export\n * @interface SendMessageInputDTO\n */\ninterface SendMessageInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof SendMessageInputDTO\n     */\n    message: string;\n}\n/**\n *\n * @export\n * @interface ServiceRoleCreateInputDTO\n */\ninterface ServiceRoleCreateInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ServiceRoleCreateInputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {Array<PermissionInputDTO>}\n     * @memberof ServiceRoleCreateInputDTO\n     */\n    permissions: Array<PermissionInputDTO>;\n    /**\n     *\n     * @type {boolean}\n     * @memberof ServiceRoleCreateInputDTO\n     */\n    system?: boolean;\n}\n/**\n *\n * @export\n * @interface Settings\n */\ninterface Settings {\n    /**\n     *\n     * @type {string}\n     * @memberof Settings\n     */\n    commandPrefix: string;\n    /**\n     *\n     * @type {string}\n     * @memberof Settings\n     */\n    serverChatName: string;\n    /**\n     *\n     * @type {string}\n     * @memberof Settings\n     */\n    economyEnabled: string;\n    /**\n     *\n     * @type {string}\n     * @memberof Settings\n     */\n    currencyName: string;\n    /**\n     *\n     * @type {string}\n     * @memberof Settings\n     */\n    developerMode: string;\n    /**\n     *\n     * @type {string}\n     * @memberof Settings\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof Settings\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof Settings\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface SettingsOutputArrayDTOAPI\n */\ninterface SettingsOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<SettingsOutputDTO>}\n     * @memberof SettingsOutputArrayDTOAPI\n     */\n    data: Array<SettingsOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof SettingsOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface SettingsOutputDTO\n */\ninterface SettingsOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof SettingsOutputDTO\n     */\n    key: SettingsOutputDTOKeyEnum;\n    /**\n     *\n     * @type {string}\n     * @memberof SettingsOutputDTO\n     */\n    value: string;\n    /**\n     *\n     * @type {string}\n     * @memberof SettingsOutputDTO\n     */\n    type: SettingsOutputDTOTypeEnum;\n}\ndeclare const SettingsOutputDTOKeyEnum: {\n    readonly CommandPrefix: \"commandPrefix\";\n    readonly ServerChatName: \"serverChatName\";\n    readonly EconomyEnabled: \"economyEnabled\";\n    readonly CurrencyName: \"currencyName\";\n    readonly DeveloperMode: \"developerMode\";\n};\ntype SettingsOutputDTOKeyEnum = (typeof SettingsOutputDTOKeyEnum)[keyof typeof SettingsOutputDTOKeyEnum];\ndeclare const SettingsOutputDTOTypeEnum: {\n    readonly Override: \"override\";\n    readonly Inherit: \"inherit\";\n    readonly Global: \"global\";\n    readonly Default: \"default\";\n};\ntype SettingsOutputDTOTypeEnum = (typeof SettingsOutputDTOTypeEnum)[keyof typeof SettingsOutputDTOTypeEnum];\n/**\n *\n * @export\n * @interface SettingsOutputDTOAPI\n */\ninterface SettingsOutputDTOAPI {\n    /**\n     *\n     * @type {SettingsOutputDTO}\n     * @memberof SettingsOutputDTOAPI\n     */\n    data: SettingsOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof SettingsOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface SettingsSetDTO\n */\ninterface SettingsSetDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof SettingsSetDTO\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {any}\n     * @memberof SettingsSetDTO\n     */\n    value: any;\n}\n/**\n *\n * @export\n * @interface ShopImportOptions\n */\ninterface ShopImportOptions {\n    /**\n     *\n     * @type {boolean}\n     * @memberof ShopImportOptions\n     */\n    replace?: boolean;\n    /**\n     *\n     * @type {boolean}\n     * @memberof ShopImportOptions\n     */\n    draft?: boolean;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopImportOptions\n     */\n    gameServerId: string;\n}\n/**\n *\n * @export\n * @interface ShopListingCreateDTO\n */\ninterface ShopListingCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingCreateDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {Array<ShopListingItemMetaInputDTO>}\n     * @memberof ShopListingCreateDTO\n     */\n    items: Array<ShopListingItemMetaInputDTO>;\n    /**\n     *\n     * @type {number}\n     * @memberof ShopListingCreateDTO\n     */\n    price: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingCreateDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof ShopListingCreateDTO\n     */\n    draft?: boolean;\n}\n/**\n *\n * @export\n * @interface ShopListingItemMetaInputDTO\n */\ninterface ShopListingItemMetaInputDTO {\n    /**\n     *\n     * @type {number}\n     * @memberof ShopListingItemMetaInputDTO\n     */\n    amount: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingItemMetaInputDTO\n     */\n    quality?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingItemMetaInputDTO\n     */\n    code?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingItemMetaInputDTO\n     */\n    itemId?: string;\n}\n/**\n *\n * @export\n * @interface ShopListingItemMetaOutputDTO\n */\ninterface ShopListingItemMetaOutputDTO {\n    /**\n     *\n     * @type {number}\n     * @memberof ShopListingItemMetaOutputDTO\n     */\n    amount: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingItemMetaOutputDTO\n     */\n    quality?: string;\n    /**\n     *\n     * @type {ItemsOutputDTO}\n     * @memberof ShopListingItemMetaOutputDTO\n     */\n    item: ItemsOutputDTO;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingItemMetaOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ShopListingItemMetaOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ShopListingItemMetaOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface ShopListingOutputArrayDTOAPI\n */\ninterface ShopListingOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<ShopListingOutputDTO>}\n     * @memberof ShopListingOutputArrayDTOAPI\n     */\n    data: Array<ShopListingOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ShopListingOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ShopListingOutputDTO\n */\ninterface ShopListingOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingOutputDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {Array<ShopListingItemMetaOutputDTO>}\n     * @memberof ShopListingOutputDTO\n     */\n    items: Array<ShopListingItemMetaOutputDTO>;\n    /**\n     *\n     * @type {number}\n     * @memberof ShopListingOutputDTO\n     */\n    price: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ShopListingOutputDTO\n     */\n    deletedAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {boolean}\n     * @memberof ShopListingOutputDTO\n     */\n    draft: boolean;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ShopListingOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ShopListingOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface ShopListingOutputDTOAPI\n */\ninterface ShopListingOutputDTOAPI {\n    /**\n     *\n     * @type {ShopListingOutputDTO}\n     * @memberof ShopListingOutputDTOAPI\n     */\n    data: ShopListingOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ShopListingOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ShopListingSearchInputAllowedFilters\n */\ninterface ShopListingSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ShopListingSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ShopListingSearchInputAllowedFilters\n     */\n    gameServerId?: Array<string>;\n    /**\n     *\n     * @type {Array<number>}\n     * @memberof ShopListingSearchInputAllowedFilters\n     */\n    price?: Array<number>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ShopListingSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {boolean}\n     * @memberof ShopListingSearchInputAllowedFilters\n     */\n    draft?: boolean;\n}\n/**\n *\n * @export\n * @interface ShopListingSearchInputAllowedSearch\n */\ninterface ShopListingSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ShopListingSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n}\n/**\n *\n * @export\n * @interface ShopListingSearchInputDTO\n */\ninterface ShopListingSearchInputDTO {\n    /**\n     *\n     * @type {ShopListingSearchInputAllowedFilters}\n     * @memberof ShopListingSearchInputDTO\n     */\n    filters?: ShopListingSearchInputAllowedFilters;\n    /**\n     *\n     * @type {ShopListingSearchInputAllowedSearch}\n     * @memberof ShopListingSearchInputDTO\n     */\n    search?: ShopListingSearchInputAllowedSearch;\n    /**\n     *\n     * @type {ShopSearchInputAllowedRangeFilter}\n     * @memberof ShopListingSearchInputDTO\n     */\n    greaterThan?: ShopSearchInputAllowedRangeFilter;\n    /**\n     *\n     * @type {ShopSearchInputAllowedRangeFilter}\n     * @memberof ShopListingSearchInputDTO\n     */\n    lessThan?: ShopSearchInputAllowedRangeFilter;\n    /**\n     *\n     * @type {number}\n     * @memberof ShopListingSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof ShopListingSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingSearchInputDTO\n     */\n    sortDirection?: ShopListingSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ShopListingSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const ShopListingSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype ShopListingSearchInputDTOSortDirectionEnum = (typeof ShopListingSearchInputDTOSortDirectionEnum)[keyof typeof ShopListingSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface ShopListingUpdateDTO\n */\ninterface ShopListingUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingUpdateDTO\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {Array<ShopListingItemMetaInputDTO>}\n     * @memberof ShopListingUpdateDTO\n     */\n    items?: Array<ShopListingItemMetaInputDTO>;\n    /**\n     *\n     * @type {number}\n     * @memberof ShopListingUpdateDTO\n     */\n    price?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopListingUpdateDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof ShopListingUpdateDTO\n     */\n    draft?: boolean;\n}\n/**\n *\n * @export\n * @interface ShopOrderCreateDTO\n */\ninterface ShopOrderCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderCreateDTO\n     */\n    listingId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderCreateDTO\n     */\n    playerId?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof ShopOrderCreateDTO\n     */\n    amount: number;\n}\n/**\n *\n * @export\n * @interface ShopOrderCreateInternalDTO\n */\ninterface ShopOrderCreateInternalDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderCreateInternalDTO\n     */\n    playerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderCreateInternalDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderCreateInternalDTO\n     */\n    listingId: string;\n    /**\n     *\n     * @type {number}\n     * @memberof ShopOrderCreateInternalDTO\n     */\n    amount: number;\n}\n/**\n *\n * @export\n * @interface ShopOrderOutputArrayDTOAPI\n */\ninterface ShopOrderOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<ShopOrderOutputDTO>}\n     * @memberof ShopOrderOutputArrayDTOAPI\n     */\n    data: Array<ShopOrderOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ShopOrderOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ShopOrderOutputDTO\n */\ninterface ShopOrderOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderOutputDTO\n     */\n    listingId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderOutputDTO\n     */\n    playerId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderOutputDTO\n     */\n    gameServerId: string;\n    /**\n     *\n     * @type {number}\n     * @memberof ShopOrderOutputDTO\n     */\n    amount: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderOutputDTO\n     */\n    status: ShopOrderOutputDTOStatusEnum;\n    /**\n     *\n     * @type {ShopListingOutputDTO}\n     * @memberof ShopOrderOutputDTO\n     */\n    listing?: ShopListingOutputDTO;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ShopOrderOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ShopOrderOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\ndeclare const ShopOrderOutputDTOStatusEnum: {\n    readonly Completed: \"COMPLETED\";\n    readonly Paid: \"PAID\";\n    readonly Canceled: \"CANCELED\";\n};\ntype ShopOrderOutputDTOStatusEnum = (typeof ShopOrderOutputDTOStatusEnum)[keyof typeof ShopOrderOutputDTOStatusEnum];\n/**\n *\n * @export\n * @interface ShopOrderOutputDTOAPI\n */\ninterface ShopOrderOutputDTOAPI {\n    /**\n     *\n     * @type {ShopOrderOutputDTO}\n     * @memberof ShopOrderOutputDTOAPI\n     */\n    data: ShopOrderOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof ShopOrderOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface ShopOrderSearchInputAllowedFilters\n */\ninterface ShopOrderSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ShopOrderSearchInputAllowedFilters\n     */\n    listingId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ShopOrderSearchInputAllowedFilters\n     */\n    gameServerId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ShopOrderSearchInputAllowedFilters\n     */\n    playerId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ShopOrderSearchInputAllowedFilters\n     */\n    userId?: Array<string>;\n    /**\n     *\n     * @type {Array<number>}\n     * @memberof ShopOrderSearchInputAllowedFilters\n     */\n    amount?: Array<number>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ShopOrderSearchInputAllowedFilters\n     */\n    status?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ShopOrderSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface ShopOrderSearchInputAllowedRangeFilter\n */\ninterface ShopOrderSearchInputAllowedRangeFilter {\n    /**\n     *\n     * @type {number}\n     * @memberof ShopOrderSearchInputAllowedRangeFilter\n     */\n    amount?: number;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ShopOrderSearchInputAllowedRangeFilter\n     */\n    createdAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ShopOrderSearchInputAllowedRangeFilter\n     */\n    updatedAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface ShopOrderSearchInputDTO\n */\ninterface ShopOrderSearchInputDTO {\n    /**\n     *\n     * @type {ShopOrderSearchInputAllowedFilters}\n     * @memberof ShopOrderSearchInputDTO\n     */\n    filters?: ShopOrderSearchInputAllowedFilters;\n    /**\n     *\n     * @type {ShopOrderSearchInputAllowedRangeFilter}\n     * @memberof ShopOrderSearchInputDTO\n     */\n    greaterThan?: ShopOrderSearchInputAllowedRangeFilter;\n    /**\n     *\n     * @type {ShopOrderSearchInputAllowedRangeFilter}\n     * @memberof ShopOrderSearchInputDTO\n     */\n    lessThan?: ShopOrderSearchInputAllowedRangeFilter;\n    /**\n     *\n     * @type {any}\n     * @memberof ShopOrderSearchInputDTO\n     */\n    search?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof ShopOrderSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof ShopOrderSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderSearchInputDTO\n     */\n    sortDirection?: ShopOrderSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof ShopOrderSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const ShopOrderSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype ShopOrderSearchInputDTOSortDirectionEnum = (typeof ShopOrderSearchInputDTOSortDirectionEnum)[keyof typeof ShopOrderSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface ShopOrderUpdateDTO\n */\ninterface ShopOrderUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof ShopOrderUpdateDTO\n     */\n    status: ShopOrderUpdateDTOStatusEnum;\n}\ndeclare const ShopOrderUpdateDTOStatusEnum: {\n    readonly Completed: \"COMPLETED\";\n    readonly Paid: \"PAID\";\n    readonly Canceled: \"CANCELED\";\n};\ntype ShopOrderUpdateDTOStatusEnum = (typeof ShopOrderUpdateDTOStatusEnum)[keyof typeof ShopOrderUpdateDTOStatusEnum];\n/**\n *\n * @export\n * @interface ShopSearchInputAllowedRangeFilter\n */\ninterface ShopSearchInputAllowedRangeFilter {\n    /**\n     *\n     * @type {number}\n     * @memberof ShopSearchInputAllowedRangeFilter\n     */\n    price?: number;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ShopSearchInputAllowedRangeFilter\n     */\n    deletedAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ShopSearchInputAllowedRangeFilter\n     */\n    createdAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof ShopSearchInputAllowedRangeFilter\n     */\n    updatedAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface SmallModuleOutputArrayDTOAPI\n */\ninterface SmallModuleOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<SmallModuleVersionOutputDTO>}\n     * @memberof SmallModuleOutputArrayDTOAPI\n     */\n    data: Array<SmallModuleVersionOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof SmallModuleOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface SmallModuleVersionOutputDTO\n */\ninterface SmallModuleVersionOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof SmallModuleVersionOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof SmallModuleVersionOutputDTO\n     */\n    tag: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof SmallModuleVersionOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof SmallModuleVersionOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface StatsOutputDTO\n */\ninterface StatsOutputDTO {\n    /**\n     *\n     * @type {object}\n     * @memberof StatsOutputDTO\n     */\n    values: object;\n}\n/**\n *\n * @export\n * @interface StatsOutputDTOAPI\n */\ninterface StatsOutputDTOAPI {\n    /**\n     *\n     * @type {StatsOutputDTO}\n     * @memberof StatsOutputDTOAPI\n     */\n    data: StatsOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof StatsOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface TakaroEventCommandDetails\n */\ninterface TakaroEventCommandDetails {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventCommandDetails\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventCommandDetails\n     */\n    name: string;\n    /**\n     *\n     * @type {object}\n     * @memberof TakaroEventCommandDetails\n     */\n    arguments: object;\n}\n/**\n *\n * @export\n * @interface TakaroEventCommandExecuted\n */\ninterface TakaroEventCommandExecuted {\n    /**\n     *\n     * @type {TakaroEventFunctionResult}\n     * @memberof TakaroEventCommandExecuted\n     */\n    result: TakaroEventFunctionResult;\n    /**\n     *\n     * @type {TakaroEventCommandDetails}\n     * @memberof TakaroEventCommandExecuted\n     */\n    command?: TakaroEventCommandDetails;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventCommandExecuted\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventCronjobDetails\n */\ninterface TakaroEventCronjobDetails {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventCronjobDetails\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventCronjobDetails\n     */\n    name: string;\n}\n/**\n *\n * @export\n * @interface TakaroEventCronjobExecuted\n */\ninterface TakaroEventCronjobExecuted {\n    /**\n     *\n     * @type {TakaroEventFunctionResult}\n     * @memberof TakaroEventCronjobExecuted\n     */\n    result: TakaroEventFunctionResult;\n    /**\n     *\n     * @type {TakaroEventCronjobDetails}\n     * @memberof TakaroEventCronjobExecuted\n     */\n    cronjob?: TakaroEventCronjobDetails;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventCronjobExecuted\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventCurrencyAdded\n */\ninterface TakaroEventCurrencyAdded {\n    /**\n     *\n     * @type {number}\n     * @memberof TakaroEventCurrencyAdded\n     */\n    amount: number;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventCurrencyAdded\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventCurrencyDeducted\n */\ninterface TakaroEventCurrencyDeducted {\n    /**\n     *\n     * @type {number}\n     * @memberof TakaroEventCurrencyDeducted\n     */\n    amount: number;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventCurrencyDeducted\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventFunctionLog\n */\ninterface TakaroEventFunctionLog {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventFunctionLog\n     */\n    msg: string;\n    /**\n     *\n     * @type {any}\n     * @memberof TakaroEventFunctionLog\n     */\n    details?: any;\n}\n/**\n *\n * @export\n * @interface TakaroEventFunctionResult\n */\ninterface TakaroEventFunctionResult {\n    /**\n     *\n     * @type {Array<TakaroEventFunctionLog>}\n     * @memberof TakaroEventFunctionResult\n     */\n    logs: Array<TakaroEventFunctionLog>;\n    /**\n     *\n     * @type {boolean}\n     * @memberof TakaroEventFunctionResult\n     */\n    success: boolean;\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventFunctionResult\n     */\n    reason?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof TakaroEventFunctionResult\n     */\n    tryAgainIn?: number;\n}\n/**\n *\n * @export\n * @interface TakaroEventGameserverCreated\n */\ninterface TakaroEventGameserverCreated {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventGameserverCreated\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventGameserverDeleted\n */\ninterface TakaroEventGameserverDeleted {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventGameserverDeleted\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventGameserverUpdated\n */\ninterface TakaroEventGameserverUpdated {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventGameserverUpdated\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventHookDetails\n */\ninterface TakaroEventHookDetails {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventHookDetails\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventHookDetails\n     */\n    name: string;\n}\n/**\n *\n * @export\n * @interface TakaroEventHookExecuted\n */\ninterface TakaroEventHookExecuted {\n    /**\n     *\n     * @type {TakaroEventFunctionResult}\n     * @memberof TakaroEventHookExecuted\n     */\n    result: TakaroEventFunctionResult;\n    /**\n     *\n     * @type {TakaroEventHookDetails}\n     * @memberof TakaroEventHookExecuted\n     */\n    hook?: TakaroEventHookDetails;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventHookExecuted\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventModuleCreated\n */\ninterface TakaroEventModuleCreated {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventModuleCreated\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventModuleDeleted\n */\ninterface TakaroEventModuleDeleted {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventModuleDeleted\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventModuleInstalled\n */\ninterface TakaroEventModuleInstalled {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventModuleInstalled\n     */\n    userConfig: string;\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventModuleInstalled\n     */\n    systemConfig: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventModuleInstalled\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventModuleUninstalled\n */\ninterface TakaroEventModuleUninstalled {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventModuleUninstalled\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventModuleUpdated\n */\ninterface TakaroEventModuleUpdated {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventModuleUpdated\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventPlayerCreated\n */\ninterface TakaroEventPlayerCreated {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventPlayerCreated\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventPlayerLinked\n */\ninterface TakaroEventPlayerLinked {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventPlayerLinked\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventPlayerNewIpDetected\n */\ninterface TakaroEventPlayerNewIpDetected {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventPlayerNewIpDetected\n     */\n    country: string;\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventPlayerNewIpDetected\n     */\n    city: string;\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventPlayerNewIpDetected\n     */\n    longitude: string;\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventPlayerNewIpDetected\n     */\n    latitude: string;\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventPlayerNewIpDetected\n     */\n    ip: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventPlayerNewIpDetected\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventRoleAssigned\n */\ninterface TakaroEventRoleAssigned {\n    /**\n     *\n     * @type {TakaroEventRoleMeta}\n     * @memberof TakaroEventRoleAssigned\n     */\n    role: TakaroEventRoleMeta;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventRoleAssigned\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventRoleCreated\n */\ninterface TakaroEventRoleCreated {\n    /**\n     *\n     * @type {TakaroEventRoleMeta}\n     * @memberof TakaroEventRoleCreated\n     */\n    role: TakaroEventRoleMeta;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventRoleCreated\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventRoleDeleted\n */\ninterface TakaroEventRoleDeleted {\n    /**\n     *\n     * @type {TakaroEventRoleMeta}\n     * @memberof TakaroEventRoleDeleted\n     */\n    role: TakaroEventRoleMeta;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventRoleDeleted\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventRoleMeta\n */\ninterface TakaroEventRoleMeta {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventRoleMeta\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventRoleMeta\n     */\n    name: string;\n}\n/**\n *\n * @export\n * @interface TakaroEventRoleRemoved\n */\ninterface TakaroEventRoleRemoved {\n    /**\n     *\n     * @type {TakaroEventRoleMeta}\n     * @memberof TakaroEventRoleRemoved\n     */\n    role: TakaroEventRoleMeta;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventRoleRemoved\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventRoleUpdated\n */\ninterface TakaroEventRoleUpdated {\n    /**\n     *\n     * @type {TakaroEventRoleMeta}\n     * @memberof TakaroEventRoleUpdated\n     */\n    role: TakaroEventRoleMeta;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventRoleUpdated\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventServerStatusChanged\n */\ninterface TakaroEventServerStatusChanged {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventServerStatusChanged\n     */\n    status: string;\n    /**\n     *\n     * @type {any}\n     * @memberof TakaroEventServerStatusChanged\n     */\n    details?: any;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventServerStatusChanged\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventSettingsSet\n */\ninterface TakaroEventSettingsSet {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventSettingsSet\n     */\n    key: string;\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventSettingsSet\n     */\n    value?: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventSettingsSet\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventShopListingCreated\n */\ninterface TakaroEventShopListingCreated {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventShopListingCreated\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventShopListingCreated\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventShopListingDeleted\n */\ninterface TakaroEventShopListingDeleted {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventShopListingDeleted\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventShopListingDeleted\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventShopListingUpdated\n */\ninterface TakaroEventShopListingUpdated {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventShopListingUpdated\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventShopListingUpdated\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventShopOrderCreated\n */\ninterface TakaroEventShopOrderCreated {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventShopOrderCreated\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventShopOrderCreated\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroEventShopOrderStatusChanged\n */\ninterface TakaroEventShopOrderStatusChanged {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventShopOrderStatusChanged\n     */\n    id: string;\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroEventShopOrderStatusChanged\n     */\n    status: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroEventShopOrderStatusChanged\n     */\n    timestamp: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TakaroModelDTO\n */\ninterface TakaroModelDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof TakaroModelDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroModelDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof TakaroModelDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface TeleportPlayerInputDTO\n */\ninterface TeleportPlayerInputDTO {\n    /**\n     *\n     * @type {number}\n     * @memberof TeleportPlayerInputDTO\n     */\n    x: number;\n    /**\n     *\n     * @type {number}\n     * @memberof TeleportPlayerInputDTO\n     */\n    y: number;\n    /**\n     *\n     * @type {number}\n     * @memberof TeleportPlayerInputDTO\n     */\n    z: number;\n}\n/**\n *\n * @export\n * @interface TestReachabilityOutputDTO\n */\ninterface TestReachabilityOutputDTO {\n    /**\n     *\n     * @type {boolean}\n     * @memberof TestReachabilityOutputDTO\n     */\n    connectable: boolean;\n    /**\n     *\n     * @type {string}\n     * @memberof TestReachabilityOutputDTO\n     */\n    reason?: string;\n    /**\n     *\n     * @type {number}\n     * @memberof TestReachabilityOutputDTO\n     */\n    latency?: number;\n}\n/**\n *\n * @export\n * @interface TokenInputDTO\n */\ninterface TokenInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof TokenInputDTO\n     */\n    domainId: string;\n}\n/**\n *\n * @export\n * @interface TokenOutputDTO\n */\ninterface TokenOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof TokenOutputDTO\n     */\n    token: string;\n}\n/**\n *\n * @export\n * @interface TokenOutputDTOAPI\n */\ninterface TokenOutputDTOAPI {\n    /**\n     *\n     * @type {TokenOutputDTO}\n     * @memberof TokenOutputDTOAPI\n     */\n    data: TokenOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof TokenOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface UserAssignmentOutputDTO\n */\ninterface UserAssignmentOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof UserAssignmentOutputDTO\n     */\n    userId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof UserAssignmentOutputDTO\n     */\n    roleId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof UserAssignmentOutputDTO\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {RoleOutputDTO}\n     * @memberof UserAssignmentOutputDTO\n     */\n    role: RoleOutputDTO;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserAssignmentOutputDTO\n     */\n    expiresAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof UserAssignmentOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserAssignmentOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserAssignmentOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface UserCreateInputDTO\n */\ninterface UserCreateInputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof UserCreateInputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof UserCreateInputDTO\n     */\n    email: string;\n    /**\n     *\n     * @type {string}\n     * @memberof UserCreateInputDTO\n     */\n    password: string;\n    /**\n     *\n     * @type {string}\n     * @memberof UserCreateInputDTO\n     */\n    idpId?: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof UserCreateInputDTO\n     */\n    isDashboardUser?: boolean;\n}\n/**\n *\n * @export\n * @interface UserOutputArrayDTOAPI\n */\ninterface UserOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<UserOutputWithRolesDTO>}\n     * @memberof UserOutputArrayDTOAPI\n     */\n    data: Array<UserOutputWithRolesDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof UserOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface UserOutputDTO\n */\ninterface UserOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof UserOutputDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof UserOutputDTO\n     */\n    email: string;\n    /**\n     *\n     * @type {string}\n     * @memberof UserOutputDTO\n     */\n    idpId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof UserOutputDTO\n     */\n    discordId?: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserOutputDTO\n     */\n    lastSeen: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof UserOutputDTO\n     */\n    playerId?: string;\n    /**\n     *\n     * @type {PlayerOutputWithRolesDTO}\n     * @memberof UserOutputDTO\n     */\n    player: PlayerOutputWithRolesDTO;\n    /**\n     *\n     * @type {boolean}\n     * @memberof UserOutputDTO\n     */\n    isDashboardUser: boolean;\n    /**\n     *\n     * @type {string}\n     * @memberof UserOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface UserOutputDTOAPI\n */\ninterface UserOutputDTOAPI {\n    /**\n     *\n     * @type {UserOutputWithRolesDTO}\n     * @memberof UserOutputDTOAPI\n     */\n    data: UserOutputWithRolesDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof UserOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface UserOutputWithRolesDTO\n */\ninterface UserOutputWithRolesDTO {\n    /**\n     *\n     * @type {Array<UserAssignmentOutputDTO>}\n     * @memberof UserOutputWithRolesDTO\n     */\n    roles: Array<UserAssignmentOutputDTO>;\n    /**\n     *\n     * @type {string}\n     * @memberof UserOutputWithRolesDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserOutputWithRolesDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserOutputWithRolesDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof UserOutputWithRolesDTO\n     */\n    name: string;\n    /**\n     *\n     * @type {string}\n     * @memberof UserOutputWithRolesDTO\n     */\n    email: string;\n    /**\n     *\n     * @type {string}\n     * @memberof UserOutputWithRolesDTO\n     */\n    idpId: string;\n    /**\n     *\n     * @type {string}\n     * @memberof UserOutputWithRolesDTO\n     */\n    discordId?: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserOutputWithRolesDTO\n     */\n    lastSeen: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof UserOutputWithRolesDTO\n     */\n    playerId?: string;\n    /**\n     *\n     * @type {PlayerOutputWithRolesDTO}\n     * @memberof UserOutputWithRolesDTO\n     */\n    player: PlayerOutputWithRolesDTO;\n    /**\n     *\n     * @type {boolean}\n     * @memberof UserOutputWithRolesDTO\n     */\n    isDashboardUser: boolean;\n}\n/**\n *\n * @export\n * @interface UserRoleAssignChangeDTO\n */\ninterface UserRoleAssignChangeDTO {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserRoleAssignChangeDTO\n     */\n    expiresAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface UserSearchInputAllowedFilters\n */\ninterface UserSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof UserSearchInputAllowedFilters\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof UserSearchInputAllowedFilters\n     */\n    idpId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof UserSearchInputAllowedFilters\n     */\n    discordId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof UserSearchInputAllowedFilters\n     */\n    playerId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof UserSearchInputAllowedFilters\n     */\n    roleId?: Array<string>;\n    /**\n     *\n     * @type {Array<boolean>}\n     * @memberof UserSearchInputAllowedFilters\n     */\n    isDashboardUser?: Array<boolean>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof UserSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface UserSearchInputAllowedRangeFilter\n */\ninterface UserSearchInputAllowedRangeFilter {\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserSearchInputAllowedRangeFilter\n     */\n    lastSeen?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserSearchInputAllowedRangeFilter\n     */\n    createdAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserSearchInputAllowedRangeFilter\n     */\n    updatedAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface UserSearchInputAllowedSearch\n */\ninterface UserSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof UserSearchInputAllowedSearch\n     */\n    name?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof UserSearchInputAllowedSearch\n     */\n    discordId?: Array<string>;\n}\n/**\n *\n * @export\n * @interface UserSearchInputDTO\n */\ninterface UserSearchInputDTO {\n    /**\n     *\n     * @type {UserSearchInputAllowedFilters}\n     * @memberof UserSearchInputDTO\n     */\n    filters?: UserSearchInputAllowedFilters;\n    /**\n     *\n     * @type {UserSearchInputAllowedSearch}\n     * @memberof UserSearchInputDTO\n     */\n    search?: UserSearchInputAllowedSearch;\n    /**\n     *\n     * @type {UserSearchInputAllowedRangeFilter}\n     * @memberof UserSearchInputDTO\n     */\n    greaterThan?: UserSearchInputAllowedRangeFilter;\n    /**\n     *\n     * @type {UserSearchInputAllowedRangeFilter}\n     * @memberof UserSearchInputDTO\n     */\n    lessThan?: UserSearchInputAllowedRangeFilter;\n    /**\n     *\n     * @type {number}\n     * @memberof UserSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof UserSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof UserSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof UserSearchInputDTO\n     */\n    sortDirection?: UserSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof UserSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const UserSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype UserSearchInputDTOSortDirectionEnum = (typeof UserSearchInputDTOSortDirectionEnum)[keyof typeof UserSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface UserUpdateAuthDTO\n */\ninterface UserUpdateAuthDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof UserUpdateAuthDTO\n     */\n    discordId?: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof UserUpdateAuthDTO\n     */\n    lastSeen?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface UserUpdateDTO\n */\ninterface UserUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof UserUpdateDTO\n     */\n    name?: string;\n    /**\n     *\n     * @type {boolean}\n     * @memberof UserUpdateDTO\n     */\n    isDashboardUser?: boolean;\n}\n/**\n *\n * @export\n * @interface VariableCreateDTO\n */\ninterface VariableCreateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof VariableCreateDTO\n     */\n    key: string;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableCreateDTO\n     */\n    value: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof VariableCreateDTO\n     */\n    expiresAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableCreateDTO\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableCreateDTO\n     */\n    playerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableCreateDTO\n     */\n    moduleId?: string;\n}\n/**\n *\n * @export\n * @interface VariableOutputArrayDTOAPI\n */\ninterface VariableOutputArrayDTOAPI {\n    /**\n     *\n     * @type {Array<VariableOutputDTO>}\n     * @memberof VariableOutputArrayDTOAPI\n     */\n    data: Array<VariableOutputDTO>;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof VariableOutputArrayDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface VariableOutputDTO\n */\ninterface VariableOutputDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof VariableOutputDTO\n     */\n    key: string;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableOutputDTO\n     */\n    value: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof VariableOutputDTO\n     */\n    expiresAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableOutputDTO\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableOutputDTO\n     */\n    playerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableOutputDTO\n     */\n    moduleId?: string;\n    /**\n     *\n     * @type {GameServerOutputDTO}\n     * @memberof VariableOutputDTO\n     */\n    gameServer?: GameServerOutputDTO;\n    /**\n     *\n     * @type {ModuleOutputDTO}\n     * @memberof VariableOutputDTO\n     */\n    module?: ModuleOutputDTO;\n    /**\n     *\n     * @type {PlayerOutputDTO}\n     * @memberof VariableOutputDTO\n     */\n    player?: PlayerOutputDTO;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableOutputDTO\n     */\n    id: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof VariableOutputDTO\n     */\n    createdAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof VariableOutputDTO\n     */\n    updatedAt: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n}\n/**\n *\n * @export\n * @interface VariableOutputDTOAPI\n */\ninterface VariableOutputDTOAPI {\n    /**\n     *\n     * @type {VariableOutputDTO}\n     * @memberof VariableOutputDTOAPI\n     */\n    data: VariableOutputDTO;\n    /**\n     *\n     * @type {MetadataOutput}\n     * @memberof VariableOutputDTOAPI\n     */\n    meta: MetadataOutput;\n}\n/**\n *\n * @export\n * @interface VariableSearchInputAllowedFilters\n */\ninterface VariableSearchInputAllowedFilters {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof VariableSearchInputAllowedFilters\n     */\n    key?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof VariableSearchInputAllowedFilters\n     */\n    gameServerId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof VariableSearchInputAllowedFilters\n     */\n    playerId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof VariableSearchInputAllowedFilters\n     */\n    moduleId?: Array<string>;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof VariableSearchInputAllowedFilters\n     */\n    id?: Array<string>;\n}\n/**\n *\n * @export\n * @interface VariableSearchInputAllowedSearch\n */\ninterface VariableSearchInputAllowedSearch {\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof VariableSearchInputAllowedSearch\n     */\n    key?: Array<string>;\n}\n/**\n *\n * @export\n * @interface VariableSearchInputDTO\n */\ninterface VariableSearchInputDTO {\n    /**\n     *\n     * @type {VariableSearchInputAllowedFilters}\n     * @memberof VariableSearchInputDTO\n     */\n    filters?: VariableSearchInputAllowedFilters;\n    /**\n     *\n     * @type {VariableSearchInputAllowedSearch}\n     * @memberof VariableSearchInputDTO\n     */\n    search?: VariableSearchInputAllowedSearch;\n    /**\n     *\n     * @type {any}\n     * @memberof VariableSearchInputDTO\n     */\n    greaterThan?: any;\n    /**\n     *\n     * @type {any}\n     * @memberof VariableSearchInputDTO\n     */\n    lessThan?: any;\n    /**\n     *\n     * @type {number}\n     * @memberof VariableSearchInputDTO\n     */\n    page?: number;\n    /**\n     *\n     * @type {number}\n     * @memberof VariableSearchInputDTO\n     */\n    limit?: number;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableSearchInputDTO\n     */\n    sortBy?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableSearchInputDTO\n     */\n    sortDirection?: VariableSearchInputDTOSortDirectionEnum;\n    /**\n     *\n     * @type {Array<string>}\n     * @memberof VariableSearchInputDTO\n     */\n    extend?: Array<string>;\n}\ndeclare const VariableSearchInputDTOSortDirectionEnum: {\n    readonly Asc: \"asc\";\n    readonly Desc: \"desc\";\n};\ntype VariableSearchInputDTOSortDirectionEnum = (typeof VariableSearchInputDTOSortDirectionEnum)[keyof typeof VariableSearchInputDTOSortDirectionEnum];\n/**\n *\n * @export\n * @interface VariableUpdateDTO\n */\ninterface VariableUpdateDTO {\n    /**\n     *\n     * @type {string}\n     * @memberof VariableUpdateDTO\n     */\n    key?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableUpdateDTO\n     */\n    value: string;\n    /**\n     *\n     * @type {NOTDOMAINSCOPEDTakaroModelDTOCreatedAt}\n     * @memberof VariableUpdateDTO\n     */\n    expiresAt?: NOTDOMAINSCOPEDTakaroModelDTOCreatedAt;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableUpdateDTO\n     */\n    gameServerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableUpdateDTO\n     */\n    playerId?: string;\n    /**\n     *\n     * @type {string}\n     * @memberof VariableUpdateDTO\n     */\n    moduleId?: string;\n}\n/**\n * CommandApi - axios parameter creator\n * @export\n */\ndeclare const CommandApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerCreate`\n     * @summary Create\n     * @param {CommandCreateDTO} [commandCreateDTO] CommandCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerCreate: (commandCreateDTO?: CommandCreateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerCreateArgument`\n     * @summary Create argument\n     * @param {CommandArgumentCreateDTO} [commandArgumentCreateDTO] CommandArgumentCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerCreateArgument: (commandArgumentCreateDTO?: CommandArgumentCreateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CommandControllerGetExecutions`\n     * @summary Get executions\n     * @param {string} id\n     * @param {any} [success]\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerGetExecutions: (id: string, success?: any, eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CommandControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerRemoveArgument`\n     * @summary Remove argument\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerRemoveArgument: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CommandControllerSearch`\n     * @summary Search\n     * @param {CommandSearchInputDTO} [commandSearchInputDTO] CommandSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerSearch: (commandSearchInputDTO?: CommandSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerTrigger`\n     * @summary Trigger\n     * @param {string} id\n     * @param {CommandTriggerDTO} [commandTriggerDTO] CommandTriggerDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerTrigger: (id: string, commandTriggerDTO?: CommandTriggerDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {CommandUpdateDTO} [commandUpdateDTO] CommandUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerUpdate: (id: string, commandUpdateDTO?: CommandUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerUpdateArgument`\n     * @summary Update argument\n     * @param {string} id\n     * @param {CommandArgumentUpdateDTO} [commandArgumentUpdateDTO] CommandArgumentUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerUpdateArgument: (id: string, commandArgumentUpdateDTO?: CommandArgumentUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * CommandApi - functional programming interface\n * @export\n */\ndeclare const CommandApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerCreate`\n     * @summary Create\n     * @param {CommandCreateDTO} [commandCreateDTO] CommandCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerCreate(commandCreateDTO?: CommandCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerCreateArgument`\n     * @summary Create argument\n     * @param {CommandArgumentCreateDTO} [commandArgumentCreateDTO] CommandArgumentCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerCreateArgument(commandArgumentCreateDTO?: CommandArgumentCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandArgumentDTOAPI>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CommandControllerGetExecutions`\n     * @summary Get executions\n     * @param {string} id\n     * @param {any} [success]\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerGetExecutions(id: string, success?: any, eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventOutputArrayDTOAPI>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CommandControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerRemoveArgument`\n     * @summary Remove argument\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerRemoveArgument(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CommandControllerSearch`\n     * @summary Search\n     * @param {CommandSearchInputDTO} [commandSearchInputDTO] CommandSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerSearch(commandSearchInputDTO?: CommandSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandOutputArrayDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerTrigger`\n     * @summary Trigger\n     * @param {string} id\n     * @param {CommandTriggerDTO} [commandTriggerDTO] CommandTriggerDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerTrigger(id: string, commandTriggerDTO?: CommandTriggerDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {CommandUpdateDTO} [commandUpdateDTO] CommandUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerUpdate(id: string, commandUpdateDTO?: CommandUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerUpdateArgument`\n     * @summary Update argument\n     * @param {string} id\n     * @param {CommandArgumentUpdateDTO} [commandArgumentUpdateDTO] CommandArgumentUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerUpdateArgument(id: string, commandArgumentUpdateDTO?: CommandArgumentUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandArgumentDTOAPI>>;\n};\n/**\n * CommandApi - factory interface\n * @export\n */\ndeclare const CommandApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerCreate`\n     * @summary Create\n     * @param {CommandCreateDTO} [commandCreateDTO] CommandCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerCreate(commandCreateDTO?: CommandCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<CommandOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerCreateArgument`\n     * @summary Create argument\n     * @param {CommandArgumentCreateDTO} [commandArgumentCreateDTO] CommandArgumentCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerCreateArgument(commandArgumentCreateDTO?: CommandArgumentCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<CommandArgumentDTOAPI>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CommandControllerGetExecutions`\n     * @summary Get executions\n     * @param {string} id\n     * @param {any} [success]\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerGetExecutions(id: string, success?: any, eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<EventOutputArrayDTOAPI>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CommandControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CommandOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerRemoveArgument`\n     * @summary Remove argument\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerRemoveArgument(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CommandControllerSearch`\n     * @summary Search\n     * @param {CommandSearchInputDTO} [commandSearchInputDTO] CommandSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerSearch(commandSearchInputDTO?: CommandSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<CommandOutputArrayDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerTrigger`\n     * @summary Trigger\n     * @param {string} id\n     * @param {CommandTriggerDTO} [commandTriggerDTO] CommandTriggerDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerTrigger(id: string, commandTriggerDTO?: CommandTriggerDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {CommandUpdateDTO} [commandUpdateDTO] CommandUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerUpdate(id: string, commandUpdateDTO?: CommandUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<CommandOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerUpdateArgument`\n     * @summary Update argument\n     * @param {string} id\n     * @param {CommandArgumentUpdateDTO} [commandArgumentUpdateDTO] CommandArgumentUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    commandControllerUpdateArgument(id: string, commandArgumentUpdateDTO?: CommandArgumentUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<CommandArgumentDTOAPI>;\n};\n/**\n * CommandApi - object-oriented interface\n * @export\n * @class CommandApi\n * @extends {BaseAPI}\n */\ndeclare class CommandApi extends BaseAPI {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerCreate`\n     * @summary Create\n     * @param {CommandCreateDTO} [commandCreateDTO] CommandCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CommandApi\n     */\n    commandControllerCreate(commandCreateDTO?: CommandCreateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<CommandOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerCreateArgument`\n     * @summary Create argument\n     * @param {CommandArgumentCreateDTO} [commandArgumentCreateDTO] CommandArgumentCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CommandApi\n     */\n    commandControllerCreateArgument(commandArgumentCreateDTO?: CommandArgumentCreateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<CommandArgumentDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CommandControllerGetExecutions`\n     * @summary Get executions\n     * @param {string} id\n     * @param {any} [success]\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CommandApi\n     */\n    commandControllerGetExecutions(id: string, success?: any, eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<EventOutputArrayDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CommandControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CommandApi\n     */\n    commandControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<CommandOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CommandApi\n     */\n    commandControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerRemoveArgument`\n     * @summary Remove argument\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CommandApi\n     */\n    commandControllerRemoveArgument(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CommandControllerSearch`\n     * @summary Search\n     * @param {CommandSearchInputDTO} [commandSearchInputDTO] CommandSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CommandApi\n     */\n    commandControllerSearch(commandSearchInputDTO?: CommandSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<CommandOutputArrayDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerTrigger`\n     * @summary Trigger\n     * @param {string} id\n     * @param {CommandTriggerDTO} [commandTriggerDTO] CommandTriggerDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CommandApi\n     */\n    commandControllerTrigger(id: string, commandTriggerDTO?: CommandTriggerDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {CommandUpdateDTO} [commandUpdateDTO] CommandUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CommandApi\n     */\n    commandControllerUpdate(id: string, commandUpdateDTO?: CommandUpdateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<CommandOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CommandControllerUpdateArgument`\n     * @summary Update argument\n     * @param {string} id\n     * @param {CommandArgumentUpdateDTO} [commandArgumentUpdateDTO] CommandArgumentUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CommandApi\n     */\n    commandControllerUpdateArgument(id: string, commandArgumentUpdateDTO?: CommandArgumentUpdateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<CommandArgumentDTOAPI, any>>;\n}\n/**\n * CronJobApi - axios parameter creator\n * @export\n */\ndeclare const CronJobApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerCreate`\n     * @summary Create\n     * @param {CronJobCreateDTO} [cronJobCreateDTO] CronJobCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerCreate: (cronJobCreateDTO?: CronJobCreateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CronJobControllerGetExecutions`\n     * @summary Get executions\n     * @param {string} id\n     * @param {any} [success]\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerGetExecutions: (id: string, success?: any, eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CronJobControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CronJobControllerSearch`\n     * @summary Search\n     * @param {CronJobSearchInputDTO} [cronJobSearchInputDTO] CronJobSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerSearch: (cronJobSearchInputDTO?: CronJobSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerTrigger`\n     * @summary Trigger\n     * @param {CronJobTriggerDTO} [cronJobTriggerDTO] CronJobTriggerDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerTrigger: (cronJobTriggerDTO?: CronJobTriggerDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {CronJobUpdateDTO} [cronJobUpdateDTO] CronJobUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerUpdate: (id: string, cronJobUpdateDTO?: CronJobUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * CronJobApi - functional programming interface\n * @export\n */\ndeclare const CronJobApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerCreate`\n     * @summary Create\n     * @param {CronJobCreateDTO} [cronJobCreateDTO] CronJobCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerCreate(cronJobCreateDTO?: CronJobCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronJobOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CronJobControllerGetExecutions`\n     * @summary Get executions\n     * @param {string} id\n     * @param {any} [success]\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerGetExecutions(id: string, success?: any, eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventOutputArrayDTOAPI>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CronJobControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronJobOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CronJobControllerSearch`\n     * @summary Search\n     * @param {CronJobSearchInputDTO} [cronJobSearchInputDTO] CronJobSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerSearch(cronJobSearchInputDTO?: CronJobSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronJobOutputArrayDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerTrigger`\n     * @summary Trigger\n     * @param {CronJobTriggerDTO} [cronJobTriggerDTO] CronJobTriggerDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerTrigger(cronJobTriggerDTO?: CronJobTriggerDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {CronJobUpdateDTO} [cronJobUpdateDTO] CronJobUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerUpdate(id: string, cronJobUpdateDTO?: CronJobUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronJobOutputDTOAPI>>;\n};\n/**\n * CronJobApi - factory interface\n * @export\n */\ndeclare const CronJobApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerCreate`\n     * @summary Create\n     * @param {CronJobCreateDTO} [cronJobCreateDTO] CronJobCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerCreate(cronJobCreateDTO?: CronJobCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<CronJobOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CronJobControllerGetExecutions`\n     * @summary Get executions\n     * @param {string} id\n     * @param {any} [success]\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerGetExecutions(id: string, success?: any, eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<EventOutputArrayDTOAPI>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CronJobControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<CronJobOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CronJobControllerSearch`\n     * @summary Search\n     * @param {CronJobSearchInputDTO} [cronJobSearchInputDTO] CronJobSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerSearch(cronJobSearchInputDTO?: CronJobSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<CronJobOutputArrayDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerTrigger`\n     * @summary Trigger\n     * @param {CronJobTriggerDTO} [cronJobTriggerDTO] CronJobTriggerDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerTrigger(cronJobTriggerDTO?: CronJobTriggerDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {CronJobUpdateDTO} [cronJobUpdateDTO] CronJobUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cronJobControllerUpdate(id: string, cronJobUpdateDTO?: CronJobUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<CronJobOutputDTOAPI>;\n};\n/**\n * CronJobApi - object-oriented interface\n * @export\n * @class CronJobApi\n * @extends {BaseAPI}\n */\ndeclare class CronJobApi extends BaseAPI {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerCreate`\n     * @summary Create\n     * @param {CronJobCreateDTO} [cronJobCreateDTO] CronJobCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CronJobApi\n     */\n    cronJobControllerCreate(cronJobCreateDTO?: CronJobCreateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<CronJobOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CronJobControllerGetExecutions`\n     * @summary Get executions\n     * @param {string} id\n     * @param {any} [success]\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CronJobApi\n     */\n    cronJobControllerGetExecutions(id: string, success?: any, eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<EventOutputArrayDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CronJobControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CronJobApi\n     */\n    cronJobControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<CronJobOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CronJobApi\n     */\n    cronJobControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `CronJobControllerSearch`\n     * @summary Search\n     * @param {CronJobSearchInputDTO} [cronJobSearchInputDTO] CronJobSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CronJobApi\n     */\n    cronJobControllerSearch(cronJobSearchInputDTO?: CronJobSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<CronJobOutputArrayDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerTrigger`\n     * @summary Trigger\n     * @param {CronJobTriggerDTO} [cronJobTriggerDTO] CronJobTriggerDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CronJobApi\n     */\n    cronJobControllerTrigger(cronJobTriggerDTO?: CronJobTriggerDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `CronJobControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {CronJobUpdateDTO} [cronJobUpdateDTO] CronJobUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CronJobApi\n     */\n    cronJobControllerUpdate(id: string, cronJobUpdateDTO?: CronJobUpdateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<CronJobOutputDTOAPI, any>>;\n}\n/**\n * DiscordApi - axios parameter creator\n * @export\n */\ndeclare const DiscordApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     * <br> OperationId: `DiscordControllerGetInvite`\n     * @summary Get invite\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    discordControllerGetInvite: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `DiscordControllerSearch`\n     * @summary Search\n     * @param {GuildSearchInputDTO} [guildSearchInputDTO] GuildSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    discordControllerSearch: (guildSearchInputDTO?: GuildSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `DiscordControllerSendMessage`\n     * @summary Send message\n     * @param {string} id\n     * @param {SendMessageInputDTO} [sendMessageInputDTO] SendMessageInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    discordControllerSendMessage: (id: string, sendMessageInputDTO?: SendMessageInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `DiscordControllerUpdateGuild`\n     * @summary Update guild\n     * @param {string} id\n     * @param {GuildApiUpdateDTO} [guildApiUpdateDTO] GuildApiUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    discordControllerUpdateGuild: (id: string, guildApiUpdateDTO?: GuildApiUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * DiscordApi - functional programming interface\n * @export\n */\ndeclare const DiscordApiFp: (configuration?: Configuration) => {\n    /**\n     * <br> OperationId: `DiscordControllerGetInvite`\n     * @summary Get invite\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    discordControllerGetInvite(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscordInviteOutputDTO>>;\n    /**\n     * <br> OperationId: `DiscordControllerSearch`\n     * @summary Search\n     * @param {GuildSearchInputDTO} [guildSearchInputDTO] GuildSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    discordControllerSearch(guildSearchInputDTO?: GuildSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuildOutputArrayDTOAPI>>;\n    /**\n     * <br> OperationId: `DiscordControllerSendMessage`\n     * @summary Send message\n     * @param {string} id\n     * @param {SendMessageInputDTO} [sendMessageInputDTO] SendMessageInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    discordControllerSendMessage(id: string, sendMessageInputDTO?: SendMessageInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * <br> OperationId: `DiscordControllerUpdateGuild`\n     * @summary Update guild\n     * @param {string} id\n     * @param {GuildApiUpdateDTO} [guildApiUpdateDTO] GuildApiUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    discordControllerUpdateGuild(id: string, guildApiUpdateDTO?: GuildApiUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuildOutputDTOAPI>>;\n};\n/**\n * DiscordApi - factory interface\n * @export\n */\ndeclare const DiscordApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     * <br> OperationId: `DiscordControllerGetInvite`\n     * @summary Get invite\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    discordControllerGetInvite(options?: RawAxiosRequestConfig): AxiosPromise<DiscordInviteOutputDTO>;\n    /**\n     * <br> OperationId: `DiscordControllerSearch`\n     * @summary Search\n     * @param {GuildSearchInputDTO} [guildSearchInputDTO] GuildSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    discordControllerSearch(guildSearchInputDTO?: GuildSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<GuildOutputArrayDTOAPI>;\n    /**\n     * <br> OperationId: `DiscordControllerSendMessage`\n     * @summary Send message\n     * @param {string} id\n     * @param {SendMessageInputDTO} [sendMessageInputDTO] SendMessageInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    discordControllerSendMessage(id: string, sendMessageInputDTO?: SendMessageInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * <br> OperationId: `DiscordControllerUpdateGuild`\n     * @summary Update guild\n     * @param {string} id\n     * @param {GuildApiUpdateDTO} [guildApiUpdateDTO] GuildApiUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    discordControllerUpdateGuild(id: string, guildApiUpdateDTO?: GuildApiUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<GuildOutputDTOAPI>;\n};\n/**\n * DiscordApi - object-oriented interface\n * @export\n * @class DiscordApi\n * @extends {BaseAPI}\n */\ndeclare class DiscordApi extends BaseAPI {\n    /**\n     * <br> OperationId: `DiscordControllerGetInvite`\n     * @summary Get invite\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DiscordApi\n     */\n    discordControllerGetInvite(options?: RawAxiosRequestConfig): Promise<AxiosResponse<DiscordInviteOutputDTO, any>>;\n    /**\n     * <br> OperationId: `DiscordControllerSearch`\n     * @summary Search\n     * @param {GuildSearchInputDTO} [guildSearchInputDTO] GuildSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DiscordApi\n     */\n    discordControllerSearch(guildSearchInputDTO?: GuildSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<GuildOutputArrayDTOAPI, any>>;\n    /**\n     * <br> OperationId: `DiscordControllerSendMessage`\n     * @summary Send message\n     * @param {string} id\n     * @param {SendMessageInputDTO} [sendMessageInputDTO] SendMessageInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DiscordApi\n     */\n    discordControllerSendMessage(id: string, sendMessageInputDTO?: SendMessageInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * <br> OperationId: `DiscordControllerUpdateGuild`\n     * @summary Update guild\n     * @param {string} id\n     * @param {GuildApiUpdateDTO} [guildApiUpdateDTO] GuildApiUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DiscordApi\n     */\n    discordControllerUpdateGuild(id: string, guildApiUpdateDTO?: GuildApiUpdateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<GuildOutputDTOAPI, any>>;\n}\n/**\n * DomainApi - axios parameter creator\n * @export\n */\ndeclare const DomainApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     * <br> OperationId: `DomainControllerCreate`\n     * @summary Create\n     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerCreate: (domainCreateInputDTO?: DomainCreateInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `DomainControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `DomainControllerGetToken`\n     * @summary Get token\n     * @param {TokenInputDTO} [tokenInputDTO] TokenInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerGetToken: (tokenInputDTO?: TokenInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `DomainControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `DomainControllerSearch`\n     * @summary Search\n     * @param {DomainSearchInputDTO} [domainSearchInputDTO] DomainSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerSearch: (domainSearchInputDTO?: DomainSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `DomainControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {DomainUpdateInputDTO} [domainUpdateInputDTO] DomainUpdateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerUpdate: (id: string, domainUpdateInputDTO?: DomainUpdateInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * DomainApi - functional programming interface\n * @export\n */\ndeclare const DomainApiFp: (configuration?: Configuration) => {\n    /**\n     * <br> OperationId: `DomainControllerCreate`\n     * @summary Create\n     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerCreate(domainCreateInputDTO?: DomainCreateInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainCreateOutputDTOAPI>>;\n    /**\n     * <br> OperationId: `DomainControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainOutputDTOAPI>>;\n    /**\n     * <br> OperationId: `DomainControllerGetToken`\n     * @summary Get token\n     * @param {TokenInputDTO} [tokenInputDTO] TokenInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerGetToken(tokenInputDTO?: TokenInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOutputDTOAPI>>;\n    /**\n     * <br> OperationId: `DomainControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * <br> OperationId: `DomainControllerSearch`\n     * @summary Search\n     * @param {DomainSearchInputDTO} [domainSearchInputDTO] DomainSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerSearch(domainSearchInputDTO?: DomainSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainOutputArrayDTOAPI>>;\n    /**\n     * <br> OperationId: `DomainControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {DomainUpdateInputDTO} [domainUpdateInputDTO] DomainUpdateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerUpdate(id: string, domainUpdateInputDTO?: DomainUpdateInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainOutputDTOAPI>>;\n};\n/**\n * DomainApi - factory interface\n * @export\n */\ndeclare const DomainApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     * <br> OperationId: `DomainControllerCreate`\n     * @summary Create\n     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerCreate(domainCreateInputDTO?: DomainCreateInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<DomainCreateOutputDTOAPI>;\n    /**\n     * <br> OperationId: `DomainControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DomainOutputDTOAPI>;\n    /**\n     * <br> OperationId: `DomainControllerGetToken`\n     * @summary Get token\n     * @param {TokenInputDTO} [tokenInputDTO] TokenInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerGetToken(tokenInputDTO?: TokenInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<TokenOutputDTOAPI>;\n    /**\n     * <br> OperationId: `DomainControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * <br> OperationId: `DomainControllerSearch`\n     * @summary Search\n     * @param {DomainSearchInputDTO} [domainSearchInputDTO] DomainSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerSearch(domainSearchInputDTO?: DomainSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<DomainOutputArrayDTOAPI>;\n    /**\n     * <br> OperationId: `DomainControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {DomainUpdateInputDTO} [domainUpdateInputDTO] DomainUpdateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    domainControllerUpdate(id: string, domainUpdateInputDTO?: DomainUpdateInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<DomainOutputDTOAPI>;\n};\n/**\n * DomainApi - object-oriented interface\n * @export\n * @class DomainApi\n * @extends {BaseAPI}\n */\ndeclare class DomainApi extends BaseAPI {\n    /**\n     * <br> OperationId: `DomainControllerCreate`\n     * @summary Create\n     * @param {DomainCreateInputDTO} [domainCreateInputDTO] DomainCreateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DomainApi\n     */\n    domainControllerCreate(domainCreateInputDTO?: DomainCreateInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<DomainCreateOutputDTOAPI, any>>;\n    /**\n     * <br> OperationId: `DomainControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DomainApi\n     */\n    domainControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<DomainOutputDTOAPI, any>>;\n    /**\n     * <br> OperationId: `DomainControllerGetToken`\n     * @summary Get token\n     * @param {TokenInputDTO} [tokenInputDTO] TokenInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DomainApi\n     */\n    domainControllerGetToken(tokenInputDTO?: TokenInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<TokenOutputDTOAPI, any>>;\n    /**\n     * <br> OperationId: `DomainControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DomainApi\n     */\n    domainControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * <br> OperationId: `DomainControllerSearch`\n     * @summary Search\n     * @param {DomainSearchInputDTO} [domainSearchInputDTO] DomainSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DomainApi\n     */\n    domainControllerSearch(domainSearchInputDTO?: DomainSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<DomainOutputArrayDTOAPI, any>>;\n    /**\n     * <br> OperationId: `DomainControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {DomainUpdateInputDTO} [domainUpdateInputDTO] DomainUpdateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DomainApi\n     */\n    domainControllerUpdate(id: string, domainUpdateInputDTO?: DomainUpdateInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<DomainOutputDTOAPI, any>>;\n}\n/**\n * EventApi - axios parameter creator\n * @export\n */\ndeclare const EventApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_EVENTS`<br> OperationId: `EventControllerCreate`\n     * @summary Create\n     * @param {EventCreateDTO} [eventCreateDTO] EventCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    eventControllerCreate: (eventCreateDTO?: EventCreateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Fetches events where cronjob, hook and command failed. Supports all the common query parameters   Required permissions: `READ_MODULES`, `READ_EVENTS`<br> OperationId: `EventControllerGetFailedFunctions`\n     * @summary Get failed functions\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    eventControllerGetFailedFunctions: (eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_EVENTS`<br> OperationId: `EventControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    eventControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_EVENTS`<br> OperationId: `EventControllerSearch`\n     * @summary Search\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    eventControllerSearch: (eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * EventApi - functional programming interface\n * @export\n */\ndeclare const EventApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_EVENTS`<br> OperationId: `EventControllerCreate`\n     * @summary Create\n     * @param {EventCreateDTO} [eventCreateDTO] EventCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    eventControllerCreate(eventCreateDTO?: EventCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventOutputDTO>>;\n    /**\n     * Fetches events where cronjob, hook and command failed. Supports all the common query parameters   Required permissions: `READ_MODULES`, `READ_EVENTS`<br> OperationId: `EventControllerGetFailedFunctions`\n     * @summary Get failed functions\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    eventControllerGetFailedFunctions(eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventOutputArrayDTOAPI>>;\n    /**\n     *    Required permissions: `READ_EVENTS`<br> OperationId: `EventControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    eventControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventOutputDTO>>;\n    /**\n     *    Required permissions: `READ_EVENTS`<br> OperationId: `EventControllerSearch`\n     * @summary Search\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    eventControllerSearch(eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventOutputArrayDTOAPI>>;\n};\n/**\n * EventApi - factory interface\n * @export\n */\ndeclare const EventApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `MANAGE_EVENTS`<br> OperationId: `EventControllerCreate`\n     * @summary Create\n     * @param {EventCreateDTO} [eventCreateDTO] EventCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    eventControllerCreate(eventCreateDTO?: EventCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<EventOutputDTO>;\n    /**\n     * Fetches events where cronjob, hook and command failed. Supports all the common query parameters   Required permissions: `READ_MODULES`, `READ_EVENTS`<br> OperationId: `EventControllerGetFailedFunctions`\n     * @summary Get failed functions\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    eventControllerGetFailedFunctions(eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<EventOutputArrayDTOAPI>;\n    /**\n     *    Required permissions: `READ_EVENTS`<br> OperationId: `EventControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    eventControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<EventOutputDTO>;\n    /**\n     *    Required permissions: `READ_EVENTS`<br> OperationId: `EventControllerSearch`\n     * @summary Search\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    eventControllerSearch(eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<EventOutputArrayDTOAPI>;\n};\n/**\n * EventApi - object-oriented interface\n * @export\n * @class EventApi\n * @extends {BaseAPI}\n */\ndeclare class EventApi extends BaseAPI {\n    /**\n     *    Required permissions: `MANAGE_EVENTS`<br> OperationId: `EventControllerCreate`\n     * @summary Create\n     * @param {EventCreateDTO} [eventCreateDTO] EventCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EventApi\n     */\n    eventControllerCreate(eventCreateDTO?: EventCreateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<EventOutputDTO, any>>;\n    /**\n     * Fetches events where cronjob, hook and command failed. Supports all the common query parameters   Required permissions: `READ_MODULES`, `READ_EVENTS`<br> OperationId: `EventControllerGetFailedFunctions`\n     * @summary Get failed functions\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EventApi\n     */\n    eventControllerGetFailedFunctions(eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<EventOutputArrayDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_EVENTS`<br> OperationId: `EventControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EventApi\n     */\n    eventControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<EventOutputDTO, any>>;\n    /**\n     *    Required permissions: `READ_EVENTS`<br> OperationId: `EventControllerSearch`\n     * @summary Search\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EventApi\n     */\n    eventControllerSearch(eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<EventOutputArrayDTOAPI, any>>;\n}\n/**\n * ExternalAuthApi - axios parameter creator\n * @export\n */\ndeclare const ExternalAuthApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     * <br> OperationId: `ExternalAuthControllerAuthDiscord`\n     * @summary Auth discord\n     * @param {string} redirect\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    externalAuthControllerAuthDiscord: (redirect: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `ExternalAuthControllerAuthDiscordReturn`\n     * @summary Auth discord return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    externalAuthControllerAuthDiscordReturn: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * ExternalAuthApi - functional programming interface\n * @export\n */\ndeclare const ExternalAuthApiFp: (configuration?: Configuration) => {\n    /**\n     * <br> OperationId: `ExternalAuthControllerAuthDiscord`\n     * @summary Auth discord\n     * @param {string} redirect\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    externalAuthControllerAuthDiscord(redirect: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     * <br> OperationId: `ExternalAuthControllerAuthDiscordReturn`\n     * @summary Auth discord return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    externalAuthControllerAuthDiscordReturn(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n};\n/**\n * ExternalAuthApi - factory interface\n * @export\n */\ndeclare const ExternalAuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     * <br> OperationId: `ExternalAuthControllerAuthDiscord`\n     * @summary Auth discord\n     * @param {string} redirect\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    externalAuthControllerAuthDiscord(redirect: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     * <br> OperationId: `ExternalAuthControllerAuthDiscordReturn`\n     * @summary Auth discord return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    externalAuthControllerAuthDiscordReturn(options?: RawAxiosRequestConfig): AxiosPromise<void>;\n};\n/**\n * ExternalAuthApi - object-oriented interface\n * @export\n * @class ExternalAuthApi\n * @extends {BaseAPI}\n */\ndeclare class ExternalAuthApi extends BaseAPI {\n    /**\n     * <br> OperationId: `ExternalAuthControllerAuthDiscord`\n     * @summary Auth discord\n     * @param {string} redirect\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAuthApi\n     */\n    externalAuthControllerAuthDiscord(redirect: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     * <br> OperationId: `ExternalAuthControllerAuthDiscordReturn`\n     * @summary Auth discord return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ExternalAuthApi\n     */\n    externalAuthControllerAuthDiscordReturn(options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n}\n/**\n * FunctionApi - axios parameter creator\n * @export\n */\ndeclare const FunctionApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `FunctionControllerCreate`\n     * @summary Create\n     * @param {FunctionCreateDTO} [functionCreateDTO] FunctionCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerCreate: (functionCreateDTO?: FunctionCreateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `FunctionControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `FunctionControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `FunctionControllerSearch`\n     * @summary Search\n     * @param {FunctionSearchInputDTO} [functionSearchInputDTO] FunctionSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerSearch: (functionSearchInputDTO?: FunctionSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `FunctionControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {FunctionUpdateDTO} [functionUpdateDTO] FunctionUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerUpdate: (id: string, functionUpdateDTO?: FunctionUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * FunctionApi - functional programming interface\n * @export\n */\ndeclare const FunctionApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `FunctionControllerCreate`\n     * @summary Create\n     * @param {FunctionCreateDTO} [functionCreateDTO] FunctionCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerCreate(functionCreateDTO?: FunctionCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FunctionOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `FunctionControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FunctionOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `FunctionControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `FunctionControllerSearch`\n     * @summary Search\n     * @param {FunctionSearchInputDTO} [functionSearchInputDTO] FunctionSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerSearch(functionSearchInputDTO?: FunctionSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FunctionOutputArrayDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `FunctionControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {FunctionUpdateDTO} [functionUpdateDTO] FunctionUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerUpdate(id: string, functionUpdateDTO?: FunctionUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FunctionOutputDTOAPI>>;\n};\n/**\n * FunctionApi - factory interface\n * @export\n */\ndeclare const FunctionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `FunctionControllerCreate`\n     * @summary Create\n     * @param {FunctionCreateDTO} [functionCreateDTO] FunctionCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerCreate(functionCreateDTO?: FunctionCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<FunctionOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `FunctionControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<FunctionOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `FunctionControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `FunctionControllerSearch`\n     * @summary Search\n     * @param {FunctionSearchInputDTO} [functionSearchInputDTO] FunctionSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerSearch(functionSearchInputDTO?: FunctionSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<FunctionOutputArrayDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `FunctionControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {FunctionUpdateDTO} [functionUpdateDTO] FunctionUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    functionControllerUpdate(id: string, functionUpdateDTO?: FunctionUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<FunctionOutputDTOAPI>;\n};\n/**\n * FunctionApi - object-oriented interface\n * @export\n * @class FunctionApi\n * @extends {BaseAPI}\n */\ndeclare class FunctionApi extends BaseAPI {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `FunctionControllerCreate`\n     * @summary Create\n     * @param {FunctionCreateDTO} [functionCreateDTO] FunctionCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FunctionApi\n     */\n    functionControllerCreate(functionCreateDTO?: FunctionCreateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<FunctionOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `FunctionControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FunctionApi\n     */\n    functionControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<FunctionOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `FunctionControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FunctionApi\n     */\n    functionControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `FunctionControllerSearch`\n     * @summary Search\n     * @param {FunctionSearchInputDTO} [functionSearchInputDTO] FunctionSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FunctionApi\n     */\n    functionControllerSearch(functionSearchInputDTO?: FunctionSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<FunctionOutputArrayDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `FunctionControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {FunctionUpdateDTO} [functionUpdateDTO] FunctionUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FunctionApi\n     */\n    functionControllerUpdate(id: string, functionUpdateDTO?: FunctionUpdateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<FunctionOutputDTOAPI, any>>;\n}\n/**\n * GameServerApi - axios parameter creator\n * @export\n */\ndeclare const GameServerApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     * Ban a player from a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerBanPlayer`\n     * @summary Ban player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {BanPlayerInputDTO} [banPlayerInputDTO] BanPlayerInputDTO\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    gameServerControllerBanPlayer: (gameServerId: string, playerId: string, banPlayerInputDTO?: BanPlayerInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Create a gameserver   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerCreate`\n     * @summary Create\n     * @param {GameServerCreateDTO} [gameServerCreateDTO] GameServerCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerCreate: (gameServerCreateDTO?: GameServerCreateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Execute a raw command on a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerExecuteCommand`\n     * @summary Execute command\n     * @param {string} id\n     * @param {CommandExecuteInputDTO} [commandExecuteInputDTO] CommandExecuteInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerExecuteCommand: (id: string, commandExecuteInputDTO?: CommandExecuteInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Fetch status of an import from CSMM   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerGetImport`\n     * @summary Get import\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetImport: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Get map metadata for Leaflet<br> OperationId: `GameServerControllerGetMapInfo`\n     * @summary Get map info\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetMapInfo: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Get a map tile for Leaflet<br> OperationId: `GameServerControllerGetMapTile`\n     * @summary Get map tile\n     * @param {string} id\n     * @param {string} x\n     * @param {string} y\n     * @param {string} z\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetMapTile: (id: string, x: string, y: string, z: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Fetch a gameserver by id<br> OperationId: `GameServerControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Fetch a list of players on a gameserver. Requires gameserver to be online and reachable.   Required permissions: `READ_PLAYERS`<br> OperationId: `GameServerControllerGetPlayers`\n     * @summary Get players\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetPlayers: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Fetch gameserver types (7dtd, Rust, ...)<br> OperationId: `GameServerControllerGetTypes`\n     * @summary Get types\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetTypes: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Give an item to a player. Requires gameserver to be online and reachable. Depending on the underlying game implementation, it\\'s possible that the item is dropped on the ground instead of placed directly in the player\\'s inventory.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerGiveItem`\n     * @summary Give item\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {GiveItemInputDTO} [giveItemInputDTO] GiveItemInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGiveItem: (gameServerId: string, playerId: string, giveItemInputDTO?: GiveItemInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Import a gameserver from CSMM.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerImportFromCSMM`\n     * @summary Import from csmm\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerImportFromCSMM: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Kick a player from a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerKickPlayer`\n     * @summary Kick player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {KickPlayerInputDTO} [kickPlayerInputDTO] KickPlayerInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerKickPlayer: (gameServerId: string, playerId: string, kickPlayerInputDTO?: KickPlayerInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * List bans for a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerListBans`\n     * @summary List bans\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    gameServerControllerListBans: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Delete a gameserver   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Fetch gameservers<br> OperationId: `GameServerControllerSearch`\n     * @summary Search\n     * @param {GameServerSearchInputDTO} [gameServerSearchInputDTO] GameServerSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerSearch: (gameServerSearchInputDTO?: GameServerSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Send a message in gameserver chat. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerSendMessage`\n     * @summary Send message\n     * @param {string} id\n     * @param {MessageSendInputDTO} [messageSendInputDTO] MessageSendInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerSendMessage: (id: string, messageSendInputDTO?: MessageSendInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Shuts down the gameserver. This is a \\'soft\\' shutdown, meaning the gameserver will be stopped gracefully. If the gameserver is not reachable, this will have no effect. Note that most hosting providers will automatically restart the gameserver after a shutdown, which makes this operation act as a \\'restart\\' instead.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerShutdown`\n     * @summary Shutdown\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerShutdown: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Teleport a player to a location. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerTeleportPlayer`\n     * @summary Teleport player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {TeleportPlayerInputDTO} [teleportPlayerInputDTO] TeleportPlayerInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerTeleportPlayer: (gameServerId: string, playerId: string, teleportPlayerInputDTO?: TeleportPlayerInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Test if Takaro can connect to a gameserver. Will do a thorough check and report details.<br> OperationId: `GameServerControllerTestReachability`\n     * @summary Test reachability\n     * @param {GameServerTestReachabilityInputDTO} [gameServerTestReachabilityInputDTO] GameServerTestReachabilityInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerTestReachability: (gameServerTestReachabilityInputDTO?: GameServerTestReachabilityInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Test if Takaro can connect to a gameserver. Will do a thorough check and report details.<br> OperationId: `GameServerControllerTestReachabilityForId`\n     * @summary Test reachability for id\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerTestReachabilityForId: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Unban a player from a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerUnbanPlayer`\n     * @summary Unban player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    gameServerControllerUnbanPlayer: (gameServerId: string, playerId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Update a gameserver   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {GameServerUpdateDTO} [gameServerUpdateDTO] GameServerUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerUpdate: (id: string, gameServerUpdateDTO?: GameServerUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * GameServerApi - functional programming interface\n * @export\n */\ndeclare const GameServerApiFp: (configuration?: Configuration) => {\n    /**\n     * Ban a player from a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerBanPlayer`\n     * @summary Ban player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {BanPlayerInputDTO} [banPlayerInputDTO] BanPlayerInputDTO\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    gameServerControllerBanPlayer(gameServerId: string, playerId: string, banPlayerInputDTO?: BanPlayerInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * Create a gameserver   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerCreate`\n     * @summary Create\n     * @param {GameServerCreateDTO} [gameServerCreateDTO] GameServerCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerCreate(gameServerCreateDTO?: GameServerCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameServerOutputDTOAPI>>;\n    /**\n     * Execute a raw command on a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerExecuteCommand`\n     * @summary Execute command\n     * @param {string} id\n     * @param {CommandExecuteInputDTO} [commandExecuteInputDTO] CommandExecuteInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerExecuteCommand(id: string, commandExecuteInputDTO?: CommandExecuteInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommandExecuteDTOAPI>>;\n    /**\n     * Fetch status of an import from CSMM   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerGetImport`\n     * @summary Get import\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetImport(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportStatusOutputDTOAPI>>;\n    /**\n     * Get map metadata for Leaflet<br> OperationId: `GameServerControllerGetMapInfo`\n     * @summary Get map info\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetMapInfo(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     * Get a map tile for Leaflet<br> OperationId: `GameServerControllerGetMapTile`\n     * @summary Get map tile\n     * @param {string} id\n     * @param {string} x\n     * @param {string} y\n     * @param {string} z\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetMapTile(id: string, x: string, y: string, z: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     * Fetch a gameserver by id<br> OperationId: `GameServerControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameServerOutputDTOAPI>>;\n    /**\n     * Fetch a list of players on a gameserver. Requires gameserver to be online and reachable.   Required permissions: `READ_PLAYERS`<br> OperationId: `GameServerControllerGetPlayers`\n     * @summary Get players\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetPlayers(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerOnGameserverOutputDTOAPI>>;\n    /**\n     * Fetch gameserver types (7dtd, Rust, ...)<br> OperationId: `GameServerControllerGetTypes`\n     * @summary Get types\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetTypes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameServerTypesOutputDTOAPI>>;\n    /**\n     * Give an item to a player. Requires gameserver to be online and reachable. Depending on the underlying game implementation, it\\'s possible that the item is dropped on the ground instead of placed directly in the player\\'s inventory.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerGiveItem`\n     * @summary Give item\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {GiveItemInputDTO} [giveItemInputDTO] GiveItemInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGiveItem(gameServerId: string, playerId: string, giveItemInputDTO?: GiveItemInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     * Import a gameserver from CSMM.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerImportFromCSMM`\n     * @summary Import from csmm\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerImportFromCSMM(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportOutputDTOAPI>>;\n    /**\n     * Kick a player from a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerKickPlayer`\n     * @summary Kick player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {KickPlayerInputDTO} [kickPlayerInputDTO] KickPlayerInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerKickPlayer(gameServerId: string, playerId: string, kickPlayerInputDTO?: KickPlayerInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * List bans for a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerListBans`\n     * @summary List bans\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    gameServerControllerListBans(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BanPlayerOutputDTO>>;\n    /**\n     * Delete a gameserver   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * Fetch gameservers<br> OperationId: `GameServerControllerSearch`\n     * @summary Search\n     * @param {GameServerSearchInputDTO} [gameServerSearchInputDTO] GameServerSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerSearch(gameServerSearchInputDTO?: GameServerSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameServerOutputArrayDTOAPI>>;\n    /**\n     * Send a message in gameserver chat. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerSendMessage`\n     * @summary Send message\n     * @param {string} id\n     * @param {MessageSendInputDTO} [messageSendInputDTO] MessageSendInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerSendMessage(id: string, messageSendInputDTO?: MessageSendInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * Shuts down the gameserver. This is a \\'soft\\' shutdown, meaning the gameserver will be stopped gracefully. If the gameserver is not reachable, this will have no effect. Note that most hosting providers will automatically restart the gameserver after a shutdown, which makes this operation act as a \\'restart\\' instead.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerShutdown`\n     * @summary Shutdown\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerShutdown(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     * Teleport a player to a location. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerTeleportPlayer`\n     * @summary Teleport player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {TeleportPlayerInputDTO} [teleportPlayerInputDTO] TeleportPlayerInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerTeleportPlayer(gameServerId: string, playerId: string, teleportPlayerInputDTO?: TeleportPlayerInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * Test if Takaro can connect to a gameserver. Will do a thorough check and report details.<br> OperationId: `GameServerControllerTestReachability`\n     * @summary Test reachability\n     * @param {GameServerTestReachabilityInputDTO} [gameServerTestReachabilityInputDTO] GameServerTestReachabilityInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerTestReachability(gameServerTestReachabilityInputDTO?: GameServerTestReachabilityInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameServerTestReachabilityDTOAPI>>;\n    /**\n     * Test if Takaro can connect to a gameserver. Will do a thorough check and report details.<br> OperationId: `GameServerControllerTestReachabilityForId`\n     * @summary Test reachability for id\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerTestReachabilityForId(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameServerTestReachabilityDTOAPI>>;\n    /**\n     * Unban a player from a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerUnbanPlayer`\n     * @summary Unban player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    gameServerControllerUnbanPlayer(gameServerId: string, playerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * Update a gameserver   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {GameServerUpdateDTO} [gameServerUpdateDTO] GameServerUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerUpdate(id: string, gameServerUpdateDTO?: GameServerUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameServerOutputDTOAPI>>;\n};\n/**\n * GameServerApi - factory interface\n * @export\n */\ndeclare const GameServerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     * Ban a player from a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerBanPlayer`\n     * @summary Ban player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {BanPlayerInputDTO} [banPlayerInputDTO] BanPlayerInputDTO\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    gameServerControllerBanPlayer(gameServerId: string, playerId: string, banPlayerInputDTO?: BanPlayerInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * Create a gameserver   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerCreate`\n     * @summary Create\n     * @param {GameServerCreateDTO} [gameServerCreateDTO] GameServerCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerCreate(gameServerCreateDTO?: GameServerCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<GameServerOutputDTOAPI>;\n    /**\n     * Execute a raw command on a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerExecuteCommand`\n     * @summary Execute command\n     * @param {string} id\n     * @param {CommandExecuteInputDTO} [commandExecuteInputDTO] CommandExecuteInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerExecuteCommand(id: string, commandExecuteInputDTO?: CommandExecuteInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<CommandExecuteDTOAPI>;\n    /**\n     * Fetch status of an import from CSMM   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerGetImport`\n     * @summary Get import\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetImport(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ImportStatusOutputDTOAPI>;\n    /**\n     * Get map metadata for Leaflet<br> OperationId: `GameServerControllerGetMapInfo`\n     * @summary Get map info\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetMapInfo(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     * Get a map tile for Leaflet<br> OperationId: `GameServerControllerGetMapTile`\n     * @summary Get map tile\n     * @param {string} id\n     * @param {string} x\n     * @param {string} y\n     * @param {string} z\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetMapTile(id: string, x: string, y: string, z: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     * Fetch a gameserver by id<br> OperationId: `GameServerControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GameServerOutputDTOAPI>;\n    /**\n     * Fetch a list of players on a gameserver. Requires gameserver to be online and reachable.   Required permissions: `READ_PLAYERS`<br> OperationId: `GameServerControllerGetPlayers`\n     * @summary Get players\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetPlayers(id: string, options?: RawAxiosRequestConfig): AxiosPromise<PlayerOnGameserverOutputDTOAPI>;\n    /**\n     * Fetch gameserver types (7dtd, Rust, ...)<br> OperationId: `GameServerControllerGetTypes`\n     * @summary Get types\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGetTypes(options?: RawAxiosRequestConfig): AxiosPromise<GameServerTypesOutputDTOAPI>;\n    /**\n     * Give an item to a player. Requires gameserver to be online and reachable. Depending on the underlying game implementation, it\\'s possible that the item is dropped on the ground instead of placed directly in the player\\'s inventory.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerGiveItem`\n     * @summary Give item\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {GiveItemInputDTO} [giveItemInputDTO] GiveItemInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerGiveItem(gameServerId: string, playerId: string, giveItemInputDTO?: GiveItemInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     * Import a gameserver from CSMM.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerImportFromCSMM`\n     * @summary Import from csmm\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerImportFromCSMM(options?: RawAxiosRequestConfig): AxiosPromise<ImportOutputDTOAPI>;\n    /**\n     * Kick a player from a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerKickPlayer`\n     * @summary Kick player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {KickPlayerInputDTO} [kickPlayerInputDTO] KickPlayerInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerKickPlayer(gameServerId: string, playerId: string, kickPlayerInputDTO?: KickPlayerInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * List bans for a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerListBans`\n     * @summary List bans\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    gameServerControllerListBans(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BanPlayerOutputDTO>;\n    /**\n     * Delete a gameserver   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * Fetch gameservers<br> OperationId: `GameServerControllerSearch`\n     * @summary Search\n     * @param {GameServerSearchInputDTO} [gameServerSearchInputDTO] GameServerSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerSearch(gameServerSearchInputDTO?: GameServerSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<GameServerOutputArrayDTOAPI>;\n    /**\n     * Send a message in gameserver chat. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerSendMessage`\n     * @summary Send message\n     * @param {string} id\n     * @param {MessageSendInputDTO} [messageSendInputDTO] MessageSendInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerSendMessage(id: string, messageSendInputDTO?: MessageSendInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * Shuts down the gameserver. This is a \\'soft\\' shutdown, meaning the gameserver will be stopped gracefully. If the gameserver is not reachable, this will have no effect. Note that most hosting providers will automatically restart the gameserver after a shutdown, which makes this operation act as a \\'restart\\' instead.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerShutdown`\n     * @summary Shutdown\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerShutdown(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     * Teleport a player to a location. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerTeleportPlayer`\n     * @summary Teleport player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {TeleportPlayerInputDTO} [teleportPlayerInputDTO] TeleportPlayerInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerTeleportPlayer(gameServerId: string, playerId: string, teleportPlayerInputDTO?: TeleportPlayerInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * Test if Takaro can connect to a gameserver. Will do a thorough check and report details.<br> OperationId: `GameServerControllerTestReachability`\n     * @summary Test reachability\n     * @param {GameServerTestReachabilityInputDTO} [gameServerTestReachabilityInputDTO] GameServerTestReachabilityInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerTestReachability(gameServerTestReachabilityInputDTO?: GameServerTestReachabilityInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<GameServerTestReachabilityDTOAPI>;\n    /**\n     * Test if Takaro can connect to a gameserver. Will do a thorough check and report details.<br> OperationId: `GameServerControllerTestReachabilityForId`\n     * @summary Test reachability for id\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerTestReachabilityForId(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GameServerTestReachabilityDTOAPI>;\n    /**\n     * Unban a player from a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerUnbanPlayer`\n     * @summary Unban player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    gameServerControllerUnbanPlayer(gameServerId: string, playerId: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * Update a gameserver   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {GameServerUpdateDTO} [gameServerUpdateDTO] GameServerUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    gameServerControllerUpdate(id: string, gameServerUpdateDTO?: GameServerUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<GameServerOutputDTOAPI>;\n};\n/**\n * GameServerApi - object-oriented interface\n * @export\n * @class GameServerApi\n * @extends {BaseAPI}\n */\ndeclare class GameServerApi extends BaseAPI {\n    /**\n     * Ban a player from a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerBanPlayer`\n     * @summary Ban player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {BanPlayerInputDTO} [banPlayerInputDTO] BanPlayerInputDTO\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerBanPlayer(gameServerId: string, playerId: string, banPlayerInputDTO?: BanPlayerInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * Create a gameserver   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerCreate`\n     * @summary Create\n     * @param {GameServerCreateDTO} [gameServerCreateDTO] GameServerCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerCreate(gameServerCreateDTO?: GameServerCreateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<GameServerOutputDTOAPI, any>>;\n    /**\n     * Execute a raw command on a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerExecuteCommand`\n     * @summary Execute command\n     * @param {string} id\n     * @param {CommandExecuteInputDTO} [commandExecuteInputDTO] CommandExecuteInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerExecuteCommand(id: string, commandExecuteInputDTO?: CommandExecuteInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<CommandExecuteDTOAPI, any>>;\n    /**\n     * Fetch status of an import from CSMM   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerGetImport`\n     * @summary Get import\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerGetImport(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ImportStatusOutputDTOAPI, any>>;\n    /**\n     * Get map metadata for Leaflet<br> OperationId: `GameServerControllerGetMapInfo`\n     * @summary Get map info\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerGetMapInfo(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     * Get a map tile for Leaflet<br> OperationId: `GameServerControllerGetMapTile`\n     * @summary Get map tile\n     * @param {string} id\n     * @param {string} x\n     * @param {string} y\n     * @param {string} z\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerGetMapTile(id: string, x: string, y: string, z: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     * Fetch a gameserver by id<br> OperationId: `GameServerControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<GameServerOutputDTOAPI, any>>;\n    /**\n     * Fetch a list of players on a gameserver. Requires gameserver to be online and reachable.   Required permissions: `READ_PLAYERS`<br> OperationId: `GameServerControllerGetPlayers`\n     * @summary Get players\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerGetPlayers(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<PlayerOnGameserverOutputDTOAPI, any>>;\n    /**\n     * Fetch gameserver types (7dtd, Rust, ...)<br> OperationId: `GameServerControllerGetTypes`\n     * @summary Get types\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerGetTypes(options?: RawAxiosRequestConfig): Promise<AxiosResponse<GameServerTypesOutputDTOAPI, any>>;\n    /**\n     * Give an item to a player. Requires gameserver to be online and reachable. Depending on the underlying game implementation, it\\'s possible that the item is dropped on the ground instead of placed directly in the player\\'s inventory.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerGiveItem`\n     * @summary Give item\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {GiveItemInputDTO} [giveItemInputDTO] GiveItemInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerGiveItem(gameServerId: string, playerId: string, giveItemInputDTO?: GiveItemInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     * Import a gameserver from CSMM.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerImportFromCSMM`\n     * @summary Import from csmm\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerImportFromCSMM(options?: RawAxiosRequestConfig): Promise<AxiosResponse<ImportOutputDTOAPI, any>>;\n    /**\n     * Kick a player from a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerKickPlayer`\n     * @summary Kick player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {KickPlayerInputDTO} [kickPlayerInputDTO] KickPlayerInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerKickPlayer(gameServerId: string, playerId: string, kickPlayerInputDTO?: KickPlayerInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * List bans for a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerListBans`\n     * @summary List bans\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerListBans(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<BanPlayerOutputDTO, any>>;\n    /**\n     * Delete a gameserver   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * Fetch gameservers<br> OperationId: `GameServerControllerSearch`\n     * @summary Search\n     * @param {GameServerSearchInputDTO} [gameServerSearchInputDTO] GameServerSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerSearch(gameServerSearchInputDTO?: GameServerSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<GameServerOutputArrayDTOAPI, any>>;\n    /**\n     * Send a message in gameserver chat. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerSendMessage`\n     * @summary Send message\n     * @param {string} id\n     * @param {MessageSendInputDTO} [messageSendInputDTO] MessageSendInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerSendMessage(id: string, messageSendInputDTO?: MessageSendInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * Shuts down the gameserver. This is a \\'soft\\' shutdown, meaning the gameserver will be stopped gracefully. If the gameserver is not reachable, this will have no effect. Note that most hosting providers will automatically restart the gameserver after a shutdown, which makes this operation act as a \\'restart\\' instead.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerShutdown`\n     * @summary Shutdown\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerShutdown(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     * Teleport a player to a location. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerTeleportPlayer`\n     * @summary Teleport player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {TeleportPlayerInputDTO} [teleportPlayerInputDTO] TeleportPlayerInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerTeleportPlayer(gameServerId: string, playerId: string, teleportPlayerInputDTO?: TeleportPlayerInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * Test if Takaro can connect to a gameserver. Will do a thorough check and report details.<br> OperationId: `GameServerControllerTestReachability`\n     * @summary Test reachability\n     * @param {GameServerTestReachabilityInputDTO} [gameServerTestReachabilityInputDTO] GameServerTestReachabilityInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerTestReachability(gameServerTestReachabilityInputDTO?: GameServerTestReachabilityInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<GameServerTestReachabilityDTOAPI, any>>;\n    /**\n     * Test if Takaro can connect to a gameserver. Will do a thorough check and report details.<br> OperationId: `GameServerControllerTestReachabilityForId`\n     * @summary Test reachability for id\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerTestReachabilityForId(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<GameServerTestReachabilityDTOAPI, any>>;\n    /**\n     * Unban a player from a gameserver. Requires gameserver to be online and reachable.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerUnbanPlayer`\n     * @summary Unban player\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerUnbanPlayer(gameServerId: string, playerId: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * Update a gameserver   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `GameServerControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {GameServerUpdateDTO} [gameServerUpdateDTO] GameServerUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GameServerApi\n     */\n    gameServerControllerUpdate(id: string, gameServerUpdateDTO?: GameServerUpdateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<GameServerOutputDTOAPI, any>>;\n}\n/**\n * HookApi - axios parameter creator\n * @export\n */\ndeclare const HookApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerCreate`\n     * @summary Create\n     * @param {HookCreateDTO} [hookCreateDTO] HookCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerCreate: (hookCreateDTO?: HookCreateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `HookControllerGetExecutions`\n     * @summary Get executions\n     * @param {string} id\n     * @param {any} [success]\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerGetExecutions: (id: string, success?: any, eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `HookControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `HookControllerSearch`\n     * @summary Search\n     * @param {HookSearchInputDTO} [hookSearchInputDTO] HookSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerSearch: (hookSearchInputDTO?: HookSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Trigger a hook. This is used for testing purposes, the event will not actually be created but the hook-logic will be executed.      You can pass any data you want, but it must validate against the corresponding event metadata. Eg to trigger the `chat-message` event, you must pass an object with a `message` property   Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerTrigger`\n     * @summary Trigger\n     * @param {HookTriggerDTO} [hookTriggerDTO] HookTriggerDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerTrigger: (hookTriggerDTO?: HookTriggerDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {HookUpdateDTO} [hookUpdateDTO] HookUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerUpdate: (id: string, hookUpdateDTO?: HookUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * HookApi - functional programming interface\n * @export\n */\ndeclare const HookApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerCreate`\n     * @summary Create\n     * @param {HookCreateDTO} [hookCreateDTO] HookCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerCreate(hookCreateDTO?: HookCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HookOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `HookControllerGetExecutions`\n     * @summary Get executions\n     * @param {string} id\n     * @param {any} [success]\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerGetExecutions(id: string, success?: any, eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventOutputArrayDTOAPI>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `HookControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HookOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `HookControllerSearch`\n     * @summary Search\n     * @param {HookSearchInputDTO} [hookSearchInputDTO] HookSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerSearch(hookSearchInputDTO?: HookSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HookOutputArrayDTOAPI>>;\n    /**\n     * Trigger a hook. This is used for testing purposes, the event will not actually be created but the hook-logic will be executed.      You can pass any data you want, but it must validate against the corresponding event metadata. Eg to trigger the `chat-message` event, you must pass an object with a `message` property   Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerTrigger`\n     * @summary Trigger\n     * @param {HookTriggerDTO} [hookTriggerDTO] HookTriggerDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerTrigger(hookTriggerDTO?: HookTriggerDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {HookUpdateDTO} [hookUpdateDTO] HookUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerUpdate(id: string, hookUpdateDTO?: HookUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HookOutputDTOAPI>>;\n};\n/**\n * HookApi - factory interface\n * @export\n */\ndeclare const HookApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerCreate`\n     * @summary Create\n     * @param {HookCreateDTO} [hookCreateDTO] HookCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerCreate(hookCreateDTO?: HookCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<HookOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `HookControllerGetExecutions`\n     * @summary Get executions\n     * @param {string} id\n     * @param {any} [success]\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerGetExecutions(id: string, success?: any, eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<EventOutputArrayDTOAPI>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `HookControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<HookOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `HookControllerSearch`\n     * @summary Search\n     * @param {HookSearchInputDTO} [hookSearchInputDTO] HookSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerSearch(hookSearchInputDTO?: HookSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<HookOutputArrayDTOAPI>;\n    /**\n     * Trigger a hook. This is used for testing purposes, the event will not actually be created but the hook-logic will be executed.      You can pass any data you want, but it must validate against the corresponding event metadata. Eg to trigger the `chat-message` event, you must pass an object with a `message` property   Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerTrigger`\n     * @summary Trigger\n     * @param {HookTriggerDTO} [hookTriggerDTO] HookTriggerDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerTrigger(hookTriggerDTO?: HookTriggerDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {HookUpdateDTO} [hookUpdateDTO] HookUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    hookControllerUpdate(id: string, hookUpdateDTO?: HookUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<HookOutputDTOAPI>;\n};\n/**\n * HookApi - object-oriented interface\n * @export\n * @class HookApi\n * @extends {BaseAPI}\n */\ndeclare class HookApi extends BaseAPI {\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerCreate`\n     * @summary Create\n     * @param {HookCreateDTO} [hookCreateDTO] HookCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HookApi\n     */\n    hookControllerCreate(hookCreateDTO?: HookCreateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<HookOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `HookControllerGetExecutions`\n     * @summary Get executions\n     * @param {string} id\n     * @param {any} [success]\n     * @param {EventSearchInputDTO} [eventSearchInputDTO] EventSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HookApi\n     */\n    hookControllerGetExecutions(id: string, success?: any, eventSearchInputDTO?: EventSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<EventOutputArrayDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `HookControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HookApi\n     */\n    hookControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<HookOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HookApi\n     */\n    hookControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `HookControllerSearch`\n     * @summary Search\n     * @param {HookSearchInputDTO} [hookSearchInputDTO] HookSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HookApi\n     */\n    hookControllerSearch(hookSearchInputDTO?: HookSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<HookOutputArrayDTOAPI, any>>;\n    /**\n     * Trigger a hook. This is used for testing purposes, the event will not actually be created but the hook-logic will be executed.      You can pass any data you want, but it must validate against the corresponding event metadata. Eg to trigger the `chat-message` event, you must pass an object with a `message` property   Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerTrigger`\n     * @summary Trigger\n     * @param {HookTriggerDTO} [hookTriggerDTO] HookTriggerDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HookApi\n     */\n    hookControllerTrigger(hookTriggerDTO?: HookTriggerDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     *    Required permissions: `MANAGE_MODULES`<br> OperationId: `HookControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {HookUpdateDTO} [hookUpdateDTO] HookUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HookApi\n     */\n    hookControllerUpdate(id: string, hookUpdateDTO?: HookUpdateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<HookOutputDTOAPI, any>>;\n}\n/**\n * ItemApi - axios parameter creator\n * @export\n */\ndeclare const ItemApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `READ_ITEMS`<br> OperationId: `ItemControllerFindOne`\n     * @summary Find one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_ITEMS`<br> OperationId: `ItemControllerSearch`\n     * @summary Search\n     * @param {ItemSearchInputDTO} [itemSearchInputDTO] ItemSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemControllerSearch: (itemSearchInputDTO?: ItemSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * ItemApi - functional programming interface\n * @export\n */\ndeclare const ItemApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `READ_ITEMS`<br> OperationId: `ItemControllerFindOne`\n     * @summary Find one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_ITEMS`<br> OperationId: `ItemControllerSearch`\n     * @summary Search\n     * @param {ItemSearchInputDTO} [itemSearchInputDTO] ItemSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemControllerSearch(itemSearchInputDTO?: ItemSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemOutputArrayDTOAPI>>;\n};\n/**\n * ItemApi - factory interface\n * @export\n */\ndeclare const ItemApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `READ_ITEMS`<br> OperationId: `ItemControllerFindOne`\n     * @summary Find one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ItemOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_ITEMS`<br> OperationId: `ItemControllerSearch`\n     * @summary Search\n     * @param {ItemSearchInputDTO} [itemSearchInputDTO] ItemSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    itemControllerSearch(itemSearchInputDTO?: ItemSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<ItemOutputArrayDTOAPI>;\n};\n/**\n * ItemApi - object-oriented interface\n * @export\n * @class ItemApi\n * @extends {BaseAPI}\n */\ndeclare class ItemApi extends BaseAPI {\n    /**\n     *    Required permissions: `READ_ITEMS`<br> OperationId: `ItemControllerFindOne`\n     * @summary Find one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ItemApi\n     */\n    itemControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ItemOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_ITEMS`<br> OperationId: `ItemControllerSearch`\n     * @summary Search\n     * @param {ItemSearchInputDTO} [itemSearchInputDTO] ItemSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ItemApi\n     */\n    itemControllerSearch(itemSearchInputDTO?: ItemSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ItemOutputArrayDTOAPI, any>>;\n}\n/**\n * MetaApi - axios parameter creator\n * @export\n */\ndeclare const MetaApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     * <br> OperationId: `MetaGetHealth`\n     * @summary Get health\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetHealth: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `MetaGetMetrics`\n     * @summary Get metrics\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetMetrics: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `MetaGetOpenApi`\n     * @summary Get open api\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetOpenApi: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `MetaGetOpenApiHtml`\n     * @summary Get open api html\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetOpenApiHtml: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `MetaGetReadiness`\n     * @summary Get readiness\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetReadiness: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `MetaGetRoot`\n     * @summary Get root\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetRoot: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * MetaApi - functional programming interface\n * @export\n */\ndeclare const MetaApiFp: (configuration?: Configuration) => {\n    /**\n     * <br> OperationId: `MetaGetHealth`\n     * @summary Get health\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetHealth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthOutputDTO>>;\n    /**\n     * <br> OperationId: `MetaGetMetrics`\n     * @summary Get metrics\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetMetrics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     * <br> OperationId: `MetaGetOpenApi`\n     * @summary Get open api\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetOpenApi(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     * <br> OperationId: `MetaGetOpenApiHtml`\n     * @summary Get open api html\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetOpenApiHtml(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     * <br> OperationId: `MetaGetReadiness`\n     * @summary Get readiness\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetReadiness(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthOutputDTO>>;\n    /**\n     * <br> OperationId: `MetaGetRoot`\n     * @summary Get root\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetRoot(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n};\n/**\n * MetaApi - factory interface\n * @export\n */\ndeclare const MetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     * <br> OperationId: `MetaGetHealth`\n     * @summary Get health\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetHealth(options?: RawAxiosRequestConfig): AxiosPromise<HealthOutputDTO>;\n    /**\n     * <br> OperationId: `MetaGetMetrics`\n     * @summary Get metrics\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetMetrics(options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     * <br> OperationId: `MetaGetOpenApi`\n     * @summary Get open api\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetOpenApi(options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     * <br> OperationId: `MetaGetOpenApiHtml`\n     * @summary Get open api html\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetOpenApiHtml(options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     * <br> OperationId: `MetaGetReadiness`\n     * @summary Get readiness\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetReadiness(options?: RawAxiosRequestConfig): AxiosPromise<HealthOutputDTO>;\n    /**\n     * <br> OperationId: `MetaGetRoot`\n     * @summary Get root\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metaGetRoot(options?: RawAxiosRequestConfig): AxiosPromise<void>;\n};\n/**\n * MetaApi - object-oriented interface\n * @export\n * @class MetaApi\n * @extends {BaseAPI}\n */\ndeclare class MetaApi extends BaseAPI {\n    /**\n     * <br> OperationId: `MetaGetHealth`\n     * @summary Get health\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MetaApi\n     */\n    metaGetHealth(options?: RawAxiosRequestConfig): Promise<AxiosResponse<HealthOutputDTO, any>>;\n    /**\n     * <br> OperationId: `MetaGetMetrics`\n     * @summary Get metrics\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MetaApi\n     */\n    metaGetMetrics(options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     * <br> OperationId: `MetaGetOpenApi`\n     * @summary Get open api\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MetaApi\n     */\n    metaGetOpenApi(options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     * <br> OperationId: `MetaGetOpenApiHtml`\n     * @summary Get open api html\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MetaApi\n     */\n    metaGetOpenApiHtml(options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     * <br> OperationId: `MetaGetReadiness`\n     * @summary Get readiness\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MetaApi\n     */\n    metaGetReadiness(options?: RawAxiosRequestConfig): Promise<AxiosResponse<HealthOutputDTO, any>>;\n    /**\n     * <br> OperationId: `MetaGetRoot`\n     * @summary Get root\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MetaApi\n     */\n    metaGetRoot(options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n}\n/**\n * ModuleApi - axios parameter creator\n * @export\n */\ndeclare const ModuleApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     * Create a new module   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerCreate`\n     * @summary Create module\n     * @param {ModuleCreateAPIDTO} [moduleCreateAPIDTO] ModuleCreateAPIDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerCreate: (moduleCreateAPIDTO?: ModuleCreateAPIDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Exports a module to a format that can be imported into another Takaro instance. This endpoint will export all known versions of the module   Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerExport`\n     * @summary Export a module\n     * @param {string} id\n     * @param {ModuleExportOptionsDTO} [moduleExportOptionsDTO] ModuleExportOptionsDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerExport: (id: string, moduleExportOptionsDTO?: ModuleExportOptionsDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerGetOne`\n     * @summary Get one module\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Get a list of all tags for a module, without including all the underlying data   Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerGetTags`\n     * @summary Get tags\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [limit]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerGetTags: (id: string, page?: number, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Imports a module from a format that was exported from another Takaro instance   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerImport`\n     * @summary Import a module\n     * @param {any} [body]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerImport: (body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Removes a module, including all versions and config   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerRemove`\n     * @summary Remove a module\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerSearch`\n     * @summary Search modules\n     * @param {ModuleSearchInputDTO} [moduleSearchInputDTO] ModuleSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerSearch: (moduleSearchInputDTO?: ModuleSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Update a module   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerUpdate`\n     * @summary Update a module\n     * @param {string} id\n     * @param {ModuleUpdateDTO} [moduleUpdateDTO] ModuleUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerUpdate: (id: string, moduleUpdateDTO?: ModuleUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleInstallationsControllerGetInstalledModules`\n     * @summary Search module installations\n     * @param {ModuleInstallationSearchInputDTO} [moduleInstallationSearchInputDTO] ModuleInstallationSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleInstallationsControllerGetInstalledModules: (moduleInstallationSearchInputDTO?: ModuleInstallationSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleInstallationsControllerGetModuleInstallation`\n     * @summary Get one installation\n     * @param {string} moduleId\n     * @param {string} gameServerId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleInstallationsControllerGetModuleInstallation: (moduleId: string, gameServerId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Install a module on a gameserver. You can have multiple installations of the same module on the same gameserver.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `ModuleInstallationsControllerInstallModule`\n     * @summary Install module\n     * @param {InstallModuleDTO} [installModuleDTO] InstallModuleDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleInstallationsControllerInstallModule: (installModuleDTO?: InstallModuleDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Uninstall a module from a gameserver. This will not delete the module from the database.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `ModuleInstallationsControllerUninstallModule`\n     * @summary Uninstall module\n     * @param {string} moduleId\n     * @param {string} gameServerId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleInstallationsControllerUninstallModule: (moduleId: string, gameServerId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleVersionControllerGetModuleVersion`\n     * @summary Get one version\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleVersionControllerGetModuleVersion: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleVersionControllerSearchVersions`\n     * @summary Search module versions\n     * @param {ModuleVersionSearchInputDTO} [moduleVersionSearchInputDTO] ModuleVersionSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleVersionControllerSearchVersions: (moduleVersionSearchInputDTO?: ModuleVersionSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Creates a new version of a module, copying all config (commands,hooks,cronjobs,...) from the \\\"latest\\\" version into a new, immutable version   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleVersionControllerTagVersion`\n     * @summary Tag a new version\n     * @param {ModuleVersionCreateAPIDTO} [moduleVersionCreateAPIDTO] ModuleVersionCreateAPIDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleVersionControllerTagVersion: (moduleVersionCreateAPIDTO?: ModuleVersionCreateAPIDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * ModuleApi - functional programming interface\n * @export\n */\ndeclare const ModuleApiFp: (configuration?: Configuration) => {\n    /**\n     * Create a new module   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerCreate`\n     * @summary Create module\n     * @param {ModuleCreateAPIDTO} [moduleCreateAPIDTO] ModuleCreateAPIDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerCreate(moduleCreateAPIDTO?: ModuleCreateAPIDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModuleOutputDTOAPI>>;\n    /**\n     * Exports a module to a format that can be imported into another Takaro instance. This endpoint will export all known versions of the module   Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerExport`\n     * @summary Export a module\n     * @param {string} id\n     * @param {ModuleExportOptionsDTO} [moduleExportOptionsDTO] ModuleExportOptionsDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerExport(id: string, moduleExportOptionsDTO?: ModuleExportOptionsDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModuleExportDTOAPI>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerGetOne`\n     * @summary Get one module\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModuleOutputDTOAPI>>;\n    /**\n     * Get a list of all tags for a module, without including all the underlying data   Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerGetTags`\n     * @summary Get tags\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [limit]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerGetTags(id: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmallModuleOutputArrayDTOAPI>>;\n    /**\n     * Imports a module from a format that was exported from another Takaro instance   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerImport`\n     * @summary Import a module\n     * @param {any} [body]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerImport(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     * Removes a module, including all versions and config   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerRemove`\n     * @summary Remove a module\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerSearch`\n     * @summary Search modules\n     * @param {ModuleSearchInputDTO} [moduleSearchInputDTO] ModuleSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerSearch(moduleSearchInputDTO?: ModuleSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModuleOutputArrayDTOAPI>>;\n    /**\n     * Update a module   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerUpdate`\n     * @summary Update a module\n     * @param {string} id\n     * @param {ModuleUpdateDTO} [moduleUpdateDTO] ModuleUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerUpdate(id: string, moduleUpdateDTO?: ModuleUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModuleOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleInstallationsControllerGetInstalledModules`\n     * @summary Search module installations\n     * @param {ModuleInstallationSearchInputDTO} [moduleInstallationSearchInputDTO] ModuleInstallationSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleInstallationsControllerGetInstalledModules(moduleInstallationSearchInputDTO?: ModuleInstallationSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModuleInstallationOutputArrayDTOAPI>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleInstallationsControllerGetModuleInstallation`\n     * @summary Get one installation\n     * @param {string} moduleId\n     * @param {string} gameServerId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleInstallationsControllerGetModuleInstallation(moduleId: string, gameServerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModuleInstallationOutputDTOAPI>>;\n    /**\n     * Install a module on a gameserver. You can have multiple installations of the same module on the same gameserver.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `ModuleInstallationsControllerInstallModule`\n     * @summary Install module\n     * @param {InstallModuleDTO} [installModuleDTO] InstallModuleDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleInstallationsControllerInstallModule(installModuleDTO?: InstallModuleDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModuleInstallationOutputDTOAPI>>;\n    /**\n     * Uninstall a module from a gameserver. This will not delete the module from the database.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `ModuleInstallationsControllerUninstallModule`\n     * @summary Uninstall module\n     * @param {string} moduleId\n     * @param {string} gameServerId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleInstallationsControllerUninstallModule(moduleId: string, gameServerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModuleInstallationOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleVersionControllerGetModuleVersion`\n     * @summary Get one version\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleVersionControllerGetModuleVersion(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModuleVersionOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleVersionControllerSearchVersions`\n     * @summary Search module versions\n     * @param {ModuleVersionSearchInputDTO} [moduleVersionSearchInputDTO] ModuleVersionSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleVersionControllerSearchVersions(moduleVersionSearchInputDTO?: ModuleVersionSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModuleVersionOutputArrayDTOAPI>>;\n    /**\n     * Creates a new version of a module, copying all config (commands,hooks,cronjobs,...) from the \\\"latest\\\" version into a new, immutable version   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleVersionControllerTagVersion`\n     * @summary Tag a new version\n     * @param {ModuleVersionCreateAPIDTO} [moduleVersionCreateAPIDTO] ModuleVersionCreateAPIDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleVersionControllerTagVersion(moduleVersionCreateAPIDTO?: ModuleVersionCreateAPIDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModuleVersionOutputDTOAPI>>;\n};\n/**\n * ModuleApi - factory interface\n * @export\n */\ndeclare const ModuleApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     * Create a new module   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerCreate`\n     * @summary Create module\n     * @param {ModuleCreateAPIDTO} [moduleCreateAPIDTO] ModuleCreateAPIDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerCreate(moduleCreateAPIDTO?: ModuleCreateAPIDTO, options?: RawAxiosRequestConfig): AxiosPromise<ModuleOutputDTOAPI>;\n    /**\n     * Exports a module to a format that can be imported into another Takaro instance. This endpoint will export all known versions of the module   Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerExport`\n     * @summary Export a module\n     * @param {string} id\n     * @param {ModuleExportOptionsDTO} [moduleExportOptionsDTO] ModuleExportOptionsDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerExport(id: string, moduleExportOptionsDTO?: ModuleExportOptionsDTO, options?: RawAxiosRequestConfig): AxiosPromise<ModuleExportDTOAPI>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerGetOne`\n     * @summary Get one module\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ModuleOutputDTOAPI>;\n    /**\n     * Get a list of all tags for a module, without including all the underlying data   Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerGetTags`\n     * @summary Get tags\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [limit]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerGetTags(id: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<SmallModuleOutputArrayDTOAPI>;\n    /**\n     * Imports a module from a format that was exported from another Takaro instance   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerImport`\n     * @summary Import a module\n     * @param {any} [body]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerImport(body?: any, options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     * Removes a module, including all versions and config   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerRemove`\n     * @summary Remove a module\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerSearch`\n     * @summary Search modules\n     * @param {ModuleSearchInputDTO} [moduleSearchInputDTO] ModuleSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerSearch(moduleSearchInputDTO?: ModuleSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<ModuleOutputArrayDTOAPI>;\n    /**\n     * Update a module   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerUpdate`\n     * @summary Update a module\n     * @param {string} id\n     * @param {ModuleUpdateDTO} [moduleUpdateDTO] ModuleUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleControllerUpdate(id: string, moduleUpdateDTO?: ModuleUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ModuleOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleInstallationsControllerGetInstalledModules`\n     * @summary Search module installations\n     * @param {ModuleInstallationSearchInputDTO} [moduleInstallationSearchInputDTO] ModuleInstallationSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleInstallationsControllerGetInstalledModules(moduleInstallationSearchInputDTO?: ModuleInstallationSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<ModuleInstallationOutputArrayDTOAPI>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleInstallationsControllerGetModuleInstallation`\n     * @summary Get one installation\n     * @param {string} moduleId\n     * @param {string} gameServerId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleInstallationsControllerGetModuleInstallation(moduleId: string, gameServerId: string, options?: RawAxiosRequestConfig): AxiosPromise<ModuleInstallationOutputDTOAPI>;\n    /**\n     * Install a module on a gameserver. You can have multiple installations of the same module on the same gameserver.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `ModuleInstallationsControllerInstallModule`\n     * @summary Install module\n     * @param {InstallModuleDTO} [installModuleDTO] InstallModuleDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleInstallationsControllerInstallModule(installModuleDTO?: InstallModuleDTO, options?: RawAxiosRequestConfig): AxiosPromise<ModuleInstallationOutputDTOAPI>;\n    /**\n     * Uninstall a module from a gameserver. This will not delete the module from the database.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `ModuleInstallationsControllerUninstallModule`\n     * @summary Uninstall module\n     * @param {string} moduleId\n     * @param {string} gameServerId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleInstallationsControllerUninstallModule(moduleId: string, gameServerId: string, options?: RawAxiosRequestConfig): AxiosPromise<ModuleInstallationOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleVersionControllerGetModuleVersion`\n     * @summary Get one version\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleVersionControllerGetModuleVersion(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ModuleVersionOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleVersionControllerSearchVersions`\n     * @summary Search module versions\n     * @param {ModuleVersionSearchInputDTO} [moduleVersionSearchInputDTO] ModuleVersionSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleVersionControllerSearchVersions(moduleVersionSearchInputDTO?: ModuleVersionSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<ModuleVersionOutputArrayDTOAPI>;\n    /**\n     * Creates a new version of a module, copying all config (commands,hooks,cronjobs,...) from the \\\"latest\\\" version into a new, immutable version   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleVersionControllerTagVersion`\n     * @summary Tag a new version\n     * @param {ModuleVersionCreateAPIDTO} [moduleVersionCreateAPIDTO] ModuleVersionCreateAPIDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    moduleVersionControllerTagVersion(moduleVersionCreateAPIDTO?: ModuleVersionCreateAPIDTO, options?: RawAxiosRequestConfig): AxiosPromise<ModuleVersionOutputDTOAPI>;\n};\n/**\n * ModuleApi - object-oriented interface\n * @export\n * @class ModuleApi\n * @extends {BaseAPI}\n */\ndeclare class ModuleApi extends BaseAPI {\n    /**\n     * Create a new module   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerCreate`\n     * @summary Create module\n     * @param {ModuleCreateAPIDTO} [moduleCreateAPIDTO] ModuleCreateAPIDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleControllerCreate(moduleCreateAPIDTO?: ModuleCreateAPIDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ModuleOutputDTOAPI, any>>;\n    /**\n     * Exports a module to a format that can be imported into another Takaro instance. This endpoint will export all known versions of the module   Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerExport`\n     * @summary Export a module\n     * @param {string} id\n     * @param {ModuleExportOptionsDTO} [moduleExportOptionsDTO] ModuleExportOptionsDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleControllerExport(id: string, moduleExportOptionsDTO?: ModuleExportOptionsDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ModuleExportDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerGetOne`\n     * @summary Get one module\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ModuleOutputDTOAPI, any>>;\n    /**\n     * Get a list of all tags for a module, without including all the underlying data   Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerGetTags`\n     * @summary Get tags\n     * @param {string} id\n     * @param {number} [page]\n     * @param {number} [limit]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleControllerGetTags(id: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<AxiosResponse<SmallModuleOutputArrayDTOAPI, any>>;\n    /**\n     * Imports a module from a format that was exported from another Takaro instance   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerImport`\n     * @summary Import a module\n     * @param {any} [body]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleControllerImport(body?: any, options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     * Removes a module, including all versions and config   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerRemove`\n     * @summary Remove a module\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleControllerSearch`\n     * @summary Search modules\n     * @param {ModuleSearchInputDTO} [moduleSearchInputDTO] ModuleSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleControllerSearch(moduleSearchInputDTO?: ModuleSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ModuleOutputArrayDTOAPI, any>>;\n    /**\n     * Update a module   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleControllerUpdate`\n     * @summary Update a module\n     * @param {string} id\n     * @param {ModuleUpdateDTO} [moduleUpdateDTO] ModuleUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleControllerUpdate(id: string, moduleUpdateDTO?: ModuleUpdateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ModuleOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleInstallationsControllerGetInstalledModules`\n     * @summary Search module installations\n     * @param {ModuleInstallationSearchInputDTO} [moduleInstallationSearchInputDTO] ModuleInstallationSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleInstallationsControllerGetInstalledModules(moduleInstallationSearchInputDTO?: ModuleInstallationSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ModuleInstallationOutputArrayDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleInstallationsControllerGetModuleInstallation`\n     * @summary Get one installation\n     * @param {string} moduleId\n     * @param {string} gameServerId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleInstallationsControllerGetModuleInstallation(moduleId: string, gameServerId: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ModuleInstallationOutputDTOAPI, any>>;\n    /**\n     * Install a module on a gameserver. You can have multiple installations of the same module on the same gameserver.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `ModuleInstallationsControllerInstallModule`\n     * @summary Install module\n     * @param {InstallModuleDTO} [installModuleDTO] InstallModuleDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleInstallationsControllerInstallModule(installModuleDTO?: InstallModuleDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ModuleInstallationOutputDTOAPI, any>>;\n    /**\n     * Uninstall a module from a gameserver. This will not delete the module from the database.   Required permissions: `MANAGE_GAMESERVERS`<br> OperationId: `ModuleInstallationsControllerUninstallModule`\n     * @summary Uninstall module\n     * @param {string} moduleId\n     * @param {string} gameServerId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleInstallationsControllerUninstallModule(moduleId: string, gameServerId: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ModuleInstallationOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleVersionControllerGetModuleVersion`\n     * @summary Get one version\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleVersionControllerGetModuleVersion(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ModuleVersionOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_MODULES`<br> OperationId: `ModuleVersionControllerSearchVersions`\n     * @summary Search module versions\n     * @param {ModuleVersionSearchInputDTO} [moduleVersionSearchInputDTO] ModuleVersionSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleVersionControllerSearchVersions(moduleVersionSearchInputDTO?: ModuleVersionSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ModuleVersionOutputArrayDTOAPI, any>>;\n    /**\n     * Creates a new version of a module, copying all config (commands,hooks,cronjobs,...) from the \\\"latest\\\" version into a new, immutable version   Required permissions: `MANAGE_MODULES`<br> OperationId: `ModuleVersionControllerTagVersion`\n     * @summary Tag a new version\n     * @param {ModuleVersionCreateAPIDTO} [moduleVersionCreateAPIDTO] ModuleVersionCreateAPIDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ModuleApi\n     */\n    moduleVersionControllerTagVersion(moduleVersionCreateAPIDTO?: ModuleVersionCreateAPIDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ModuleVersionOutputDTOAPI, any>>;\n}\n/**\n * PlayerApi - axios parameter creator\n * @export\n */\ndeclare const PlayerApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     * Create a new ban, creating a ban via the API will always make it takaro managed.   Required permissions: `MANAGE_PLAYERS`<br> OperationId: `BanControllerCreate`\n     * @summary Ban player\n     * @param {BanCreateDTO} [banCreateDTO] BanCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerCreate: (banCreateDTO?: BanCreateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Unban player. This will remove the ban from Takaro and the gameserver(s)   Required permissions: `MANAGE_PLAYERS`<br> OperationId: `BanControllerDelete`\n     * @summary Unban player\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Get a single ban   Required permissions: `READ_PLAYERS`<br> OperationId: `BanControllerGetOne`\n     * @summary Get a single ban\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Search for bans   Required permissions: `READ_PLAYERS`<br> OperationId: `BanControllerSearch`\n     * @summary Search for bans\n     * @param {BanSearchInputDTO} [banSearchInputDTO] BanSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerSearch: (banSearchInputDTO?: BanSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Update an existing ban, updating a ban via the API will always make it takaro managed.   Required permissions: `MANAGE_PLAYERS`<br> OperationId: `BanControllerUpdate`\n     * @summary Update ban\n     * @param {string} id\n     * @param {BanUpdateDTO} [banUpdateDTO] BanUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerUpdate: (id: string, banUpdateDTO?: BanUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`, `MANAGE_ROLES`<br> OperationId: `PlayerControllerAssignRole`\n     * @summary Assign role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {PlayerRoleAssignChangeDTO} [playerRoleAssignChangeDTO] PlayerRoleAssignChangeDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerAssignRole: (id: string, roleId: string, playerRoleAssignChangeDTO?: PlayerRoleAssignChangeDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Get the player that is currently authenticated. This is a low-privilege route, returning limited data.<br> OperationId: `PlayerControllerGetMe`\n     * @summary Get current player\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerGetMe: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`, `MANAGE_ROLES`<br> OperationId: `PlayerControllerRemoveRole`\n     * @summary Remove role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {PlayerRoleAssignChangeDTO} [playerRoleAssignChangeDTO] PlayerRoleAssignChangeDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerRemoveRole: (id: string, roleId: string, playerRoleAssignChangeDTO?: PlayerRoleAssignChangeDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerControllerSearch`\n     * @summary Search\n     * @param {PlayerSearchInputDTO} [playerSearchInputDTO] PlayerSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerSearch: (playerSearchInputDTO?: PlayerSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * PlayerApi - functional programming interface\n * @export\n */\ndeclare const PlayerApiFp: (configuration?: Configuration) => {\n    /**\n     * Create a new ban, creating a ban via the API will always make it takaro managed.   Required permissions: `MANAGE_PLAYERS`<br> OperationId: `BanControllerCreate`\n     * @summary Ban player\n     * @param {BanCreateDTO} [banCreateDTO] BanCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerCreate(banCreateDTO?: BanCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BanOutputDTOAPI>>;\n    /**\n     * Unban player. This will remove the ban from Takaro and the gameserver(s)   Required permissions: `MANAGE_PLAYERS`<br> OperationId: `BanControllerDelete`\n     * @summary Unban player\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * Get a single ban   Required permissions: `READ_PLAYERS`<br> OperationId: `BanControllerGetOne`\n     * @summary Get a single ban\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BanOutputDTOAPI>>;\n    /**\n     * Search for bans   Required permissions: `READ_PLAYERS`<br> OperationId: `BanControllerSearch`\n     * @summary Search for bans\n     * @param {BanSearchInputDTO} [banSearchInputDTO] BanSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerSearch(banSearchInputDTO?: BanSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BanOutputArrayDTOAPI>>;\n    /**\n     * Update an existing ban, updating a ban via the API will always make it takaro managed.   Required permissions: `MANAGE_PLAYERS`<br> OperationId: `BanControllerUpdate`\n     * @summary Update ban\n     * @param {string} id\n     * @param {BanUpdateDTO} [banUpdateDTO] BanUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerUpdate(id: string, banUpdateDTO?: BanUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BanOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`, `MANAGE_ROLES`<br> OperationId: `PlayerControllerAssignRole`\n     * @summary Assign role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {PlayerRoleAssignChangeDTO} [playerRoleAssignChangeDTO] PlayerRoleAssignChangeDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerAssignRole(id: string, roleId: string, playerRoleAssignChangeDTO?: PlayerRoleAssignChangeDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * Get the player that is currently authenticated. This is a low-privilege route, returning limited data.<br> OperationId: `PlayerControllerGetMe`\n     * @summary Get current player\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerGetMe(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerMeOutputDTO>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerOutputWithRolesDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`, `MANAGE_ROLES`<br> OperationId: `PlayerControllerRemoveRole`\n     * @summary Remove role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {PlayerRoleAssignChangeDTO} [playerRoleAssignChangeDTO] PlayerRoleAssignChangeDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerRemoveRole(id: string, roleId: string, playerRoleAssignChangeDTO?: PlayerRoleAssignChangeDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerControllerSearch`\n     * @summary Search\n     * @param {PlayerSearchInputDTO} [playerSearchInputDTO] PlayerSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerSearch(playerSearchInputDTO?: PlayerSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerOutputArrayDTOAPI>>;\n};\n/**\n * PlayerApi - factory interface\n * @export\n */\ndeclare const PlayerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     * Create a new ban, creating a ban via the API will always make it takaro managed.   Required permissions: `MANAGE_PLAYERS`<br> OperationId: `BanControllerCreate`\n     * @summary Ban player\n     * @param {BanCreateDTO} [banCreateDTO] BanCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerCreate(banCreateDTO?: BanCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<BanOutputDTOAPI>;\n    /**\n     * Unban player. This will remove the ban from Takaro and the gameserver(s)   Required permissions: `MANAGE_PLAYERS`<br> OperationId: `BanControllerDelete`\n     * @summary Unban player\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * Get a single ban   Required permissions: `READ_PLAYERS`<br> OperationId: `BanControllerGetOne`\n     * @summary Get a single ban\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BanOutputDTOAPI>;\n    /**\n     * Search for bans   Required permissions: `READ_PLAYERS`<br> OperationId: `BanControllerSearch`\n     * @summary Search for bans\n     * @param {BanSearchInputDTO} [banSearchInputDTO] BanSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerSearch(banSearchInputDTO?: BanSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<BanOutputArrayDTOAPI>;\n    /**\n     * Update an existing ban, updating a ban via the API will always make it takaro managed.   Required permissions: `MANAGE_PLAYERS`<br> OperationId: `BanControllerUpdate`\n     * @summary Update ban\n     * @param {string} id\n     * @param {BanUpdateDTO} [banUpdateDTO] BanUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    banControllerUpdate(id: string, banUpdateDTO?: BanUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<BanOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`, `MANAGE_ROLES`<br> OperationId: `PlayerControllerAssignRole`\n     * @summary Assign role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {PlayerRoleAssignChangeDTO} [playerRoleAssignChangeDTO] PlayerRoleAssignChangeDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerAssignRole(id: string, roleId: string, playerRoleAssignChangeDTO?: PlayerRoleAssignChangeDTO, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * Get the player that is currently authenticated. This is a low-privilege route, returning limited data.<br> OperationId: `PlayerControllerGetMe`\n     * @summary Get current player\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerGetMe(options?: RawAxiosRequestConfig): AxiosPromise<PlayerMeOutputDTO>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<PlayerOutputWithRolesDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`, `MANAGE_ROLES`<br> OperationId: `PlayerControllerRemoveRole`\n     * @summary Remove role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {PlayerRoleAssignChangeDTO} [playerRoleAssignChangeDTO] PlayerRoleAssignChangeDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerRemoveRole(id: string, roleId: string, playerRoleAssignChangeDTO?: PlayerRoleAssignChangeDTO, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerControllerSearch`\n     * @summary Search\n     * @param {PlayerSearchInputDTO} [playerSearchInputDTO] PlayerSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerControllerSearch(playerSearchInputDTO?: PlayerSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<PlayerOutputArrayDTOAPI>;\n};\n/**\n * PlayerApi - object-oriented interface\n * @export\n * @class PlayerApi\n * @extends {BaseAPI}\n */\ndeclare class PlayerApi extends BaseAPI {\n    /**\n     * Create a new ban, creating a ban via the API will always make it takaro managed.   Required permissions: `MANAGE_PLAYERS`<br> OperationId: `BanControllerCreate`\n     * @summary Ban player\n     * @param {BanCreateDTO} [banCreateDTO] BanCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerApi\n     */\n    banControllerCreate(banCreateDTO?: BanCreateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<BanOutputDTOAPI, any>>;\n    /**\n     * Unban player. This will remove the ban from Takaro and the gameserver(s)   Required permissions: `MANAGE_PLAYERS`<br> OperationId: `BanControllerDelete`\n     * @summary Unban player\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerApi\n     */\n    banControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * Get a single ban   Required permissions: `READ_PLAYERS`<br> OperationId: `BanControllerGetOne`\n     * @summary Get a single ban\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerApi\n     */\n    banControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<BanOutputDTOAPI, any>>;\n    /**\n     * Search for bans   Required permissions: `READ_PLAYERS`<br> OperationId: `BanControllerSearch`\n     * @summary Search for bans\n     * @param {BanSearchInputDTO} [banSearchInputDTO] BanSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerApi\n     */\n    banControllerSearch(banSearchInputDTO?: BanSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<BanOutputArrayDTOAPI, any>>;\n    /**\n     * Update an existing ban, updating a ban via the API will always make it takaro managed.   Required permissions: `MANAGE_PLAYERS`<br> OperationId: `BanControllerUpdate`\n     * @summary Update ban\n     * @param {string} id\n     * @param {BanUpdateDTO} [banUpdateDTO] BanUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerApi\n     */\n    banControllerUpdate(id: string, banUpdateDTO?: BanUpdateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<BanOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`, `MANAGE_ROLES`<br> OperationId: `PlayerControllerAssignRole`\n     * @summary Assign role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {PlayerRoleAssignChangeDTO} [playerRoleAssignChangeDTO] PlayerRoleAssignChangeDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerApi\n     */\n    playerControllerAssignRole(id: string, roleId: string, playerRoleAssignChangeDTO?: PlayerRoleAssignChangeDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * Get the player that is currently authenticated. This is a low-privilege route, returning limited data.<br> OperationId: `PlayerControllerGetMe`\n     * @summary Get current player\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerApi\n     */\n    playerControllerGetMe(options?: RawAxiosRequestConfig): Promise<AxiosResponse<PlayerMeOutputDTO, any>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerApi\n     */\n    playerControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<PlayerOutputWithRolesDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`, `MANAGE_ROLES`<br> OperationId: `PlayerControllerRemoveRole`\n     * @summary Remove role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {PlayerRoleAssignChangeDTO} [playerRoleAssignChangeDTO] PlayerRoleAssignChangeDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerApi\n     */\n    playerControllerRemoveRole(id: string, roleId: string, playerRoleAssignChangeDTO?: PlayerRoleAssignChangeDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerControllerSearch`\n     * @summary Search\n     * @param {PlayerSearchInputDTO} [playerSearchInputDTO] PlayerSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerApi\n     */\n    playerControllerSearch(playerSearchInputDTO?: PlayerSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<PlayerOutputArrayDTOAPI, any>>;\n}\n/**\n * PlayerOnGameServerApi - axios parameter creator\n * @export\n */\ndeclare const PlayerOnGameServerApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerAddCurrency`\n     * @summary Add currency\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerAddCurrency: (gameServerId: string, playerId: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerDeductCurrency`\n     * @summary Deduct currency\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerDeductCurrency: (gameServerId: string, playerId: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerGetOne`\n     * @summary Get one\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerGetOne: (gameServerId: string, playerId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerSearch`\n     * @summary Search\n     * @param {PlayerOnGameServerSearchInputDTO} [playerOnGameServerSearchInputDTO] PlayerOnGameServerSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerSearch: (playerOnGameServerSearchInputDTO?: PlayerOnGameServerSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerSetCurrency`\n     * @summary Set currency\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerSetCurrency: (gameServerId: string, playerId: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerTransactBetweenPlayers`\n     * @summary Transact between players\n     * @param {string} gameServerId\n     * @param {string} sender\n     * @param {string} receiver\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerTransactBetweenPlayers: (gameServerId: string, sender: string, receiver: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * PlayerOnGameServerApi - functional programming interface\n * @export\n */\ndeclare const PlayerOnGameServerApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerAddCurrency`\n     * @summary Add currency\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerAddCurrency(gameServerId: string, playerId: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerOnGameserverOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerDeductCurrency`\n     * @summary Deduct currency\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerDeductCurrency(gameServerId: string, playerId: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerOnGameserverOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerGetOne`\n     * @summary Get one\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerGetOne(gameServerId: string, playerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerOnGameserverOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerSearch`\n     * @summary Search\n     * @param {PlayerOnGameServerSearchInputDTO} [playerOnGameServerSearchInputDTO] PlayerOnGameServerSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerSearch(playerOnGameServerSearchInputDTO?: PlayerOnGameServerSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerOnGameserverOutputArrayDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerSetCurrency`\n     * @summary Set currency\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerSetCurrency(gameServerId: string, playerId: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerOnGameserverOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerTransactBetweenPlayers`\n     * @summary Transact between players\n     * @param {string} gameServerId\n     * @param {string} sender\n     * @param {string} receiver\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerTransactBetweenPlayers(gameServerId: string, sender: string, receiver: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerOnGameserverOutputDTOAPI>>;\n};\n/**\n * PlayerOnGameServerApi - factory interface\n * @export\n */\ndeclare const PlayerOnGameServerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerAddCurrency`\n     * @summary Add currency\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerAddCurrency(gameServerId: string, playerId: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<PlayerOnGameserverOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerDeductCurrency`\n     * @summary Deduct currency\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerDeductCurrency(gameServerId: string, playerId: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<PlayerOnGameserverOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerGetOne`\n     * @summary Get one\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerGetOne(gameServerId: string, playerId: string, options?: RawAxiosRequestConfig): AxiosPromise<PlayerOnGameserverOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerSearch`\n     * @summary Search\n     * @param {PlayerOnGameServerSearchInputDTO} [playerOnGameServerSearchInputDTO] PlayerOnGameServerSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerSearch(playerOnGameServerSearchInputDTO?: PlayerOnGameServerSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<PlayerOnGameserverOutputArrayDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerSetCurrency`\n     * @summary Set currency\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerSetCurrency(gameServerId: string, playerId: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<PlayerOnGameserverOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerTransactBetweenPlayers`\n     * @summary Transact between players\n     * @param {string} gameServerId\n     * @param {string} sender\n     * @param {string} receiver\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    playerOnGameServerControllerTransactBetweenPlayers(gameServerId: string, sender: string, receiver: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<PlayerOnGameserverOutputDTOAPI>;\n};\n/**\n * PlayerOnGameServerApi - object-oriented interface\n * @export\n * @class PlayerOnGameServerApi\n * @extends {BaseAPI}\n */\ndeclare class PlayerOnGameServerApi extends BaseAPI {\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerAddCurrency`\n     * @summary Add currency\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerOnGameServerApi\n     */\n    playerOnGameServerControllerAddCurrency(gameServerId: string, playerId: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<PlayerOnGameserverOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerDeductCurrency`\n     * @summary Deduct currency\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerOnGameServerApi\n     */\n    playerOnGameServerControllerDeductCurrency(gameServerId: string, playerId: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<PlayerOnGameserverOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerGetOne`\n     * @summary Get one\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerOnGameServerApi\n     */\n    playerOnGameServerControllerGetOne(gameServerId: string, playerId: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<PlayerOnGameserverOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerSearch`\n     * @summary Search\n     * @param {PlayerOnGameServerSearchInputDTO} [playerOnGameServerSearchInputDTO] PlayerOnGameServerSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerOnGameServerApi\n     */\n    playerOnGameServerControllerSearch(playerOnGameServerSearchInputDTO?: PlayerOnGameServerSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<PlayerOnGameserverOutputArrayDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerSetCurrency`\n     * @summary Set currency\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerOnGameServerApi\n     */\n    playerOnGameServerControllerSetCurrency(gameServerId: string, playerId: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<PlayerOnGameserverOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_PLAYERS`<br> OperationId: `PlayerOnGameServerControllerTransactBetweenPlayers`\n     * @summary Transact between players\n     * @param {string} gameServerId\n     * @param {string} sender\n     * @param {string} receiver\n     * @param {PlayerOnGameServerSetCurrencyInputDTO} [playerOnGameServerSetCurrencyInputDTO] PlayerOnGameServerSetCurrencyInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PlayerOnGameServerApi\n     */\n    playerOnGameServerControllerTransactBetweenPlayers(gameServerId: string, sender: string, receiver: string, playerOnGameServerSetCurrencyInputDTO?: PlayerOnGameServerSetCurrencyInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<PlayerOnGameserverOutputDTOAPI, any>>;\n}\n/**\n * RoleApi - axios parameter creator\n * @export\n */\ndeclare const RoleApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_ROLES`<br> OperationId: `RoleControllerCreate`\n     * @summary Create\n     * @param {RoleCreateInputDTO} [roleCreateInputDTO] RoleCreateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerCreate: (roleCreateInputDTO?: RoleCreateInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_ROLES`<br> OperationId: `RoleControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `RoleControllerGetPermissions`\n     * @summary Get permissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerGetPermissions: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_ROLES`<br> OperationId: `RoleControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_ROLES`<br> OperationId: `RoleControllerSearch`\n     * @summary Search\n     * @param {RoleSearchInputDTO} [roleSearchInputDTO] RoleSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerSearch: (roleSearchInputDTO?: RoleSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_ROLES`<br> OperationId: `RoleControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {RoleUpdateInputDTO} [roleUpdateInputDTO] RoleUpdateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerUpdate: (id: string, roleUpdateInputDTO?: RoleUpdateInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * RoleApi - functional programming interface\n * @export\n */\ndeclare const RoleApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_ROLES`<br> OperationId: `RoleControllerCreate`\n     * @summary Create\n     * @param {RoleCreateInputDTO} [roleCreateInputDTO] RoleCreateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerCreate(roleCreateInputDTO?: RoleCreateInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_ROLES`<br> OperationId: `RoleControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleOutputDTOAPI>>;\n    /**\n     * <br> OperationId: `RoleControllerGetPermissions`\n     * @summary Get permissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerGetPermissions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_ROLES`<br> OperationId: `RoleControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     *    Required permissions: `READ_ROLES`<br> OperationId: `RoleControllerSearch`\n     * @summary Search\n     * @param {RoleSearchInputDTO} [roleSearchInputDTO] RoleSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerSearch(roleSearchInputDTO?: RoleSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleOutputArrayDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_ROLES`<br> OperationId: `RoleControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {RoleUpdateInputDTO} [roleUpdateInputDTO] RoleUpdateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerUpdate(id: string, roleUpdateInputDTO?: RoleUpdateInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleOutputDTOAPI>>;\n};\n/**\n * RoleApi - factory interface\n * @export\n */\ndeclare const RoleApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `MANAGE_ROLES`<br> OperationId: `RoleControllerCreate`\n     * @summary Create\n     * @param {RoleCreateInputDTO} [roleCreateInputDTO] RoleCreateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerCreate(roleCreateInputDTO?: RoleCreateInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<RoleOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_ROLES`<br> OperationId: `RoleControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<RoleOutputDTOAPI>;\n    /**\n     * <br> OperationId: `RoleControllerGetPermissions`\n     * @summary Get permissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerGetPermissions(options?: RawAxiosRequestConfig): AxiosPromise<PermissionOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_ROLES`<br> OperationId: `RoleControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     *    Required permissions: `READ_ROLES`<br> OperationId: `RoleControllerSearch`\n     * @summary Search\n     * @param {RoleSearchInputDTO} [roleSearchInputDTO] RoleSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerSearch(roleSearchInputDTO?: RoleSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<RoleOutputArrayDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_ROLES`<br> OperationId: `RoleControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {RoleUpdateInputDTO} [roleUpdateInputDTO] RoleUpdateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    roleControllerUpdate(id: string, roleUpdateInputDTO?: RoleUpdateInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<RoleOutputDTOAPI>;\n};\n/**\n * RoleApi - object-oriented interface\n * @export\n * @class RoleApi\n * @extends {BaseAPI}\n */\ndeclare class RoleApi extends BaseAPI {\n    /**\n     *    Required permissions: `MANAGE_ROLES`<br> OperationId: `RoleControllerCreate`\n     * @summary Create\n     * @param {RoleCreateInputDTO} [roleCreateInputDTO] RoleCreateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    roleControllerCreate(roleCreateInputDTO?: RoleCreateInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<RoleOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_ROLES`<br> OperationId: `RoleControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    roleControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<RoleOutputDTOAPI, any>>;\n    /**\n     * <br> OperationId: `RoleControllerGetPermissions`\n     * @summary Get permissions\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    roleControllerGetPermissions(options?: RawAxiosRequestConfig): Promise<AxiosResponse<PermissionOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_ROLES`<br> OperationId: `RoleControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    roleControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     *    Required permissions: `READ_ROLES`<br> OperationId: `RoleControllerSearch`\n     * @summary Search\n     * @param {RoleSearchInputDTO} [roleSearchInputDTO] RoleSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    roleControllerSearch(roleSearchInputDTO?: RoleSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<RoleOutputArrayDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_ROLES`<br> OperationId: `RoleControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {RoleUpdateInputDTO} [roleUpdateInputDTO] RoleUpdateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    roleControllerUpdate(id: string, roleUpdateInputDTO?: RoleUpdateInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<RoleOutputDTOAPI, any>>;\n}\n/**\n * SettingsApi - axios parameter creator\n * @export\n */\ndeclare const SettingsApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_SETTINGS`<br> OperationId: `SettingsControllerDelete`\n     * @summary Delete\n     * @param {string} key\n     * @param {string} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    settingsControllerDelete: (key: string, gameServerId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `SettingsControllerGet`\n     * @summary Get\n     * @param {Array<SettingsControllerGetKeysEnum>} [keys]\n     * @param {string} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    settingsControllerGet: (keys?: Array<SettingsControllerGetKeysEnum>, gameServerId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `SettingsControllerGetOne`\n     * @summary Get one\n     * @param {string} key\n     * @param {string} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    settingsControllerGetOne: (key: string, gameServerId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_SETTINGS`<br> OperationId: `SettingsControllerSet`\n     * @summary Set\n     * @param {string} key\n     * @param {SettingsSetDTO} [settingsSetDTO] SettingsSetDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    settingsControllerSet: (key: string, settingsSetDTO?: SettingsSetDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * SettingsApi - functional programming interface\n * @export\n */\ndeclare const SettingsApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_SETTINGS`<br> OperationId: `SettingsControllerDelete`\n     * @summary Delete\n     * @param {string} key\n     * @param {string} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    settingsControllerDelete(key: string, gameServerId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * <br> OperationId: `SettingsControllerGet`\n     * @summary Get\n     * @param {Array<SettingsControllerGetKeysEnum>} [keys]\n     * @param {string} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    settingsControllerGet(keys?: Array<SettingsControllerGetKeysEnum>, gameServerId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsOutputArrayDTOAPI>>;\n    /**\n     * <br> OperationId: `SettingsControllerGetOne`\n     * @summary Get one\n     * @param {string} key\n     * @param {string} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    settingsControllerGetOne(key: string, gameServerId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_SETTINGS`<br> OperationId: `SettingsControllerSet`\n     * @summary Set\n     * @param {string} key\n     * @param {SettingsSetDTO} [settingsSetDTO] SettingsSetDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    settingsControllerSet(key: string, settingsSetDTO?: SettingsSetDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsOutputDTOAPI>>;\n};\n/**\n * SettingsApi - factory interface\n * @export\n */\ndeclare const SettingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `MANAGE_SETTINGS`<br> OperationId: `SettingsControllerDelete`\n     * @summary Delete\n     * @param {string} key\n     * @param {string} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    settingsControllerDelete(key: string, gameServerId?: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * <br> OperationId: `SettingsControllerGet`\n     * @summary Get\n     * @param {Array<SettingsControllerGetKeysEnum>} [keys]\n     * @param {string} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    settingsControllerGet(keys?: Array<SettingsControllerGetKeysEnum>, gameServerId?: string, options?: RawAxiosRequestConfig): AxiosPromise<SettingsOutputArrayDTOAPI>;\n    /**\n     * <br> OperationId: `SettingsControllerGetOne`\n     * @summary Get one\n     * @param {string} key\n     * @param {string} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    settingsControllerGetOne(key: string, gameServerId?: string, options?: RawAxiosRequestConfig): AxiosPromise<SettingsOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_SETTINGS`<br> OperationId: `SettingsControllerSet`\n     * @summary Set\n     * @param {string} key\n     * @param {SettingsSetDTO} [settingsSetDTO] SettingsSetDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    settingsControllerSet(key: string, settingsSetDTO?: SettingsSetDTO, options?: RawAxiosRequestConfig): AxiosPromise<SettingsOutputDTOAPI>;\n};\n/**\n * SettingsApi - object-oriented interface\n * @export\n * @class SettingsApi\n * @extends {BaseAPI}\n */\ndeclare class SettingsApi extends BaseAPI {\n    /**\n     *    Required permissions: `MANAGE_SETTINGS`<br> OperationId: `SettingsControllerDelete`\n     * @summary Delete\n     * @param {string} key\n     * @param {string} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    settingsControllerDelete(key: string, gameServerId?: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * <br> OperationId: `SettingsControllerGet`\n     * @summary Get\n     * @param {Array<SettingsControllerGetKeysEnum>} [keys]\n     * @param {string} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    settingsControllerGet(keys?: Array<SettingsControllerGetKeysEnum>, gameServerId?: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<SettingsOutputArrayDTOAPI, any>>;\n    /**\n     * <br> OperationId: `SettingsControllerGetOne`\n     * @summary Get one\n     * @param {string} key\n     * @param {string} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    settingsControllerGetOne(key: string, gameServerId?: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<SettingsOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_SETTINGS`<br> OperationId: `SettingsControllerSet`\n     * @summary Set\n     * @param {string} key\n     * @param {SettingsSetDTO} [settingsSetDTO] SettingsSetDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettingsApi\n     */\n    settingsControllerSet(key: string, settingsSetDTO?: SettingsSetDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<SettingsOutputDTOAPI, any>>;\n}\n/**\n * @export\n */\ndeclare const SettingsControllerGetKeysEnum: {\n    readonly CommandPrefix: \"commandPrefix\";\n    readonly ServerChatName: \"serverChatName\";\n    readonly EconomyEnabled: \"economyEnabled\";\n    readonly CurrencyName: \"currencyName\";\n    readonly DeveloperMode: \"developerMode\";\n};\ntype SettingsControllerGetKeysEnum = (typeof SettingsControllerGetKeysEnum)[keyof typeof SettingsControllerGetKeysEnum];\n/**\n * ShopListingApi - axios parameter creator\n * @export\n */\ndeclare const ShopListingApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerCreate`\n     * @summary Create\n     * @param {ShopListingCreateDTO} [shopListingCreateDTO] ShopListingCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerCreate: (shopListingCreateDTO?: ShopListingCreateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerDelete`\n     * @summary Delete\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `ShopListingControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerImportListings`\n     * @summary Import listings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerImportListings: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `ShopListingControllerSearch`\n     * @summary Search\n     * @param {ShopListingSearchInputDTO} [shopListingSearchInputDTO] ShopListingSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerSearch: (shopListingSearchInputDTO?: ShopListingSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {ShopListingUpdateDTO} [shopListingUpdateDTO] ShopListingUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerUpdate: (id: string, shopListingUpdateDTO?: ShopListingUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * ShopListingApi - functional programming interface\n * @export\n */\ndeclare const ShopListingApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerCreate`\n     * @summary Create\n     * @param {ShopListingCreateDTO} [shopListingCreateDTO] ShopListingCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerCreate(shopListingCreateDTO?: ShopListingCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopListingOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerDelete`\n     * @summary Delete\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * <br> OperationId: `ShopListingControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopListingOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerImportListings`\n     * @summary Import listings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerImportListings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * <br> OperationId: `ShopListingControllerSearch`\n     * @summary Search\n     * @param {ShopListingSearchInputDTO} [shopListingSearchInputDTO] ShopListingSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerSearch(shopListingSearchInputDTO?: ShopListingSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopListingOutputArrayDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {ShopListingUpdateDTO} [shopListingUpdateDTO] ShopListingUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerUpdate(id: string, shopListingUpdateDTO?: ShopListingUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopListingOutputDTOAPI>>;\n};\n/**\n * ShopListingApi - factory interface\n * @export\n */\ndeclare const ShopListingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerCreate`\n     * @summary Create\n     * @param {ShopListingCreateDTO} [shopListingCreateDTO] ShopListingCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerCreate(shopListingCreateDTO?: ShopListingCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ShopListingOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerDelete`\n     * @summary Delete\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * <br> OperationId: `ShopListingControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ShopListingOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerImportListings`\n     * @summary Import listings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerImportListings(options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * <br> OperationId: `ShopListingControllerSearch`\n     * @summary Search\n     * @param {ShopListingSearchInputDTO} [shopListingSearchInputDTO] ShopListingSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerSearch(shopListingSearchInputDTO?: ShopListingSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<ShopListingOutputArrayDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {ShopListingUpdateDTO} [shopListingUpdateDTO] ShopListingUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopListingControllerUpdate(id: string, shopListingUpdateDTO?: ShopListingUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ShopListingOutputDTOAPI>;\n};\n/**\n * ShopListingApi - object-oriented interface\n * @export\n * @class ShopListingApi\n * @extends {BaseAPI}\n */\ndeclare class ShopListingApi extends BaseAPI {\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerCreate`\n     * @summary Create\n     * @param {ShopListingCreateDTO} [shopListingCreateDTO] ShopListingCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ShopListingApi\n     */\n    shopListingControllerCreate(shopListingCreateDTO?: ShopListingCreateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ShopListingOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerDelete`\n     * @summary Delete\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ShopListingApi\n     */\n    shopListingControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * <br> OperationId: `ShopListingControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ShopListingApi\n     */\n    shopListingControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ShopListingOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerImportListings`\n     * @summary Import listings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ShopListingApi\n     */\n    shopListingControllerImportListings(options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * <br> OperationId: `ShopListingControllerSearch`\n     * @summary Search\n     * @param {ShopListingSearchInputDTO} [shopListingSearchInputDTO] ShopListingSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ShopListingApi\n     */\n    shopListingControllerSearch(shopListingSearchInputDTO?: ShopListingSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ShopListingOutputArrayDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_SHOP_LISTINGS`<br> OperationId: `ShopListingControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {ShopListingUpdateDTO} [shopListingUpdateDTO] ShopListingUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ShopListingApi\n     */\n    shopListingControllerUpdate(id: string, shopListingUpdateDTO?: ShopListingUpdateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ShopListingOutputDTOAPI, any>>;\n}\n/**\n * ShopOrderApi - axios parameter creator\n * @export\n */\ndeclare const ShopOrderApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     * <br> OperationId: `ShopOrderControllerCancel`\n     * @summary Cancel\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerCancel: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Claiming an order will mark it as completed and give the user the item in-game<br> OperationId: `ShopOrderControllerClaim`\n     * @summary Claim an order\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerClaim: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `ShopOrderControllerCreate`\n     * @summary Create\n     * @param {ShopOrderCreateDTO} [shopOrderCreateDTO] ShopOrderCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerCreate: (shopOrderCreateDTO?: ShopOrderCreateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Get an order by its ID. This endpoint only returns orders that belong to the caller. When the caller has permission to view all orders, they can get any order.<br> OperationId: `ShopOrderControllerGetOne`\n     * @summary Get order by ID\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Search for orders. By default, this endpoint only returns your own orders. When the caller has permission to view all orders, they can search for all orders.<br> OperationId: `ShopOrderControllerSearch`\n     * @summary Search orders\n     * @param {ShopOrderSearchInputDTO} [shopOrderSearchInputDTO] ShopOrderSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerSearch: (shopOrderSearchInputDTO?: ShopOrderSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * ShopOrderApi - functional programming interface\n * @export\n */\ndeclare const ShopOrderApiFp: (configuration?: Configuration) => {\n    /**\n     * <br> OperationId: `ShopOrderControllerCancel`\n     * @summary Cancel\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerCancel(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopOrderOutputDTOAPI>>;\n    /**\n     * Claiming an order will mark it as completed and give the user the item in-game<br> OperationId: `ShopOrderControllerClaim`\n     * @summary Claim an order\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerClaim(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopOrderOutputDTOAPI>>;\n    /**\n     * <br> OperationId: `ShopOrderControllerCreate`\n     * @summary Create\n     * @param {ShopOrderCreateDTO} [shopOrderCreateDTO] ShopOrderCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerCreate(shopOrderCreateDTO?: ShopOrderCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopOrderOutputDTOAPI>>;\n    /**\n     * Get an order by its ID. This endpoint only returns orders that belong to the caller. When the caller has permission to view all orders, they can get any order.<br> OperationId: `ShopOrderControllerGetOne`\n     * @summary Get order by ID\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopOrderOutputDTOAPI>>;\n    /**\n     * Search for orders. By default, this endpoint only returns your own orders. When the caller has permission to view all orders, they can search for all orders.<br> OperationId: `ShopOrderControllerSearch`\n     * @summary Search orders\n     * @param {ShopOrderSearchInputDTO} [shopOrderSearchInputDTO] ShopOrderSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerSearch(shopOrderSearchInputDTO?: ShopOrderSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopOrderOutputArrayDTOAPI>>;\n};\n/**\n * ShopOrderApi - factory interface\n * @export\n */\ndeclare const ShopOrderApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     * <br> OperationId: `ShopOrderControllerCancel`\n     * @summary Cancel\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerCancel(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ShopOrderOutputDTOAPI>;\n    /**\n     * Claiming an order will mark it as completed and give the user the item in-game<br> OperationId: `ShopOrderControllerClaim`\n     * @summary Claim an order\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerClaim(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ShopOrderOutputDTOAPI>;\n    /**\n     * <br> OperationId: `ShopOrderControllerCreate`\n     * @summary Create\n     * @param {ShopOrderCreateDTO} [shopOrderCreateDTO] ShopOrderCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerCreate(shopOrderCreateDTO?: ShopOrderCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<ShopOrderOutputDTOAPI>;\n    /**\n     * Get an order by its ID. This endpoint only returns orders that belong to the caller. When the caller has permission to view all orders, they can get any order.<br> OperationId: `ShopOrderControllerGetOne`\n     * @summary Get order by ID\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ShopOrderOutputDTOAPI>;\n    /**\n     * Search for orders. By default, this endpoint only returns your own orders. When the caller has permission to view all orders, they can search for all orders.<br> OperationId: `ShopOrderControllerSearch`\n     * @summary Search orders\n     * @param {ShopOrderSearchInputDTO} [shopOrderSearchInputDTO] ShopOrderSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    shopOrderControllerSearch(shopOrderSearchInputDTO?: ShopOrderSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<ShopOrderOutputArrayDTOAPI>;\n};\n/**\n * ShopOrderApi - object-oriented interface\n * @export\n * @class ShopOrderApi\n * @extends {BaseAPI}\n */\ndeclare class ShopOrderApi extends BaseAPI {\n    /**\n     * <br> OperationId: `ShopOrderControllerCancel`\n     * @summary Cancel\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ShopOrderApi\n     */\n    shopOrderControllerCancel(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ShopOrderOutputDTOAPI, any>>;\n    /**\n     * Claiming an order will mark it as completed and give the user the item in-game<br> OperationId: `ShopOrderControllerClaim`\n     * @summary Claim an order\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ShopOrderApi\n     */\n    shopOrderControllerClaim(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ShopOrderOutputDTOAPI, any>>;\n    /**\n     * <br> OperationId: `ShopOrderControllerCreate`\n     * @summary Create\n     * @param {ShopOrderCreateDTO} [shopOrderCreateDTO] ShopOrderCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ShopOrderApi\n     */\n    shopOrderControllerCreate(shopOrderCreateDTO?: ShopOrderCreateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ShopOrderOutputDTOAPI, any>>;\n    /**\n     * Get an order by its ID. This endpoint only returns orders that belong to the caller. When the caller has permission to view all orders, they can get any order.<br> OperationId: `ShopOrderControllerGetOne`\n     * @summary Get order by ID\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ShopOrderApi\n     */\n    shopOrderControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ShopOrderOutputDTOAPI, any>>;\n    /**\n     * Search for orders. By default, this endpoint only returns your own orders. When the caller has permission to view all orders, they can search for all orders.<br> OperationId: `ShopOrderControllerSearch`\n     * @summary Search orders\n     * @param {ShopOrderSearchInputDTO} [shopOrderSearchInputDTO] ShopOrderSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ShopOrderApi\n     */\n    shopOrderControllerSearch(shopOrderSearchInputDTO?: ShopOrderSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<ShopOrderOutputArrayDTOAPI, any>>;\n}\n/**\n * StatsApi - axios parameter creator\n * @export\n */\ndeclare const StatsApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetActivityStats`\n     * @summary Get activity stats\n     * @param {StatsControllerGetActivityStatsTimeTypeEnum} timeType\n     * @param {StatsControllerGetActivityStatsDataTypeEnum} dataType\n     * @param {string} [gameServerId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetActivityStats: (timeType: StatsControllerGetActivityStatsTimeTypeEnum, dataType: StatsControllerGetActivityStatsDataTypeEnum, gameServerId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Calculates how many players are from each country. Returns a count per country (ISO3166).   Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetCountryStats`\n     * @summary Get statistics about the countries of the players\n     * @param {Array<string>} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetCountryStats: (gameServerId?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetCurrencyStats`\n     * @summary Get currency stats\n     * @param {string} gameServerId\n     * @param {string} [playerId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetCurrencyStats: (gameServerId: string, playerId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Calculates how many times an event type has occured over `bucketStep` time. Supports different filters and can return multiple series at a time.   Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetEventsCount`\n     * @summary Get event count over time\n     * @param {StatsControllerGetEventsCountEventNameEnum} eventName\n     * @param {StatsControllerGetEventsCountBucketStepEnum} bucketStep\n     * @param {Array<StatsControllerGetEventsCountSumByEnum>} [sumBy]\n     * @param {string} [gameServerId]\n     * @param {string} [moduleId]\n     * @param {string} [playerId]\n     * @param {string} [userId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetEventsCount: (eventName: StatsControllerGetEventsCountEventNameEnum, bucketStep: StatsControllerGetEventsCountBucketStepEnum, sumBy?: Array<StatsControllerGetEventsCountSumByEnum>, gameServerId?: string, moduleId?: string, playerId?: string, userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * The roundtrip time for reachability tests between Takaro and the game server<br> OperationId: `StatsControllerGetLatencyStats`\n     * @summary Get latency stats\n     * @param {string} gameServerId\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetLatencyStats: (gameServerId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetPingStats`\n     * @summary Get ping stats\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetPingStats: (gameServerId: string, playerId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetPlayerOnlineStats`\n     * @summary Get player online stats\n     * @param {string} [gameServerId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetPlayerOnlineStats: (gameServerId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * StatsApi - functional programming interface\n * @export\n */\ndeclare const StatsApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetActivityStats`\n     * @summary Get activity stats\n     * @param {StatsControllerGetActivityStatsTimeTypeEnum} timeType\n     * @param {StatsControllerGetActivityStatsDataTypeEnum} dataType\n     * @param {string} [gameServerId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetActivityStats(timeType: StatsControllerGetActivityStatsTimeTypeEnum, dataType: StatsControllerGetActivityStatsDataTypeEnum, gameServerId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsOutputDTOAPI>>;\n    /**\n     * Calculates how many players are from each country. Returns a count per country (ISO3166).   Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetCountryStats`\n     * @summary Get statistics about the countries of the players\n     * @param {Array<string>} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetCountryStats(gameServerId?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetCurrencyStats`\n     * @summary Get currency stats\n     * @param {string} gameServerId\n     * @param {string} [playerId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetCurrencyStats(gameServerId: string, playerId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsOutputDTOAPI>>;\n    /**\n     * Calculates how many times an event type has occured over `bucketStep` time. Supports different filters and can return multiple series at a time.   Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetEventsCount`\n     * @summary Get event count over time\n     * @param {StatsControllerGetEventsCountEventNameEnum} eventName\n     * @param {StatsControllerGetEventsCountBucketStepEnum} bucketStep\n     * @param {Array<StatsControllerGetEventsCountSumByEnum>} [sumBy]\n     * @param {string} [gameServerId]\n     * @param {string} [moduleId]\n     * @param {string} [playerId]\n     * @param {string} [userId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetEventsCount(eventName: StatsControllerGetEventsCountEventNameEnum, bucketStep: StatsControllerGetEventsCountBucketStepEnum, sumBy?: Array<StatsControllerGetEventsCountSumByEnum>, gameServerId?: string, moduleId?: string, playerId?: string, userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsOutputDTOAPI>>;\n    /**\n     * The roundtrip time for reachability tests between Takaro and the game server<br> OperationId: `StatsControllerGetLatencyStats`\n     * @summary Get latency stats\n     * @param {string} gameServerId\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetLatencyStats(gameServerId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetPingStats`\n     * @summary Get ping stats\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetPingStats(gameServerId: string, playerId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetPlayerOnlineStats`\n     * @summary Get player online stats\n     * @param {string} [gameServerId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetPlayerOnlineStats(gameServerId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsOutputDTOAPI>>;\n};\n/**\n * StatsApi - factory interface\n * @export\n */\ndeclare const StatsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetActivityStats`\n     * @summary Get activity stats\n     * @param {StatsControllerGetActivityStatsTimeTypeEnum} timeType\n     * @param {StatsControllerGetActivityStatsDataTypeEnum} dataType\n     * @param {string} [gameServerId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetActivityStats(timeType: StatsControllerGetActivityStatsTimeTypeEnum, dataType: StatsControllerGetActivityStatsDataTypeEnum, gameServerId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<StatsOutputDTOAPI>;\n    /**\n     * Calculates how many players are from each country. Returns a count per country (ISO3166).   Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetCountryStats`\n     * @summary Get statistics about the countries of the players\n     * @param {Array<string>} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetCountryStats(gameServerId?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<StatsOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetCurrencyStats`\n     * @summary Get currency stats\n     * @param {string} gameServerId\n     * @param {string} [playerId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetCurrencyStats(gameServerId: string, playerId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<StatsOutputDTOAPI>;\n    /**\n     * Calculates how many times an event type has occured over `bucketStep` time. Supports different filters and can return multiple series at a time.   Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetEventsCount`\n     * @summary Get event count over time\n     * @param {StatsControllerGetEventsCountEventNameEnum} eventName\n     * @param {StatsControllerGetEventsCountBucketStepEnum} bucketStep\n     * @param {Array<StatsControllerGetEventsCountSumByEnum>} [sumBy]\n     * @param {string} [gameServerId]\n     * @param {string} [moduleId]\n     * @param {string} [playerId]\n     * @param {string} [userId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetEventsCount(eventName: StatsControllerGetEventsCountEventNameEnum, bucketStep: StatsControllerGetEventsCountBucketStepEnum, sumBy?: Array<StatsControllerGetEventsCountSumByEnum>, gameServerId?: string, moduleId?: string, playerId?: string, userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<StatsOutputDTOAPI>;\n    /**\n     * The roundtrip time for reachability tests between Takaro and the game server<br> OperationId: `StatsControllerGetLatencyStats`\n     * @summary Get latency stats\n     * @param {string} gameServerId\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetLatencyStats(gameServerId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<StatsOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetPingStats`\n     * @summary Get ping stats\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetPingStats(gameServerId: string, playerId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<StatsOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetPlayerOnlineStats`\n     * @summary Get player online stats\n     * @param {string} [gameServerId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    statsControllerGetPlayerOnlineStats(gameServerId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<StatsOutputDTOAPI>;\n};\n/**\n * StatsApi - object-oriented interface\n * @export\n * @class StatsApi\n * @extends {BaseAPI}\n */\ndeclare class StatsApi extends BaseAPI {\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetActivityStats`\n     * @summary Get activity stats\n     * @param {StatsControllerGetActivityStatsTimeTypeEnum} timeType\n     * @param {StatsControllerGetActivityStatsDataTypeEnum} dataType\n     * @param {string} [gameServerId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StatsApi\n     */\n    statsControllerGetActivityStats(timeType: StatsControllerGetActivityStatsTimeTypeEnum, dataType: StatsControllerGetActivityStatsDataTypeEnum, gameServerId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<StatsOutputDTOAPI, any>>;\n    /**\n     * Calculates how many players are from each country. Returns a count per country (ISO3166).   Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetCountryStats`\n     * @summary Get statistics about the countries of the players\n     * @param {Array<string>} [gameServerId]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StatsApi\n     */\n    statsControllerGetCountryStats(gameServerId?: Array<string>, options?: RawAxiosRequestConfig): Promise<AxiosResponse<StatsOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetCurrencyStats`\n     * @summary Get currency stats\n     * @param {string} gameServerId\n     * @param {string} [playerId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StatsApi\n     */\n    statsControllerGetCurrencyStats(gameServerId: string, playerId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<StatsOutputDTOAPI, any>>;\n    /**\n     * Calculates how many times an event type has occured over `bucketStep` time. Supports different filters and can return multiple series at a time.   Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetEventsCount`\n     * @summary Get event count over time\n     * @param {StatsControllerGetEventsCountEventNameEnum} eventName\n     * @param {StatsControllerGetEventsCountBucketStepEnum} bucketStep\n     * @param {Array<StatsControllerGetEventsCountSumByEnum>} [sumBy]\n     * @param {string} [gameServerId]\n     * @param {string} [moduleId]\n     * @param {string} [playerId]\n     * @param {string} [userId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StatsApi\n     */\n    statsControllerGetEventsCount(eventName: StatsControllerGetEventsCountEventNameEnum, bucketStep: StatsControllerGetEventsCountBucketStepEnum, sumBy?: Array<StatsControllerGetEventsCountSumByEnum>, gameServerId?: string, moduleId?: string, playerId?: string, userId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<StatsOutputDTOAPI, any>>;\n    /**\n     * The roundtrip time for reachability tests between Takaro and the game server<br> OperationId: `StatsControllerGetLatencyStats`\n     * @summary Get latency stats\n     * @param {string} gameServerId\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StatsApi\n     */\n    statsControllerGetLatencyStats(gameServerId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<StatsOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetPingStats`\n     * @summary Get ping stats\n     * @param {string} gameServerId\n     * @param {string} playerId\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StatsApi\n     */\n    statsControllerGetPingStats(gameServerId: string, playerId: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<StatsOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_PLAYERS`<br> OperationId: `StatsControllerGetPlayerOnlineStats`\n     * @summary Get player online stats\n     * @param {string} [gameServerId]\n     * @param {string} [startDate]\n     * @param {string} [endDate]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StatsApi\n     */\n    statsControllerGetPlayerOnlineStats(gameServerId?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<StatsOutputDTOAPI, any>>;\n}\n/**\n * @export\n */\ndeclare const StatsControllerGetActivityStatsTimeTypeEnum: {\n    readonly Daily: \"daily\";\n    readonly Weekly: \"weekly\";\n    readonly Monthly: \"monthly\";\n};\ntype StatsControllerGetActivityStatsTimeTypeEnum = (typeof StatsControllerGetActivityStatsTimeTypeEnum)[keyof typeof StatsControllerGetActivityStatsTimeTypeEnum];\n/**\n * @export\n */\ndeclare const StatsControllerGetActivityStatsDataTypeEnum: {\n    readonly Users: \"users\";\n    readonly Players: \"players\";\n};\ntype StatsControllerGetActivityStatsDataTypeEnum = (typeof StatsControllerGetActivityStatsDataTypeEnum)[keyof typeof StatsControllerGetActivityStatsDataTypeEnum];\n/**\n * @export\n */\ndeclare const StatsControllerGetEventsCountEventNameEnum: {\n    readonly RoleAssigned: \"role-assigned\";\n    readonly RoleRemoved: \"role-removed\";\n    readonly RoleCreated: \"role-created\";\n    readonly RoleUpdated: \"role-updated\";\n    readonly RoleDeleted: \"role-deleted\";\n    readonly CommandExecuted: \"command-executed\";\n    readonly HookExecuted: \"hook-executed\";\n    readonly CronjobExecuted: \"cronjob-executed\";\n    readonly CurrencyAdded: \"currency-added\";\n    readonly CurrencyDeducted: \"currency-deducted\";\n    readonly SettingsSet: \"settings-set\";\n    readonly PlayerNewIpDetected: \"player-new-ip-detected\";\n    readonly ServerStatusChanged: \"server-status-changed\";\n    readonly ModuleCreated: \"module-created\";\n    readonly ModuleUpdated: \"module-updated\";\n    readonly ModuleDeleted: \"module-deleted\";\n    readonly ModuleInstalled: \"module-installed\";\n    readonly ModuleUninstalled: \"module-uninstalled\";\n    readonly PlayerCreated: \"player-created\";\n    readonly ShopListingCreated: \"shop-listing-created\";\n    readonly ShopListingUpdated: \"shop-listing-updated\";\n    readonly ShopListingDeleted: \"shop-listing-deleted\";\n    readonly ShopOrderCreated: \"shop-order-created\";\n    readonly ShopOrderStatusChanged: \"shop-order-status-changed\";\n    readonly PlayerLinked: \"player-linked\";\n    readonly GameserverCreated: \"gameserver-created\";\n    readonly GameserverUpdated: \"gameserver-updated\";\n    readonly GameserverDeleted: \"gameserver-deleted\";\n    readonly PlayerConnected: \"player-connected\";\n    readonly PlayerDisconnected: \"player-disconnected\";\n    readonly ChatMessage: \"chat-message\";\n    readonly PlayerDeath: \"player-death\";\n    readonly EntityKilled: \"entity-killed\";\n};\ntype StatsControllerGetEventsCountEventNameEnum = (typeof StatsControllerGetEventsCountEventNameEnum)[keyof typeof StatsControllerGetEventsCountEventNameEnum];\n/**\n * @export\n */\ndeclare const StatsControllerGetEventsCountBucketStepEnum: {\n    readonly _5m: \"5m\";\n    readonly _30m: \"30m\";\n    readonly _1h: \"1h\";\n    readonly _6h: \"6h\";\n    readonly _12h: \"12h\";\n    readonly _24h: \"24h\";\n};\ntype StatsControllerGetEventsCountBucketStepEnum = (typeof StatsControllerGetEventsCountBucketStepEnum)[keyof typeof StatsControllerGetEventsCountBucketStepEnum];\n/**\n * @export\n */\ndeclare const StatsControllerGetEventsCountSumByEnum: {\n    readonly Player: \"player\";\n    readonly Module: \"module\";\n    readonly User: \"user\";\n    readonly Gameserver: \"gameserver\";\n};\ntype StatsControllerGetEventsCountSumByEnum = (typeof StatsControllerGetEventsCountSumByEnum)[keyof typeof StatsControllerGetEventsCountSumByEnum];\n/**\n * UserApi - axios parameter creator\n * @export\n */\ndeclare const UserApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_USERS`, `MANAGE_ROLES`<br> OperationId: `UserControllerAssignRole`\n     * @summary Assign role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {UserRoleAssignChangeDTO} [userRoleAssignChangeDTO] UserRoleAssignChangeDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerAssignRole: (id: string, roleId: string, userRoleAssignChangeDTO?: UserRoleAssignChangeDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerCreate`\n     * @summary Create\n     * @param {UserCreateInputDTO} [userCreateInputDTO] UserCreateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerCreate: (userCreateInputDTO?: UserCreateInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Unset the selected domain for the user, this will clear the domain cookie. On the next request, the backend will set this again.<br> OperationId: `UserControllerDeleteSelectedDomainCookie`\n     * @summary Unset the selected domain for the user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerDeleteSelectedDomainCookie: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_USERS`<br> OperationId: `UserControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerGetOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerInvite`\n     * @summary Invite\n     * @param {InviteCreateDTO} [inviteCreateDTO] InviteCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerInvite: (inviteCreateDTO?: InviteCreateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Link your player profile to Takaro, allowing web access for things like shop and stats. To get the code, use the /link command in the game.<br> OperationId: `UserControllerLinkPlayerProfile`\n     * @summary Link player profile\n     * @param {LinkPlayerUnauthedInputDTO} [linkPlayerUnauthedInputDTO] LinkPlayerUnauthedInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerLinkPlayerProfile: (linkPlayerUnauthedInputDTO?: LinkPlayerUnauthedInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `UserControllerLogin`\n     * @summary Login\n     * @param {LoginDTO} [loginDTO] LoginDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerLogin: (loginDTO?: LoginDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * <br> OperationId: `UserControllerLogout`\n     * @summary Logout\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerLogout: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * Get the current user and the domains that the user has access to. Note that you can only make requests in the scope of a single domain. In order to switch the domain, you need to use the domain selection endpoints<br> OperationId: `UserControllerMe`\n     * @summary Get the current logged in user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerMe: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerRemove: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_USERS`, `MANAGE_ROLES`<br> OperationId: `UserControllerRemoveRole`\n     * @summary Remove role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerRemoveRole: (id: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_USERS`<br> OperationId: `UserControllerSearch`\n     * @summary Search\n     * @param {UserSearchInputDTO} [userSearchInputDTO] UserSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerSearch: (userSearchInputDTO?: UserSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     * One user can have multiple domains, this endpoint is a helper to set the selected domain for the user<br> OperationId: `UserControllerSetSelectedDomain`\n     * @summary Set the selected domain for the user\n     * @param {string} domainId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerSetSelectedDomain: (domainId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {UserUpdateDTO} [userUpdateDTO] UserUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerUpdate: (id: string, userUpdateDTO?: UserUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * UserApi - functional programming interface\n * @export\n */\ndeclare const UserApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_USERS`, `MANAGE_ROLES`<br> OperationId: `UserControllerAssignRole`\n     * @summary Assign role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {UserRoleAssignChangeDTO} [userRoleAssignChangeDTO] UserRoleAssignChangeDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerAssignRole(id: string, roleId: string, userRoleAssignChangeDTO?: UserRoleAssignChangeDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerCreate`\n     * @summary Create\n     * @param {UserCreateInputDTO} [userCreateInputDTO] UserCreateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerCreate(userCreateInputDTO?: UserCreateInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutputDTOAPI>>;\n    /**\n     * Unset the selected domain for the user, this will clear the domain cookie. On the next request, the backend will set this again.<br> OperationId: `UserControllerDeleteSelectedDomainCookie`\n     * @summary Unset the selected domain for the user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerDeleteSelectedDomainCookie(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     *    Required permissions: `READ_USERS`<br> OperationId: `UserControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerInvite`\n     * @summary Invite\n     * @param {InviteCreateDTO} [inviteCreateDTO] InviteCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerInvite(inviteCreateDTO?: InviteCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutputDTOAPI>>;\n    /**\n     * Link your player profile to Takaro, allowing web access for things like shop and stats. To get the code, use the /link command in the game.<br> OperationId: `UserControllerLinkPlayerProfile`\n     * @summary Link player profile\n     * @param {LinkPlayerUnauthedInputDTO} [linkPlayerUnauthedInputDTO] LinkPlayerUnauthedInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerLinkPlayerProfile(linkPlayerUnauthedInputDTO?: LinkPlayerUnauthedInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     * <br> OperationId: `UserControllerLogin`\n     * @summary Login\n     * @param {LoginDTO} [loginDTO] LoginDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerLogin(loginDTO?: LoginDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginOutputDTOAPI>>;\n    /**\n     * <br> OperationId: `UserControllerLogout`\n     * @summary Logout\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerLogout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     * Get the current user and the domains that the user has access to. Note that you can only make requests in the scope of a single domain. In order to switch the domain, you need to use the domain selection endpoints<br> OperationId: `UserControllerMe`\n     * @summary Get the current logged in user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerMe(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeOutoutDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     *    Required permissions: `MANAGE_USERS`, `MANAGE_ROLES`<br> OperationId: `UserControllerRemoveRole`\n     * @summary Remove role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerRemoveRole(id: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     *    Required permissions: `READ_USERS`<br> OperationId: `UserControllerSearch`\n     * @summary Search\n     * @param {UserSearchInputDTO} [userSearchInputDTO] UserSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerSearch(userSearchInputDTO?: UserSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutputArrayDTOAPI>>;\n    /**\n     * One user can have multiple domains, this endpoint is a helper to set the selected domain for the user<br> OperationId: `UserControllerSetSelectedDomain`\n     * @summary Set the selected domain for the user\n     * @param {string} domainId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerSetSelectedDomain(domainId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {UserUpdateDTO} [userUpdateDTO] UserUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerUpdate(id: string, userUpdateDTO?: UserUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutputDTOAPI>>;\n};\n/**\n * UserApi - factory interface\n * @export\n */\ndeclare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `MANAGE_USERS`, `MANAGE_ROLES`<br> OperationId: `UserControllerAssignRole`\n     * @summary Assign role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {UserRoleAssignChangeDTO} [userRoleAssignChangeDTO] UserRoleAssignChangeDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerAssignRole(id: string, roleId: string, userRoleAssignChangeDTO?: UserRoleAssignChangeDTO, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerCreate`\n     * @summary Create\n     * @param {UserCreateInputDTO} [userCreateInputDTO] UserCreateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerCreate(userCreateInputDTO?: UserCreateInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserOutputDTOAPI>;\n    /**\n     * Unset the selected domain for the user, this will clear the domain cookie. On the next request, the backend will set this again.<br> OperationId: `UserControllerDeleteSelectedDomainCookie`\n     * @summary Unset the selected domain for the user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerDeleteSelectedDomainCookie(options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     *    Required permissions: `READ_USERS`<br> OperationId: `UserControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerGetOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UserOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerInvite`\n     * @summary Invite\n     * @param {InviteCreateDTO} [inviteCreateDTO] InviteCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerInvite(inviteCreateDTO?: InviteCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserOutputDTOAPI>;\n    /**\n     * Link your player profile to Takaro, allowing web access for things like shop and stats. To get the code, use the /link command in the game.<br> OperationId: `UserControllerLinkPlayerProfile`\n     * @summary Link player profile\n     * @param {LinkPlayerUnauthedInputDTO} [linkPlayerUnauthedInputDTO] LinkPlayerUnauthedInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerLinkPlayerProfile(linkPlayerUnauthedInputDTO?: LinkPlayerUnauthedInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     * <br> OperationId: `UserControllerLogin`\n     * @summary Login\n     * @param {LoginDTO} [loginDTO] LoginDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerLogin(loginDTO?: LoginDTO, options?: RawAxiosRequestConfig): AxiosPromise<LoginOutputDTOAPI>;\n    /**\n     * <br> OperationId: `UserControllerLogout`\n     * @summary Logout\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerLogout(options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     * Get the current user and the domains that the user has access to. Note that you can only make requests in the scope of a single domain. In order to switch the domain, you need to use the domain selection endpoints<br> OperationId: `UserControllerMe`\n     * @summary Get the current logged in user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerMe(options?: RawAxiosRequestConfig): AxiosPromise<MeOutoutDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     *    Required permissions: `MANAGE_USERS`, `MANAGE_ROLES`<br> OperationId: `UserControllerRemoveRole`\n     * @summary Remove role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerRemoveRole(id: string, roleId: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     *    Required permissions: `READ_USERS`<br> OperationId: `UserControllerSearch`\n     * @summary Search\n     * @param {UserSearchInputDTO} [userSearchInputDTO] UserSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerSearch(userSearchInputDTO?: UserSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserOutputArrayDTOAPI>;\n    /**\n     * One user can have multiple domains, this endpoint is a helper to set the selected domain for the user<br> OperationId: `UserControllerSetSelectedDomain`\n     * @summary Set the selected domain for the user\n     * @param {string} domainId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerSetSelectedDomain(domainId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {UserUpdateDTO} [userUpdateDTO] UserUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    userControllerUpdate(id: string, userUpdateDTO?: UserUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<UserOutputDTOAPI>;\n};\n/**\n * UserApi - object-oriented interface\n * @export\n * @class UserApi\n * @extends {BaseAPI}\n */\ndeclare class UserApi extends BaseAPI {\n    /**\n     *    Required permissions: `MANAGE_USERS`, `MANAGE_ROLES`<br> OperationId: `UserControllerAssignRole`\n     * @summary Assign role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {UserRoleAssignChangeDTO} [userRoleAssignChangeDTO] UserRoleAssignChangeDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerAssignRole(id: string, roleId: string, userRoleAssignChangeDTO?: UserRoleAssignChangeDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerCreate`\n     * @summary Create\n     * @param {UserCreateInputDTO} [userCreateInputDTO] UserCreateInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerCreate(userCreateInputDTO?: UserCreateInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<UserOutputDTOAPI, any>>;\n    /**\n     * Unset the selected domain for the user, this will clear the domain cookie. On the next request, the backend will set this again.<br> OperationId: `UserControllerDeleteSelectedDomainCookie`\n     * @summary Unset the selected domain for the user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerDeleteSelectedDomainCookie(options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     *    Required permissions: `READ_USERS`<br> OperationId: `UserControllerGetOne`\n     * @summary Get one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerGetOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<UserOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerInvite`\n     * @summary Invite\n     * @param {InviteCreateDTO} [inviteCreateDTO] InviteCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerInvite(inviteCreateDTO?: InviteCreateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<UserOutputDTOAPI, any>>;\n    /**\n     * Link your player profile to Takaro, allowing web access for things like shop and stats. To get the code, use the /link command in the game.<br> OperationId: `UserControllerLinkPlayerProfile`\n     * @summary Link player profile\n     * @param {LinkPlayerUnauthedInputDTO} [linkPlayerUnauthedInputDTO] LinkPlayerUnauthedInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerLinkPlayerProfile(linkPlayerUnauthedInputDTO?: LinkPlayerUnauthedInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     * <br> OperationId: `UserControllerLogin`\n     * @summary Login\n     * @param {LoginDTO} [loginDTO] LoginDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerLogin(loginDTO?: LoginDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<LoginOutputDTOAPI, any>>;\n    /**\n     * <br> OperationId: `UserControllerLogout`\n     * @summary Logout\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerLogout(options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     * Get the current user and the domains that the user has access to. Note that you can only make requests in the scope of a single domain. In order to switch the domain, you need to use the domain selection endpoints<br> OperationId: `UserControllerMe`\n     * @summary Get the current logged in user\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerMe(options?: RawAxiosRequestConfig): Promise<AxiosResponse<MeOutoutDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerRemove`\n     * @summary Remove\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     *    Required permissions: `MANAGE_USERS`, `MANAGE_ROLES`<br> OperationId: `UserControllerRemoveRole`\n     * @summary Remove role\n     * @param {string} id\n     * @param {string} roleId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerRemoveRole(id: string, roleId: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     *    Required permissions: `READ_USERS`<br> OperationId: `UserControllerSearch`\n     * @summary Search\n     * @param {UserSearchInputDTO} [userSearchInputDTO] UserSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerSearch(userSearchInputDTO?: UserSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<UserOutputArrayDTOAPI, any>>;\n    /**\n     * One user can have multiple domains, this endpoint is a helper to set the selected domain for the user<br> OperationId: `UserControllerSetSelectedDomain`\n     * @summary Set the selected domain for the user\n     * @param {string} domainId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerSetSelectedDomain(domainId: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<void, any>>;\n    /**\n     *    Required permissions: `MANAGE_USERS`<br> OperationId: `UserControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {UserUpdateDTO} [userUpdateDTO] UserUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    userControllerUpdate(id: string, userUpdateDTO?: UserUpdateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<UserOutputDTOAPI, any>>;\n}\n/**\n * VariableApi - axios parameter creator\n * @export\n */\ndeclare const VariableApiAxiosParamCreator: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_VARIABLES`<br> OperationId: `VariableControllerCreate`\n     * @summary Create\n     * @param {VariableCreateDTO} [variableCreateDTO] VariableCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerCreate: (variableCreateDTO?: VariableCreateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_VARIABLES`<br> OperationId: `VariableControllerDelete`\n     * @summary Delete\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerDelete: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_VARIABLES`<br> OperationId: `VariableControllerFindOne`\n     * @summary Find one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerFindOne: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `READ_VARIABLES`<br> OperationId: `VariableControllerSearch`\n     * @summary Search\n     * @param {VariableSearchInputDTO} [variableSearchInputDTO] VariableSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerSearch: (variableSearchInputDTO?: VariableSearchInputDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n    /**\n     *    Required permissions: `MANAGE_VARIABLES`<br> OperationId: `VariableControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {VariableUpdateDTO} [variableUpdateDTO] VariableUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerUpdate: (id: string, variableUpdateDTO?: VariableUpdateDTO, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;\n};\n/**\n * VariableApi - functional programming interface\n * @export\n */\ndeclare const VariableApiFp: (configuration?: Configuration) => {\n    /**\n     *    Required permissions: `MANAGE_VARIABLES`<br> OperationId: `VariableControllerCreate`\n     * @summary Create\n     * @param {VariableCreateDTO} [variableCreateDTO] VariableCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerCreate(variableCreateDTO?: VariableCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOutputDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_VARIABLES`<br> OperationId: `VariableControllerDelete`\n     * @summary Delete\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIOutput>>;\n    /**\n     *    Required permissions: `READ_VARIABLES`<br> OperationId: `VariableControllerFindOne`\n     * @summary Find one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOutputDTOAPI>>;\n    /**\n     *    Required permissions: `READ_VARIABLES`<br> OperationId: `VariableControllerSearch`\n     * @summary Search\n     * @param {VariableSearchInputDTO} [variableSearchInputDTO] VariableSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerSearch(variableSearchInputDTO?: VariableSearchInputDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOutputArrayDTOAPI>>;\n    /**\n     *    Required permissions: `MANAGE_VARIABLES`<br> OperationId: `VariableControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {VariableUpdateDTO} [variableUpdateDTO] VariableUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerUpdate(id: string, variableUpdateDTO?: VariableUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VariableOutputDTOAPI>>;\n};\n/**\n * VariableApi - factory interface\n * @export\n */\ndeclare const VariableApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {\n    /**\n     *    Required permissions: `MANAGE_VARIABLES`<br> OperationId: `VariableControllerCreate`\n     * @summary Create\n     * @param {VariableCreateDTO} [variableCreateDTO] VariableCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerCreate(variableCreateDTO?: VariableCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<VariableOutputDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_VARIABLES`<br> OperationId: `VariableControllerDelete`\n     * @summary Delete\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<APIOutput>;\n    /**\n     *    Required permissions: `READ_VARIABLES`<br> OperationId: `VariableControllerFindOne`\n     * @summary Find one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<VariableOutputDTOAPI>;\n    /**\n     *    Required permissions: `READ_VARIABLES`<br> OperationId: `VariableControllerSearch`\n     * @summary Search\n     * @param {VariableSearchInputDTO} [variableSearchInputDTO] VariableSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerSearch(variableSearchInputDTO?: VariableSearchInputDTO, options?: RawAxiosRequestConfig): AxiosPromise<VariableOutputArrayDTOAPI>;\n    /**\n     *    Required permissions: `MANAGE_VARIABLES`<br> OperationId: `VariableControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {VariableUpdateDTO} [variableUpdateDTO] VariableUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    variableControllerUpdate(id: string, variableUpdateDTO?: VariableUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<VariableOutputDTOAPI>;\n};\n/**\n * VariableApi - object-oriented interface\n * @export\n * @class VariableApi\n * @extends {BaseAPI}\n */\ndeclare class VariableApi extends BaseAPI {\n    /**\n     *    Required permissions: `MANAGE_VARIABLES`<br> OperationId: `VariableControllerCreate`\n     * @summary Create\n     * @param {VariableCreateDTO} [variableCreateDTO] VariableCreateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VariableApi\n     */\n    variableControllerCreate(variableCreateDTO?: VariableCreateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<VariableOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_VARIABLES`<br> OperationId: `VariableControllerDelete`\n     * @summary Delete\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VariableApi\n     */\n    variableControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<APIOutput, any>>;\n    /**\n     *    Required permissions: `READ_VARIABLES`<br> OperationId: `VariableControllerFindOne`\n     * @summary Find one\n     * @param {string} id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VariableApi\n     */\n    variableControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<AxiosResponse<VariableOutputDTOAPI, any>>;\n    /**\n     *    Required permissions: `READ_VARIABLES`<br> OperationId: `VariableControllerSearch`\n     * @summary Search\n     * @param {VariableSearchInputDTO} [variableSearchInputDTO] VariableSearchInputDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VariableApi\n     */\n    variableControllerSearch(variableSearchInputDTO?: VariableSearchInputDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<VariableOutputArrayDTOAPI, any>>;\n    /**\n     *    Required permissions: `MANAGE_VARIABLES`<br> OperationId: `VariableControllerUpdate`\n     * @summary Update\n     * @param {string} id\n     * @param {VariableUpdateDTO} [variableUpdateDTO] VariableUpdateDTO\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof VariableApi\n     */\n    variableControllerUpdate(id: string, variableUpdateDTO?: VariableUpdateDTO, options?: RawAxiosRequestConfig): Promise<AxiosResponse<VariableOutputDTOAPI, any>>;\n}\n//# sourceMappingURL=api.d.ts.map","file://node_modules/@takaro/apiclient/dist/generated/base.d.ts":"/**\n * Takaro app-api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: development - 7592ea1df1cd1407afe997f0c239d3a9e195235f\n * Contact: support@takaro.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\ndeclare const BASE_PATH: string;\n/**\n *\n * @export\n */\ndeclare const COLLECTION_FORMATS: {\n    csv: string;\n    ssv: string;\n    tsv: string;\n    pipes: string;\n};\n/**\n *\n * @export\n * @interface RequestArgs\n */\ninterface RequestArgs {\n    url: string;\n    options: RawAxiosRequestConfig;\n}\n/**\n *\n * @export\n * @class BaseAPI\n */\ndeclare class BaseAPI {\n    protected basePath: string;\n    protected axios: AxiosInstance;\n    protected configuration: Configuration | undefined;\n    constructor(configuration?: Configuration, basePath?: string, axios?: AxiosInstance);\n}\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\ndeclare class RequiredError extends Error {\n    field: string;\n    constructor(field: string, msg?: string);\n}\ninterface ServerMap {\n    [key: string]: {\n        url: string;\n        description: string;\n    }[];\n}\n/**\n *\n * @export\n */\ndeclare const operationServerMap: ServerMap;\n{};\n//# sourceMappingURL=base.d.ts.map","file://node_modules/@takaro/apiclient/dist/generated/common.d.ts":"/**\n * Takaro app-api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: development - 7592ea1df1cd1407afe997f0c239d3a9e195235f\n * Contact: support@takaro.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/**\n *\n * @export\n */\ndeclare const DUMMY_BASE_URL = \"https://example.com\";\n/**\n *\n * @throws {RequiredError}\n * @export\n */\ndeclare const assertParamExists: (functionName: string, paramName: string, paramValue: unknown) => void;\n/**\n *\n * @export\n */\ndeclare const setApiKeyToObject: (object: any, keyParamName: string, configuration?: Configuration) => Promise<void>;\n/**\n *\n * @export\n */\ndeclare const setBasicAuthToObject: (object: any, configuration?: Configuration) => void;\n/**\n *\n * @export\n */\ndeclare const setBearerAuthToObject: (object: any, configuration?: Configuration) => Promise<void>;\n/**\n *\n * @export\n */\ndeclare const setOAuthToObject: (object: any, name: string, scopes: string[], configuration?: Configuration) => Promise<void>;\n/**\n *\n * @export\n */\ndeclare const setSearchParams: (url: URL, ...objects: any[]) => void;\n/**\n *\n * @export\n */\ndeclare const serializeDataIfNeeded: (value: any, requestOptions: any, configuration?: Configuration) => any;\n/**\n *\n * @export\n */\ndeclare const toPathString: (url: URL) => string;\n/**\n *\n * @export\n */\ndeclare const createRequestFunction: (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) => <T = unknown, R = AxiosResponse<T, any>>(axios?: AxiosInstance, basePath?: string) => Promise<R>;\n//# sourceMappingURL=common.d.ts.map","file://node_modules/@takaro/apiclient/dist/generated/configuration.d.ts":"/**\n * Takaro app-api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: development - 7592ea1df1cd1407afe997f0c239d3a9e195235f\n * Contact: support@takaro.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\ninterface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    serverIndex?: number;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\ndeclare class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * override server index\n     *\n     * @type {number}\n     * @memberof Configuration\n     */\n    serverIndex?: number;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n    constructor(param?: ConfigurationParameters);\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    isJsonMime(mime: string): boolean;\n}\n//# sourceMappingURL=configuration.d.ts.map","file://node_modules/@takaro/apiclient/dist/generated/index.d.ts":"/**\n * Takaro app-api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: development - 7592ea1df1cd1407afe997f0c239d3a9e195235f\n * Contact: support@takaro.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n* from './api.js';\n* from './configuration.js';\n//# sourceMappingURL=index.d.ts.map","file://node_modules/@takaro/apiclient/dist/lib/adminClient.d.ts":"interface IAdminApiClientConfig extends IBaseApiClientConfig {\n    auth: {\n        clientSecret: string;\n    };\n}\ndeclare class AdminClient extends BaseApiClient<IAdminApiClientConfig> {\n    constructor(config: IAdminApiClientConfig);\n    private addAuthInterceptor;\n    get domain(): DomainApi;\n}\n//# sourceMappingURL=adminClient.d.ts.map","file://node_modules/@takaro/apiclient/dist/lib/baseClient.d.ts":"interface IBaseApiClientConfig {\n    url: string;\n    log?: Logger | false;\n}\ninterface Logger {\n    info: (msg: string, meta?: unknown) => void;\n    warn: (msg: string, meta?: unknown) => void;\n    error: (msg: string, meta?: unknown) => void;\n    debug: (msg: string, meta?: unknown) => void;\n}\ndeclare class BaseApiClient<T extends IBaseApiClientConfig> {\n    protected readonly config: T;\n    protected axios: AxiosInstance;\n    protected log: Logger;\n    constructor(config: T);\n    setHeader(key: string, value: string): void;\n    get axiosInstance(): AxiosInstance;\n    isJsonMime(mime: string): mime is \"application/json\";\n    private addLoggers;\n    /**\n     * Wait until the API reports that it is healthy\n     * @param timeout in milliseconds\n     */\n    waitUntilHealthy(timeout?: number): Promise<void>;\n    get meta(): MetaApi;\n}\n{};\n//# sourceMappingURL=baseClient.d.ts.map","file://node_modules/@takaro/apiclient/dist/lib/client.d.ts":"interface IApiClientConfig extends IBaseApiClientConfig {\n    auth: {\n        username?: string;\n        password?: string;\n        token?: string;\n    };\n}\ndeclare class Client extends BaseApiClient<IApiClientConfig> {\n    token: string | null;\n    constructor(config: IApiClientConfig);\n    set username(username: string);\n    set password(password: string);\n    login(): Promise<string>;\n    logout(): void;\n    permissionCodesToInputs(permissions: string[]): Promise<{\n        permissionId: string;\n    }[]>;\n    get item(): ItemApi;\n    get user(): UserApi;\n    get role(): RoleApi;\n    get gameserver(): GameServerApi;\n    get cronjob(): CronJobApi;\n    get function(): FunctionApi;\n    get module(): ModuleApi;\n    get hook(): HookApi;\n    get command(): CommandApi;\n    get player(): PlayerApi;\n    get settings(): SettingsApi;\n    get variable(): VariableApi;\n    get discord(): DiscordApi;\n    get event(): EventApi;\n    get playerOnGameserver(): PlayerOnGameServerApi;\n    get stats(): StatsApi;\n    get shopListing(): ShopListingApi;\n    get shopOrder(): ShopOrderApi;\n}\n//# sourceMappingURL=client.d.ts.map","file://node_modules/@takaro/apiclient/dist/main.d.ts":"{ AxiosResponse } from 'axios';\n{ isAxiosError } from 'axios';\n{ AdminClient } from './lib/adminClient.js';\n{ Client } from './lib/client.js';\ntype ITakaroAPIAxiosResponse<T> = AxiosResponse<T>;\n* from './generated/api.js';\n//# sourceMappingURL=main.d.ts.map"}
